
WLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f98  08005f98  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f98  08005f98  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000080  0800601c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800601c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c19  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dff  00000000  00000000  00029cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002c600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d980  00000000  00000000  0002d038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009369  00000000  00000000  0003a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004a362  00000000  00000000  00043d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008e083  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf8  00000000  00000000  0008e100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d60 	.word	0x08005d60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08005d60 	.word	0x08005d60

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fbd5 	bl	8000bb4 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb2d 	bl	8000a74 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fbc7 	bl	8000bb4 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fbbd 	bl	8000bb4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fb4f 	bl	8000aec <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fb45 	bl	8000aec <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_ddiv>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	4657      	mov	r7, sl
 8000474:	46de      	mov	lr, fp
 8000476:	464e      	mov	r6, r9
 8000478:	4645      	mov	r5, r8
 800047a:	b5e0      	push	{r5, r6, r7, lr}
 800047c:	4683      	mov	fp, r0
 800047e:	0007      	movs	r7, r0
 8000480:	030e      	lsls	r6, r1, #12
 8000482:	0048      	lsls	r0, r1, #1
 8000484:	b085      	sub	sp, #20
 8000486:	4692      	mov	sl, r2
 8000488:	001c      	movs	r4, r3
 800048a:	0b36      	lsrs	r6, r6, #12
 800048c:	0d40      	lsrs	r0, r0, #21
 800048e:	0fcd      	lsrs	r5, r1, #31
 8000490:	2800      	cmp	r0, #0
 8000492:	d100      	bne.n	8000496 <__aeabi_ddiv+0x26>
 8000494:	e09d      	b.n	80005d2 <__aeabi_ddiv+0x162>
 8000496:	4b95      	ldr	r3, [pc, #596]	; (80006ec <__aeabi_ddiv+0x27c>)
 8000498:	4298      	cmp	r0, r3
 800049a:	d039      	beq.n	8000510 <__aeabi_ddiv+0xa0>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	00f6      	lsls	r6, r6, #3
 80004a0:	041b      	lsls	r3, r3, #16
 80004a2:	431e      	orrs	r6, r3
 80004a4:	4a92      	ldr	r2, [pc, #584]	; (80006f0 <__aeabi_ddiv+0x280>)
 80004a6:	0f7b      	lsrs	r3, r7, #29
 80004a8:	4333      	orrs	r3, r6
 80004aa:	4699      	mov	r9, r3
 80004ac:	4694      	mov	ip, r2
 80004ae:	0003      	movs	r3, r0
 80004b0:	4463      	add	r3, ip
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2300      	movs	r3, #0
 80004b6:	2600      	movs	r6, #0
 80004b8:	00ff      	lsls	r7, r7, #3
 80004ba:	9302      	str	r3, [sp, #8]
 80004bc:	0323      	lsls	r3, r4, #12
 80004be:	0b1b      	lsrs	r3, r3, #12
 80004c0:	4698      	mov	r8, r3
 80004c2:	0063      	lsls	r3, r4, #1
 80004c4:	0fe4      	lsrs	r4, r4, #31
 80004c6:	4652      	mov	r2, sl
 80004c8:	0d5b      	lsrs	r3, r3, #21
 80004ca:	9401      	str	r4, [sp, #4]
 80004cc:	d100      	bne.n	80004d0 <__aeabi_ddiv+0x60>
 80004ce:	e0b3      	b.n	8000638 <__aeabi_ddiv+0x1c8>
 80004d0:	4986      	ldr	r1, [pc, #536]	; (80006ec <__aeabi_ddiv+0x27c>)
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_ddiv+0x68>
 80004d6:	e09e      	b.n	8000616 <__aeabi_ddiv+0x1a6>
 80004d8:	4642      	mov	r2, r8
 80004da:	00d1      	lsls	r1, r2, #3
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	0412      	lsls	r2, r2, #16
 80004e0:	430a      	orrs	r2, r1
 80004e2:	4651      	mov	r1, sl
 80004e4:	0f49      	lsrs	r1, r1, #29
 80004e6:	4311      	orrs	r1, r2
 80004e8:	468b      	mov	fp, r1
 80004ea:	4981      	ldr	r1, [pc, #516]	; (80006f0 <__aeabi_ddiv+0x280>)
 80004ec:	4652      	mov	r2, sl
 80004ee:	468c      	mov	ip, r1
 80004f0:	9900      	ldr	r1, [sp, #0]
 80004f2:	4463      	add	r3, ip
 80004f4:	1acb      	subs	r3, r1, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	00d2      	lsls	r2, r2, #3
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	002b      	movs	r3, r5
 80004fe:	4063      	eors	r3, r4
 8000500:	469a      	mov	sl, r3
 8000502:	2e0f      	cmp	r6, #15
 8000504:	d900      	bls.n	8000508 <__aeabi_ddiv+0x98>
 8000506:	e105      	b.n	8000714 <__aeabi_ddiv+0x2a4>
 8000508:	4b7a      	ldr	r3, [pc, #488]	; (80006f4 <__aeabi_ddiv+0x284>)
 800050a:	00b6      	lsls	r6, r6, #2
 800050c:	599b      	ldr	r3, [r3, r6]
 800050e:	469f      	mov	pc, r3
 8000510:	465b      	mov	r3, fp
 8000512:	4333      	orrs	r3, r6
 8000514:	4699      	mov	r9, r3
 8000516:	d000      	beq.n	800051a <__aeabi_ddiv+0xaa>
 8000518:	e0b8      	b.n	800068c <__aeabi_ddiv+0x21c>
 800051a:	2302      	movs	r3, #2
 800051c:	2608      	movs	r6, #8
 800051e:	2700      	movs	r7, #0
 8000520:	9000      	str	r0, [sp, #0]
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	e7ca      	b.n	80004bc <__aeabi_ddiv+0x4c>
 8000526:	46cb      	mov	fp, r9
 8000528:	003a      	movs	r2, r7
 800052a:	9902      	ldr	r1, [sp, #8]
 800052c:	9501      	str	r5, [sp, #4]
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	469a      	mov	sl, r3
 8000532:	2902      	cmp	r1, #2
 8000534:	d027      	beq.n	8000586 <__aeabi_ddiv+0x116>
 8000536:	2903      	cmp	r1, #3
 8000538:	d100      	bne.n	800053c <__aeabi_ddiv+0xcc>
 800053a:	e280      	b.n	8000a3e <__aeabi_ddiv+0x5ce>
 800053c:	2901      	cmp	r1, #1
 800053e:	d044      	beq.n	80005ca <__aeabi_ddiv+0x15a>
 8000540:	496d      	ldr	r1, [pc, #436]	; (80006f8 <__aeabi_ddiv+0x288>)
 8000542:	9b00      	ldr	r3, [sp, #0]
 8000544:	468c      	mov	ip, r1
 8000546:	4463      	add	r3, ip
 8000548:	001c      	movs	r4, r3
 800054a:	2c00      	cmp	r4, #0
 800054c:	dd38      	ble.n	80005c0 <__aeabi_ddiv+0x150>
 800054e:	0753      	lsls	r3, r2, #29
 8000550:	d000      	beq.n	8000554 <__aeabi_ddiv+0xe4>
 8000552:	e213      	b.n	800097c <__aeabi_ddiv+0x50c>
 8000554:	08d2      	lsrs	r2, r2, #3
 8000556:	465b      	mov	r3, fp
 8000558:	01db      	lsls	r3, r3, #7
 800055a:	d509      	bpl.n	8000570 <__aeabi_ddiv+0x100>
 800055c:	4659      	mov	r1, fp
 800055e:	4b67      	ldr	r3, [pc, #412]	; (80006fc <__aeabi_ddiv+0x28c>)
 8000560:	4019      	ands	r1, r3
 8000562:	468b      	mov	fp, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	00c9      	lsls	r1, r1, #3
 8000568:	468c      	mov	ip, r1
 800056a:	9b00      	ldr	r3, [sp, #0]
 800056c:	4463      	add	r3, ip
 800056e:	001c      	movs	r4, r3
 8000570:	4b63      	ldr	r3, [pc, #396]	; (8000700 <__aeabi_ddiv+0x290>)
 8000572:	429c      	cmp	r4, r3
 8000574:	dc07      	bgt.n	8000586 <__aeabi_ddiv+0x116>
 8000576:	465b      	mov	r3, fp
 8000578:	0564      	lsls	r4, r4, #21
 800057a:	075f      	lsls	r7, r3, #29
 800057c:	025b      	lsls	r3, r3, #9
 800057e:	4317      	orrs	r7, r2
 8000580:	0b1b      	lsrs	r3, r3, #12
 8000582:	0d62      	lsrs	r2, r4, #21
 8000584:	e002      	b.n	800058c <__aeabi_ddiv+0x11c>
 8000586:	2300      	movs	r3, #0
 8000588:	2700      	movs	r7, #0
 800058a:	4a58      	ldr	r2, [pc, #352]	; (80006ec <__aeabi_ddiv+0x27c>)
 800058c:	2100      	movs	r1, #0
 800058e:	031b      	lsls	r3, r3, #12
 8000590:	0b1c      	lsrs	r4, r3, #12
 8000592:	0d0b      	lsrs	r3, r1, #20
 8000594:	051b      	lsls	r3, r3, #20
 8000596:	4323      	orrs	r3, r4
 8000598:	0514      	lsls	r4, r2, #20
 800059a:	4a5a      	ldr	r2, [pc, #360]	; (8000704 <__aeabi_ddiv+0x294>)
 800059c:	0038      	movs	r0, r7
 800059e:	4013      	ands	r3, r2
 80005a0:	431c      	orrs	r4, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	0064      	lsls	r4, r4, #1
 80005a6:	07db      	lsls	r3, r3, #31
 80005a8:	0864      	lsrs	r4, r4, #1
 80005aa:	431c      	orrs	r4, r3
 80005ac:	0021      	movs	r1, r4
 80005ae:	b005      	add	sp, #20
 80005b0:	bc3c      	pop	{r2, r3, r4, r5}
 80005b2:	4690      	mov	r8, r2
 80005b4:	4699      	mov	r9, r3
 80005b6:	46a2      	mov	sl, r4
 80005b8:	46ab      	mov	fp, r5
 80005ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005bc:	2201      	movs	r2, #1
 80005be:	4252      	negs	r2, r2
 80005c0:	2301      	movs	r3, #1
 80005c2:	1b1b      	subs	r3, r3, r4
 80005c4:	2b38      	cmp	r3, #56	; 0x38
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_ddiv+0x15a>
 80005c8:	e1ad      	b.n	8000926 <__aeabi_ddiv+0x4b6>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	2700      	movs	r7, #0
 80005d0:	e7dc      	b.n	800058c <__aeabi_ddiv+0x11c>
 80005d2:	465b      	mov	r3, fp
 80005d4:	4333      	orrs	r3, r6
 80005d6:	4699      	mov	r9, r3
 80005d8:	d05e      	beq.n	8000698 <__aeabi_ddiv+0x228>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_ddiv+0x170>
 80005de:	e18a      	b.n	80008f6 <__aeabi_ddiv+0x486>
 80005e0:	0030      	movs	r0, r6
 80005e2:	f001 f9ab 	bl	800193c <__clzsi2>
 80005e6:	0003      	movs	r3, r0
 80005e8:	3b0b      	subs	r3, #11
 80005ea:	2b1c      	cmp	r3, #28
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_ddiv+0x180>
 80005ee:	e17b      	b.n	80008e8 <__aeabi_ddiv+0x478>
 80005f0:	221d      	movs	r2, #29
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	465a      	mov	r2, fp
 80005f6:	0001      	movs	r1, r0
 80005f8:	40da      	lsrs	r2, r3
 80005fa:	3908      	subs	r1, #8
 80005fc:	408e      	lsls	r6, r1
 80005fe:	0013      	movs	r3, r2
 8000600:	465f      	mov	r7, fp
 8000602:	4333      	orrs	r3, r6
 8000604:	4699      	mov	r9, r3
 8000606:	408f      	lsls	r7, r1
 8000608:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <__aeabi_ddiv+0x298>)
 800060a:	2600      	movs	r6, #0
 800060c:	1a1b      	subs	r3, r3, r0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	e752      	b.n	80004bc <__aeabi_ddiv+0x4c>
 8000616:	4641      	mov	r1, r8
 8000618:	4653      	mov	r3, sl
 800061a:	430b      	orrs	r3, r1
 800061c:	493b      	ldr	r1, [pc, #236]	; (800070c <__aeabi_ddiv+0x29c>)
 800061e:	469b      	mov	fp, r3
 8000620:	468c      	mov	ip, r1
 8000622:	9b00      	ldr	r3, [sp, #0]
 8000624:	4463      	add	r3, ip
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	465b      	mov	r3, fp
 800062a:	2b00      	cmp	r3, #0
 800062c:	d13b      	bne.n	80006a6 <__aeabi_ddiv+0x236>
 800062e:	2302      	movs	r3, #2
 8000630:	2200      	movs	r2, #0
 8000632:	431e      	orrs	r6, r3
 8000634:	2102      	movs	r1, #2
 8000636:	e761      	b.n	80004fc <__aeabi_ddiv+0x8c>
 8000638:	4643      	mov	r3, r8
 800063a:	4313      	orrs	r3, r2
 800063c:	469b      	mov	fp, r3
 800063e:	d037      	beq.n	80006b0 <__aeabi_ddiv+0x240>
 8000640:	4643      	mov	r3, r8
 8000642:	2b00      	cmp	r3, #0
 8000644:	d100      	bne.n	8000648 <__aeabi_ddiv+0x1d8>
 8000646:	e162      	b.n	800090e <__aeabi_ddiv+0x49e>
 8000648:	4640      	mov	r0, r8
 800064a:	f001 f977 	bl	800193c <__clzsi2>
 800064e:	0003      	movs	r3, r0
 8000650:	3b0b      	subs	r3, #11
 8000652:	2b1c      	cmp	r3, #28
 8000654:	dd00      	ble.n	8000658 <__aeabi_ddiv+0x1e8>
 8000656:	e153      	b.n	8000900 <__aeabi_ddiv+0x490>
 8000658:	0002      	movs	r2, r0
 800065a:	4641      	mov	r1, r8
 800065c:	3a08      	subs	r2, #8
 800065e:	4091      	lsls	r1, r2
 8000660:	4688      	mov	r8, r1
 8000662:	211d      	movs	r1, #29
 8000664:	1acb      	subs	r3, r1, r3
 8000666:	4651      	mov	r1, sl
 8000668:	40d9      	lsrs	r1, r3
 800066a:	000b      	movs	r3, r1
 800066c:	4641      	mov	r1, r8
 800066e:	430b      	orrs	r3, r1
 8000670:	469b      	mov	fp, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001a      	movs	r2, r3
 8000678:	9b00      	ldr	r3, [sp, #0]
 800067a:	4925      	ldr	r1, [pc, #148]	; (8000710 <__aeabi_ddiv+0x2a0>)
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	0003      	movs	r3, r0
 8000682:	468c      	mov	ip, r1
 8000684:	4463      	add	r3, ip
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2100      	movs	r1, #0
 800068a:	e737      	b.n	80004fc <__aeabi_ddiv+0x8c>
 800068c:	2303      	movs	r3, #3
 800068e:	46b1      	mov	r9, r6
 8000690:	9000      	str	r0, [sp, #0]
 8000692:	260c      	movs	r6, #12
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	e711      	b.n	80004bc <__aeabi_ddiv+0x4c>
 8000698:	2300      	movs	r3, #0
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	2604      	movs	r6, #4
 80006a0:	2700      	movs	r7, #0
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	e70a      	b.n	80004bc <__aeabi_ddiv+0x4c>
 80006a6:	2303      	movs	r3, #3
 80006a8:	46c3      	mov	fp, r8
 80006aa:	431e      	orrs	r6, r3
 80006ac:	2103      	movs	r1, #3
 80006ae:	e725      	b.n	80004fc <__aeabi_ddiv+0x8c>
 80006b0:	3301      	adds	r3, #1
 80006b2:	431e      	orrs	r6, r3
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	e720      	b.n	80004fc <__aeabi_ddiv+0x8c>
 80006ba:	2300      	movs	r3, #0
 80006bc:	469a      	mov	sl, r3
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	2700      	movs	r7, #0
 80006c2:	031b      	lsls	r3, r3, #12
 80006c4:	4a09      	ldr	r2, [pc, #36]	; (80006ec <__aeabi_ddiv+0x27c>)
 80006c6:	e761      	b.n	800058c <__aeabi_ddiv+0x11c>
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	4649      	mov	r1, r9
 80006cc:	031b      	lsls	r3, r3, #12
 80006ce:	4219      	tst	r1, r3
 80006d0:	d100      	bne.n	80006d4 <__aeabi_ddiv+0x264>
 80006d2:	e0e2      	b.n	800089a <__aeabi_ddiv+0x42a>
 80006d4:	4659      	mov	r1, fp
 80006d6:	4219      	tst	r1, r3
 80006d8:	d000      	beq.n	80006dc <__aeabi_ddiv+0x26c>
 80006da:	e0de      	b.n	800089a <__aeabi_ddiv+0x42a>
 80006dc:	430b      	orrs	r3, r1
 80006de:	031b      	lsls	r3, r3, #12
 80006e0:	0017      	movs	r7, r2
 80006e2:	0b1b      	lsrs	r3, r3, #12
 80006e4:	46a2      	mov	sl, r4
 80006e6:	4a01      	ldr	r2, [pc, #4]	; (80006ec <__aeabi_ddiv+0x27c>)
 80006e8:	e750      	b.n	800058c <__aeabi_ddiv+0x11c>
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	000007ff 	.word	0x000007ff
 80006f0:	fffffc01 	.word	0xfffffc01
 80006f4:	08005ed4 	.word	0x08005ed4
 80006f8:	000003ff 	.word	0x000003ff
 80006fc:	feffffff 	.word	0xfeffffff
 8000700:	000007fe 	.word	0x000007fe
 8000704:	800fffff 	.word	0x800fffff
 8000708:	fffffc0d 	.word	0xfffffc0d
 800070c:	fffff801 	.word	0xfffff801
 8000710:	000003f3 	.word	0x000003f3
 8000714:	45d9      	cmp	r9, fp
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x2aa>
 8000718:	e0cb      	b.n	80008b2 <__aeabi_ddiv+0x442>
 800071a:	d100      	bne.n	800071e <__aeabi_ddiv+0x2ae>
 800071c:	e0c6      	b.n	80008ac <__aeabi_ddiv+0x43c>
 800071e:	003c      	movs	r4, r7
 8000720:	4648      	mov	r0, r9
 8000722:	2700      	movs	r7, #0
 8000724:	9b00      	ldr	r3, [sp, #0]
 8000726:	3b01      	subs	r3, #1
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	465b      	mov	r3, fp
 800072c:	0e16      	lsrs	r6, r2, #24
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	431e      	orrs	r6, r3
 8000732:	0213      	lsls	r3, r2, #8
 8000734:	4698      	mov	r8, r3
 8000736:	0433      	lsls	r3, r6, #16
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	4699      	mov	r9, r3
 800073c:	0c31      	lsrs	r1, r6, #16
 800073e:	9101      	str	r1, [sp, #4]
 8000740:	f7ff fd68 	bl	8000214 <__aeabi_uidivmod>
 8000744:	464a      	mov	r2, r9
 8000746:	4342      	muls	r2, r0
 8000748:	040b      	lsls	r3, r1, #16
 800074a:	0c21      	lsrs	r1, r4, #16
 800074c:	0005      	movs	r5, r0
 800074e:	4319      	orrs	r1, r3
 8000750:	428a      	cmp	r2, r1
 8000752:	d907      	bls.n	8000764 <__aeabi_ddiv+0x2f4>
 8000754:	1989      	adds	r1, r1, r6
 8000756:	3d01      	subs	r5, #1
 8000758:	428e      	cmp	r6, r1
 800075a:	d803      	bhi.n	8000764 <__aeabi_ddiv+0x2f4>
 800075c:	428a      	cmp	r2, r1
 800075e:	d901      	bls.n	8000764 <__aeabi_ddiv+0x2f4>
 8000760:	1e85      	subs	r5, r0, #2
 8000762:	1989      	adds	r1, r1, r6
 8000764:	1a88      	subs	r0, r1, r2
 8000766:	9901      	ldr	r1, [sp, #4]
 8000768:	f7ff fd54 	bl	8000214 <__aeabi_uidivmod>
 800076c:	0409      	lsls	r1, r1, #16
 800076e:	468c      	mov	ip, r1
 8000770:	464a      	mov	r2, r9
 8000772:	0421      	lsls	r1, r4, #16
 8000774:	4664      	mov	r4, ip
 8000776:	4342      	muls	r2, r0
 8000778:	0c09      	lsrs	r1, r1, #16
 800077a:	0003      	movs	r3, r0
 800077c:	4321      	orrs	r1, r4
 800077e:	428a      	cmp	r2, r1
 8000780:	d904      	bls.n	800078c <__aeabi_ddiv+0x31c>
 8000782:	1989      	adds	r1, r1, r6
 8000784:	3b01      	subs	r3, #1
 8000786:	428e      	cmp	r6, r1
 8000788:	d800      	bhi.n	800078c <__aeabi_ddiv+0x31c>
 800078a:	e0f1      	b.n	8000970 <__aeabi_ddiv+0x500>
 800078c:	042d      	lsls	r5, r5, #16
 800078e:	431d      	orrs	r5, r3
 8000790:	46ab      	mov	fp, r5
 8000792:	4643      	mov	r3, r8
 8000794:	1a89      	subs	r1, r1, r2
 8000796:	4642      	mov	r2, r8
 8000798:	0c28      	lsrs	r0, r5, #16
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	0c1d      	lsrs	r5, r3, #16
 800079e:	465b      	mov	r3, fp
 80007a0:	0c14      	lsrs	r4, r2, #16
 80007a2:	0022      	movs	r2, r4
 80007a4:	041b      	lsls	r3, r3, #16
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	435a      	muls	r2, r3
 80007aa:	9403      	str	r4, [sp, #12]
 80007ac:	436b      	muls	r3, r5
 80007ae:	4344      	muls	r4, r0
 80007b0:	9502      	str	r5, [sp, #8]
 80007b2:	4368      	muls	r0, r5
 80007b4:	191b      	adds	r3, r3, r4
 80007b6:	0c15      	lsrs	r5, r2, #16
 80007b8:	18eb      	adds	r3, r5, r3
 80007ba:	429c      	cmp	r4, r3
 80007bc:	d903      	bls.n	80007c6 <__aeabi_ddiv+0x356>
 80007be:	2480      	movs	r4, #128	; 0x80
 80007c0:	0264      	lsls	r4, r4, #9
 80007c2:	46a4      	mov	ip, r4
 80007c4:	4460      	add	r0, ip
 80007c6:	0c1c      	lsrs	r4, r3, #16
 80007c8:	0415      	lsls	r5, r2, #16
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	0c2d      	lsrs	r5, r5, #16
 80007ce:	1820      	adds	r0, r4, r0
 80007d0:	195d      	adds	r5, r3, r5
 80007d2:	4281      	cmp	r1, r0
 80007d4:	d377      	bcc.n	80008c6 <__aeabi_ddiv+0x456>
 80007d6:	d073      	beq.n	80008c0 <__aeabi_ddiv+0x450>
 80007d8:	1a0c      	subs	r4, r1, r0
 80007da:	4aa2      	ldr	r2, [pc, #648]	; (8000a64 <__aeabi_ddiv+0x5f4>)
 80007dc:	1b7d      	subs	r5, r7, r5
 80007de:	42af      	cmp	r7, r5
 80007e0:	41bf      	sbcs	r7, r7
 80007e2:	4694      	mov	ip, r2
 80007e4:	9b00      	ldr	r3, [sp, #0]
 80007e6:	427f      	negs	r7, r7
 80007e8:	4463      	add	r3, ip
 80007ea:	1be0      	subs	r0, r4, r7
 80007ec:	001c      	movs	r4, r3
 80007ee:	4286      	cmp	r6, r0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_ddiv+0x384>
 80007f2:	e0db      	b.n	80009ac <__aeabi_ddiv+0x53c>
 80007f4:	9901      	ldr	r1, [sp, #4]
 80007f6:	f7ff fd0d 	bl	8000214 <__aeabi_uidivmod>
 80007fa:	464a      	mov	r2, r9
 80007fc:	4342      	muls	r2, r0
 80007fe:	040b      	lsls	r3, r1, #16
 8000800:	0c29      	lsrs	r1, r5, #16
 8000802:	0007      	movs	r7, r0
 8000804:	4319      	orrs	r1, r3
 8000806:	428a      	cmp	r2, r1
 8000808:	d907      	bls.n	800081a <__aeabi_ddiv+0x3aa>
 800080a:	1989      	adds	r1, r1, r6
 800080c:	3f01      	subs	r7, #1
 800080e:	428e      	cmp	r6, r1
 8000810:	d803      	bhi.n	800081a <__aeabi_ddiv+0x3aa>
 8000812:	428a      	cmp	r2, r1
 8000814:	d901      	bls.n	800081a <__aeabi_ddiv+0x3aa>
 8000816:	1e87      	subs	r7, r0, #2
 8000818:	1989      	adds	r1, r1, r6
 800081a:	1a88      	subs	r0, r1, r2
 800081c:	9901      	ldr	r1, [sp, #4]
 800081e:	f7ff fcf9 	bl	8000214 <__aeabi_uidivmod>
 8000822:	0409      	lsls	r1, r1, #16
 8000824:	464a      	mov	r2, r9
 8000826:	4689      	mov	r9, r1
 8000828:	0429      	lsls	r1, r5, #16
 800082a:	464d      	mov	r5, r9
 800082c:	4342      	muls	r2, r0
 800082e:	0c09      	lsrs	r1, r1, #16
 8000830:	0003      	movs	r3, r0
 8000832:	4329      	orrs	r1, r5
 8000834:	428a      	cmp	r2, r1
 8000836:	d907      	bls.n	8000848 <__aeabi_ddiv+0x3d8>
 8000838:	1989      	adds	r1, r1, r6
 800083a:	3b01      	subs	r3, #1
 800083c:	428e      	cmp	r6, r1
 800083e:	d803      	bhi.n	8000848 <__aeabi_ddiv+0x3d8>
 8000840:	428a      	cmp	r2, r1
 8000842:	d901      	bls.n	8000848 <__aeabi_ddiv+0x3d8>
 8000844:	1e83      	subs	r3, r0, #2
 8000846:	1989      	adds	r1, r1, r6
 8000848:	043f      	lsls	r7, r7, #16
 800084a:	1a89      	subs	r1, r1, r2
 800084c:	003a      	movs	r2, r7
 800084e:	9f03      	ldr	r7, [sp, #12]
 8000850:	431a      	orrs	r2, r3
 8000852:	0038      	movs	r0, r7
 8000854:	0413      	lsls	r3, r2, #16
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	4358      	muls	r0, r3
 800085a:	4681      	mov	r9, r0
 800085c:	9802      	ldr	r0, [sp, #8]
 800085e:	0c15      	lsrs	r5, r2, #16
 8000860:	436f      	muls	r7, r5
 8000862:	4343      	muls	r3, r0
 8000864:	4345      	muls	r5, r0
 8000866:	4648      	mov	r0, r9
 8000868:	0c00      	lsrs	r0, r0, #16
 800086a:	4684      	mov	ip, r0
 800086c:	19db      	adds	r3, r3, r7
 800086e:	4463      	add	r3, ip
 8000870:	429f      	cmp	r7, r3
 8000872:	d903      	bls.n	800087c <__aeabi_ddiv+0x40c>
 8000874:	2080      	movs	r0, #128	; 0x80
 8000876:	0240      	lsls	r0, r0, #9
 8000878:	4684      	mov	ip, r0
 800087a:	4465      	add	r5, ip
 800087c:	4648      	mov	r0, r9
 800087e:	0c1f      	lsrs	r7, r3, #16
 8000880:	0400      	lsls	r0, r0, #16
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	0c00      	lsrs	r0, r0, #16
 8000886:	197d      	adds	r5, r7, r5
 8000888:	1818      	adds	r0, r3, r0
 800088a:	42a9      	cmp	r1, r5
 800088c:	d200      	bcs.n	8000890 <__aeabi_ddiv+0x420>
 800088e:	e084      	b.n	800099a <__aeabi_ddiv+0x52a>
 8000890:	d100      	bne.n	8000894 <__aeabi_ddiv+0x424>
 8000892:	e07f      	b.n	8000994 <__aeabi_ddiv+0x524>
 8000894:	2301      	movs	r3, #1
 8000896:	431a      	orrs	r2, r3
 8000898:	e657      	b.n	800054a <__aeabi_ddiv+0xda>
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	464a      	mov	r2, r9
 800089e:	031b      	lsls	r3, r3, #12
 80008a0:	4313      	orrs	r3, r2
 80008a2:	031b      	lsls	r3, r3, #12
 80008a4:	0b1b      	lsrs	r3, r3, #12
 80008a6:	46aa      	mov	sl, r5
 80008a8:	4a6f      	ldr	r2, [pc, #444]	; (8000a68 <__aeabi_ddiv+0x5f8>)
 80008aa:	e66f      	b.n	800058c <__aeabi_ddiv+0x11c>
 80008ac:	42ba      	cmp	r2, r7
 80008ae:	d900      	bls.n	80008b2 <__aeabi_ddiv+0x442>
 80008b0:	e735      	b.n	800071e <__aeabi_ddiv+0x2ae>
 80008b2:	464b      	mov	r3, r9
 80008b4:	07dc      	lsls	r4, r3, #31
 80008b6:	0858      	lsrs	r0, r3, #1
 80008b8:	087b      	lsrs	r3, r7, #1
 80008ba:	431c      	orrs	r4, r3
 80008bc:	07ff      	lsls	r7, r7, #31
 80008be:	e734      	b.n	800072a <__aeabi_ddiv+0x2ba>
 80008c0:	2400      	movs	r4, #0
 80008c2:	42af      	cmp	r7, r5
 80008c4:	d289      	bcs.n	80007da <__aeabi_ddiv+0x36a>
 80008c6:	4447      	add	r7, r8
 80008c8:	4547      	cmp	r7, r8
 80008ca:	41a4      	sbcs	r4, r4
 80008cc:	465b      	mov	r3, fp
 80008ce:	4264      	negs	r4, r4
 80008d0:	19a4      	adds	r4, r4, r6
 80008d2:	1864      	adds	r4, r4, r1
 80008d4:	3b01      	subs	r3, #1
 80008d6:	42a6      	cmp	r6, r4
 80008d8:	d21e      	bcs.n	8000918 <__aeabi_ddiv+0x4a8>
 80008da:	42a0      	cmp	r0, r4
 80008dc:	d86d      	bhi.n	80009ba <__aeabi_ddiv+0x54a>
 80008de:	d100      	bne.n	80008e2 <__aeabi_ddiv+0x472>
 80008e0:	e0b6      	b.n	8000a50 <__aeabi_ddiv+0x5e0>
 80008e2:	1a24      	subs	r4, r4, r0
 80008e4:	469b      	mov	fp, r3
 80008e6:	e778      	b.n	80007da <__aeabi_ddiv+0x36a>
 80008e8:	0003      	movs	r3, r0
 80008ea:	465a      	mov	r2, fp
 80008ec:	3b28      	subs	r3, #40	; 0x28
 80008ee:	409a      	lsls	r2, r3
 80008f0:	2700      	movs	r7, #0
 80008f2:	4691      	mov	r9, r2
 80008f4:	e688      	b.n	8000608 <__aeabi_ddiv+0x198>
 80008f6:	4658      	mov	r0, fp
 80008f8:	f001 f820 	bl	800193c <__clzsi2>
 80008fc:	3020      	adds	r0, #32
 80008fe:	e672      	b.n	80005e6 <__aeabi_ddiv+0x176>
 8000900:	0003      	movs	r3, r0
 8000902:	4652      	mov	r2, sl
 8000904:	3b28      	subs	r3, #40	; 0x28
 8000906:	409a      	lsls	r2, r3
 8000908:	4693      	mov	fp, r2
 800090a:	2200      	movs	r2, #0
 800090c:	e6b4      	b.n	8000678 <__aeabi_ddiv+0x208>
 800090e:	4650      	mov	r0, sl
 8000910:	f001 f814 	bl	800193c <__clzsi2>
 8000914:	3020      	adds	r0, #32
 8000916:	e69a      	b.n	800064e <__aeabi_ddiv+0x1de>
 8000918:	42a6      	cmp	r6, r4
 800091a:	d1e2      	bne.n	80008e2 <__aeabi_ddiv+0x472>
 800091c:	45b8      	cmp	r8, r7
 800091e:	d9dc      	bls.n	80008da <__aeabi_ddiv+0x46a>
 8000920:	1a34      	subs	r4, r6, r0
 8000922:	469b      	mov	fp, r3
 8000924:	e759      	b.n	80007da <__aeabi_ddiv+0x36a>
 8000926:	2b1f      	cmp	r3, #31
 8000928:	dc65      	bgt.n	80009f6 <__aeabi_ddiv+0x586>
 800092a:	4c50      	ldr	r4, [pc, #320]	; (8000a6c <__aeabi_ddiv+0x5fc>)
 800092c:	9900      	ldr	r1, [sp, #0]
 800092e:	46a4      	mov	ip, r4
 8000930:	465c      	mov	r4, fp
 8000932:	4461      	add	r1, ip
 8000934:	0008      	movs	r0, r1
 8000936:	408c      	lsls	r4, r1
 8000938:	0011      	movs	r1, r2
 800093a:	4082      	lsls	r2, r0
 800093c:	40d9      	lsrs	r1, r3
 800093e:	1e50      	subs	r0, r2, #1
 8000940:	4182      	sbcs	r2, r0
 8000942:	430c      	orrs	r4, r1
 8000944:	4314      	orrs	r4, r2
 8000946:	465a      	mov	r2, fp
 8000948:	40da      	lsrs	r2, r3
 800094a:	0013      	movs	r3, r2
 800094c:	0762      	lsls	r2, r4, #29
 800094e:	d009      	beq.n	8000964 <__aeabi_ddiv+0x4f4>
 8000950:	220f      	movs	r2, #15
 8000952:	4022      	ands	r2, r4
 8000954:	2a04      	cmp	r2, #4
 8000956:	d005      	beq.n	8000964 <__aeabi_ddiv+0x4f4>
 8000958:	0022      	movs	r2, r4
 800095a:	1d14      	adds	r4, r2, #4
 800095c:	4294      	cmp	r4, r2
 800095e:	4189      	sbcs	r1, r1
 8000960:	4249      	negs	r1, r1
 8000962:	185b      	adds	r3, r3, r1
 8000964:	021a      	lsls	r2, r3, #8
 8000966:	d562      	bpl.n	8000a2e <__aeabi_ddiv+0x5be>
 8000968:	2201      	movs	r2, #1
 800096a:	2300      	movs	r3, #0
 800096c:	2700      	movs	r7, #0
 800096e:	e60d      	b.n	800058c <__aeabi_ddiv+0x11c>
 8000970:	428a      	cmp	r2, r1
 8000972:	d800      	bhi.n	8000976 <__aeabi_ddiv+0x506>
 8000974:	e70a      	b.n	800078c <__aeabi_ddiv+0x31c>
 8000976:	1e83      	subs	r3, r0, #2
 8000978:	1989      	adds	r1, r1, r6
 800097a:	e707      	b.n	800078c <__aeabi_ddiv+0x31c>
 800097c:	230f      	movs	r3, #15
 800097e:	4013      	ands	r3, r2
 8000980:	2b04      	cmp	r3, #4
 8000982:	d100      	bne.n	8000986 <__aeabi_ddiv+0x516>
 8000984:	e5e6      	b.n	8000554 <__aeabi_ddiv+0xe4>
 8000986:	1d17      	adds	r7, r2, #4
 8000988:	4297      	cmp	r7, r2
 800098a:	4192      	sbcs	r2, r2
 800098c:	4253      	negs	r3, r2
 800098e:	449b      	add	fp, r3
 8000990:	08fa      	lsrs	r2, r7, #3
 8000992:	e5e0      	b.n	8000556 <__aeabi_ddiv+0xe6>
 8000994:	2800      	cmp	r0, #0
 8000996:	d100      	bne.n	800099a <__aeabi_ddiv+0x52a>
 8000998:	e5d7      	b.n	800054a <__aeabi_ddiv+0xda>
 800099a:	1871      	adds	r1, r6, r1
 800099c:	1e53      	subs	r3, r2, #1
 800099e:	42b1      	cmp	r1, r6
 80009a0:	d327      	bcc.n	80009f2 <__aeabi_ddiv+0x582>
 80009a2:	42a9      	cmp	r1, r5
 80009a4:	d315      	bcc.n	80009d2 <__aeabi_ddiv+0x562>
 80009a6:	d058      	beq.n	8000a5a <__aeabi_ddiv+0x5ea>
 80009a8:	001a      	movs	r2, r3
 80009aa:	e773      	b.n	8000894 <__aeabi_ddiv+0x424>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_ddiv+0x542>
 80009b0:	e604      	b.n	80005bc <__aeabi_ddiv+0x14c>
 80009b2:	2301      	movs	r3, #1
 80009b4:	2200      	movs	r2, #0
 80009b6:	449b      	add	fp, r3
 80009b8:	e5cd      	b.n	8000556 <__aeabi_ddiv+0xe6>
 80009ba:	2302      	movs	r3, #2
 80009bc:	4447      	add	r7, r8
 80009be:	4547      	cmp	r7, r8
 80009c0:	4189      	sbcs	r1, r1
 80009c2:	425b      	negs	r3, r3
 80009c4:	469c      	mov	ip, r3
 80009c6:	4249      	negs	r1, r1
 80009c8:	1989      	adds	r1, r1, r6
 80009ca:	190c      	adds	r4, r1, r4
 80009cc:	44e3      	add	fp, ip
 80009ce:	1a24      	subs	r4, r4, r0
 80009d0:	e703      	b.n	80007da <__aeabi_ddiv+0x36a>
 80009d2:	4643      	mov	r3, r8
 80009d4:	005f      	lsls	r7, r3, #1
 80009d6:	4547      	cmp	r7, r8
 80009d8:	419b      	sbcs	r3, r3
 80009da:	46b8      	mov	r8, r7
 80009dc:	425b      	negs	r3, r3
 80009de:	199e      	adds	r6, r3, r6
 80009e0:	3a02      	subs	r2, #2
 80009e2:	1989      	adds	r1, r1, r6
 80009e4:	42a9      	cmp	r1, r5
 80009e6:	d000      	beq.n	80009ea <__aeabi_ddiv+0x57a>
 80009e8:	e754      	b.n	8000894 <__aeabi_ddiv+0x424>
 80009ea:	4540      	cmp	r0, r8
 80009ec:	d000      	beq.n	80009f0 <__aeabi_ddiv+0x580>
 80009ee:	e751      	b.n	8000894 <__aeabi_ddiv+0x424>
 80009f0:	e5ab      	b.n	800054a <__aeabi_ddiv+0xda>
 80009f2:	001a      	movs	r2, r3
 80009f4:	e7f6      	b.n	80009e4 <__aeabi_ddiv+0x574>
 80009f6:	211f      	movs	r1, #31
 80009f8:	465f      	mov	r7, fp
 80009fa:	4249      	negs	r1, r1
 80009fc:	1b0c      	subs	r4, r1, r4
 80009fe:	40e7      	lsrs	r7, r4
 8000a00:	2b20      	cmp	r3, #32
 8000a02:	d007      	beq.n	8000a14 <__aeabi_ddiv+0x5a4>
 8000a04:	491a      	ldr	r1, [pc, #104]	; (8000a70 <__aeabi_ddiv+0x600>)
 8000a06:	9b00      	ldr	r3, [sp, #0]
 8000a08:	468c      	mov	ip, r1
 8000a0a:	4463      	add	r3, ip
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	465b      	mov	r3, fp
 8000a10:	4083      	lsls	r3, r0
 8000a12:	431a      	orrs	r2, r3
 8000a14:	1e50      	subs	r0, r2, #1
 8000a16:	4182      	sbcs	r2, r0
 8000a18:	433a      	orrs	r2, r7
 8000a1a:	2707      	movs	r7, #7
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	4017      	ands	r7, r2
 8000a20:	d009      	beq.n	8000a36 <__aeabi_ddiv+0x5c6>
 8000a22:	210f      	movs	r1, #15
 8000a24:	2300      	movs	r3, #0
 8000a26:	4011      	ands	r1, r2
 8000a28:	0014      	movs	r4, r2
 8000a2a:	2904      	cmp	r1, #4
 8000a2c:	d195      	bne.n	800095a <__aeabi_ddiv+0x4ea>
 8000a2e:	0022      	movs	r2, r4
 8000a30:	075f      	lsls	r7, r3, #29
 8000a32:	025b      	lsls	r3, r3, #9
 8000a34:	0b1b      	lsrs	r3, r3, #12
 8000a36:	08d2      	lsrs	r2, r2, #3
 8000a38:	4317      	orrs	r7, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	e5a6      	b.n	800058c <__aeabi_ddiv+0x11c>
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	4659      	mov	r1, fp
 8000a42:	031b      	lsls	r3, r3, #12
 8000a44:	430b      	orrs	r3, r1
 8000a46:	031b      	lsls	r3, r3, #12
 8000a48:	0017      	movs	r7, r2
 8000a4a:	0b1b      	lsrs	r3, r3, #12
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <__aeabi_ddiv+0x5f8>)
 8000a4e:	e59d      	b.n	800058c <__aeabi_ddiv+0x11c>
 8000a50:	42bd      	cmp	r5, r7
 8000a52:	d8b2      	bhi.n	80009ba <__aeabi_ddiv+0x54a>
 8000a54:	469b      	mov	fp, r3
 8000a56:	2400      	movs	r4, #0
 8000a58:	e6bf      	b.n	80007da <__aeabi_ddiv+0x36a>
 8000a5a:	4580      	cmp	r8, r0
 8000a5c:	d3b9      	bcc.n	80009d2 <__aeabi_ddiv+0x562>
 8000a5e:	001a      	movs	r2, r3
 8000a60:	e7c3      	b.n	80009ea <__aeabi_ddiv+0x57a>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	000003ff 	.word	0x000003ff
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	0000041e 	.word	0x0000041e
 8000a70:	0000043e 	.word	0x0000043e

08000a74 <__eqdf2>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	464f      	mov	r7, r9
 8000a78:	4646      	mov	r6, r8
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	b5c0      	push	{r6, r7, lr}
 8000a80:	4680      	mov	r8, r0
 8000a82:	4e19      	ldr	r6, [pc, #100]	; (8000ae8 <__eqdf2+0x74>)
 8000a84:	0318      	lsls	r0, r3, #12
 8000a86:	030f      	lsls	r7, r1, #12
 8000a88:	004d      	lsls	r5, r1, #1
 8000a8a:	0b00      	lsrs	r0, r0, #12
 8000a8c:	005c      	lsls	r4, r3, #1
 8000a8e:	4682      	mov	sl, r0
 8000a90:	0b3f      	lsrs	r7, r7, #12
 8000a92:	0d6d      	lsrs	r5, r5, #21
 8000a94:	0fc9      	lsrs	r1, r1, #31
 8000a96:	4691      	mov	r9, r2
 8000a98:	0d64      	lsrs	r4, r4, #21
 8000a9a:	0fdb      	lsrs	r3, r3, #31
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	42b5      	cmp	r5, r6
 8000aa0:	d00a      	beq.n	8000ab8 <__eqdf2+0x44>
 8000aa2:	42b4      	cmp	r4, r6
 8000aa4:	d003      	beq.n	8000aae <__eqdf2+0x3a>
 8000aa6:	42a5      	cmp	r5, r4
 8000aa8:	d101      	bne.n	8000aae <__eqdf2+0x3a>
 8000aaa:	4557      	cmp	r7, sl
 8000aac:	d00c      	beq.n	8000ac8 <__eqdf2+0x54>
 8000aae:	bc1c      	pop	{r2, r3, r4}
 8000ab0:	4690      	mov	r8, r2
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	46a2      	mov	sl, r4
 8000ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab8:	4666      	mov	r6, ip
 8000aba:	433e      	orrs	r6, r7
 8000abc:	d1f7      	bne.n	8000aae <__eqdf2+0x3a>
 8000abe:	42ac      	cmp	r4, r5
 8000ac0:	d1f5      	bne.n	8000aae <__eqdf2+0x3a>
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	4314      	orrs	r4, r2
 8000ac6:	d1f2      	bne.n	8000aae <__eqdf2+0x3a>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d1ef      	bne.n	8000aae <__eqdf2+0x3a>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d007      	beq.n	8000ae2 <__eqdf2+0x6e>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d1eb      	bne.n	8000aae <__eqdf2+0x3a>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	0038      	movs	r0, r7
 8000adc:	1e47      	subs	r7, r0, #1
 8000ade:	41b8      	sbcs	r0, r7
 8000ae0:	e7e5      	b.n	8000aae <__eqdf2+0x3a>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7e3      	b.n	8000aae <__eqdf2+0x3a>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	000007ff 	.word	0x000007ff

08000aec <__gedf2>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	464f      	mov	r7, r9
 8000af0:	4646      	mov	r6, r8
 8000af2:	46d6      	mov	lr, sl
 8000af4:	004d      	lsls	r5, r1, #1
 8000af6:	b5c0      	push	{r6, r7, lr}
 8000af8:	030e      	lsls	r6, r1, #12
 8000afa:	0fc9      	lsrs	r1, r1, #31
 8000afc:	468a      	mov	sl, r1
 8000afe:	492c      	ldr	r1, [pc, #176]	; (8000bb0 <__gedf2+0xc4>)
 8000b00:	031f      	lsls	r7, r3, #12
 8000b02:	005c      	lsls	r4, r3, #1
 8000b04:	4680      	mov	r8, r0
 8000b06:	0b36      	lsrs	r6, r6, #12
 8000b08:	0d6d      	lsrs	r5, r5, #21
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	0b3f      	lsrs	r7, r7, #12
 8000b0e:	0d64      	lsrs	r4, r4, #21
 8000b10:	0fdb      	lsrs	r3, r3, #31
 8000b12:	428d      	cmp	r5, r1
 8000b14:	d01e      	beq.n	8000b54 <__gedf2+0x68>
 8000b16:	428c      	cmp	r4, r1
 8000b18:	d016      	beq.n	8000b48 <__gedf2+0x5c>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d11e      	bne.n	8000b5c <__gedf2+0x70>
 8000b1e:	4330      	orrs	r0, r6
 8000b20:	4684      	mov	ip, r0
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d101      	bne.n	8000b2a <__gedf2+0x3e>
 8000b26:	433a      	orrs	r2, r7
 8000b28:	d023      	beq.n	8000b72 <__gedf2+0x86>
 8000b2a:	4662      	mov	r2, ip
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d01a      	beq.n	8000b66 <__gedf2+0x7a>
 8000b30:	459a      	cmp	sl, r3
 8000b32:	d029      	beq.n	8000b88 <__gedf2+0x9c>
 8000b34:	4651      	mov	r1, sl
 8000b36:	2002      	movs	r0, #2
 8000b38:	3901      	subs	r1, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bc1c      	pop	{r2, r3, r4}
 8000b40:	4690      	mov	r8, r2
 8000b42:	4699      	mov	r9, r3
 8000b44:	46a2      	mov	sl, r4
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	0039      	movs	r1, r7
 8000b4a:	4311      	orrs	r1, r2
 8000b4c:	d0e5      	beq.n	8000b1a <__gedf2+0x2e>
 8000b4e:	2002      	movs	r0, #2
 8000b50:	4240      	negs	r0, r0
 8000b52:	e7f4      	b.n	8000b3e <__gedf2+0x52>
 8000b54:	4330      	orrs	r0, r6
 8000b56:	d1fa      	bne.n	8000b4e <__gedf2+0x62>
 8000b58:	42ac      	cmp	r4, r5
 8000b5a:	d00f      	beq.n	8000b7c <__gedf2+0x90>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d10f      	bne.n	8000b80 <__gedf2+0x94>
 8000b60:	433a      	orrs	r2, r7
 8000b62:	d0e7      	beq.n	8000b34 <__gedf2+0x48>
 8000b64:	e00c      	b.n	8000b80 <__gedf2+0x94>
 8000b66:	2201      	movs	r2, #1
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4393      	bics	r3, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	3001      	adds	r0, #1
 8000b70:	e7e5      	b.n	8000b3e <__gedf2+0x52>
 8000b72:	4663      	mov	r3, ip
 8000b74:	2000      	movs	r0, #0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0e1      	beq.n	8000b3e <__gedf2+0x52>
 8000b7a:	e7db      	b.n	8000b34 <__gedf2+0x48>
 8000b7c:	433a      	orrs	r2, r7
 8000b7e:	d1e6      	bne.n	8000b4e <__gedf2+0x62>
 8000b80:	459a      	cmp	sl, r3
 8000b82:	d1d7      	bne.n	8000b34 <__gedf2+0x48>
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	dcd5      	bgt.n	8000b34 <__gedf2+0x48>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	db05      	blt.n	8000b98 <__gedf2+0xac>
 8000b8c:	42be      	cmp	r6, r7
 8000b8e:	d8d1      	bhi.n	8000b34 <__gedf2+0x48>
 8000b90:	d008      	beq.n	8000ba4 <__gedf2+0xb8>
 8000b92:	2000      	movs	r0, #0
 8000b94:	42be      	cmp	r6, r7
 8000b96:	d2d2      	bcs.n	8000b3e <__gedf2+0x52>
 8000b98:	4650      	mov	r0, sl
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	3801      	subs	r0, #1
 8000b9e:	4398      	bics	r0, r3
 8000ba0:	3001      	adds	r0, #1
 8000ba2:	e7cc      	b.n	8000b3e <__gedf2+0x52>
 8000ba4:	45c8      	cmp	r8, r9
 8000ba6:	d8c5      	bhi.n	8000b34 <__gedf2+0x48>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	45c8      	cmp	r8, r9
 8000bac:	d3f4      	bcc.n	8000b98 <__gedf2+0xac>
 8000bae:	e7c6      	b.n	8000b3e <__gedf2+0x52>
 8000bb0:	000007ff 	.word	0x000007ff

08000bb4 <__ledf2>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	4646      	mov	r6, r8
 8000bba:	46d6      	mov	lr, sl
 8000bbc:	004d      	lsls	r5, r1, #1
 8000bbe:	b5c0      	push	{r6, r7, lr}
 8000bc0:	030e      	lsls	r6, r1, #12
 8000bc2:	0fc9      	lsrs	r1, r1, #31
 8000bc4:	468a      	mov	sl, r1
 8000bc6:	492e      	ldr	r1, [pc, #184]	; (8000c80 <__ledf2+0xcc>)
 8000bc8:	031f      	lsls	r7, r3, #12
 8000bca:	005c      	lsls	r4, r3, #1
 8000bcc:	4680      	mov	r8, r0
 8000bce:	0b36      	lsrs	r6, r6, #12
 8000bd0:	0d6d      	lsrs	r5, r5, #21
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	0b3f      	lsrs	r7, r7, #12
 8000bd6:	0d64      	lsrs	r4, r4, #21
 8000bd8:	0fdb      	lsrs	r3, r3, #31
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	d018      	beq.n	8000c10 <__ledf2+0x5c>
 8000bde:	428c      	cmp	r4, r1
 8000be0:	d011      	beq.n	8000c06 <__ledf2+0x52>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d118      	bne.n	8000c18 <__ledf2+0x64>
 8000be6:	4330      	orrs	r0, r6
 8000be8:	4684      	mov	ip, r0
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d11e      	bne.n	8000c2c <__ledf2+0x78>
 8000bee:	433a      	orrs	r2, r7
 8000bf0:	d11c      	bne.n	8000c2c <__ledf2+0x78>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d030      	beq.n	8000c5c <__ledf2+0xa8>
 8000bfa:	4651      	mov	r1, sl
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	3901      	subs	r1, #1
 8000c00:	4008      	ands	r0, r1
 8000c02:	3801      	subs	r0, #1
 8000c04:	e02a      	b.n	8000c5c <__ledf2+0xa8>
 8000c06:	0039      	movs	r1, r7
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	d0ea      	beq.n	8000be2 <__ledf2+0x2e>
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	e025      	b.n	8000c5c <__ledf2+0xa8>
 8000c10:	4330      	orrs	r0, r6
 8000c12:	d1fb      	bne.n	8000c0c <__ledf2+0x58>
 8000c14:	42ac      	cmp	r4, r5
 8000c16:	d026      	beq.n	8000c66 <__ledf2+0xb2>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d126      	bne.n	8000c6a <__ledf2+0xb6>
 8000c1c:	433a      	orrs	r2, r7
 8000c1e:	d124      	bne.n	8000c6a <__ledf2+0xb6>
 8000c20:	4651      	mov	r1, sl
 8000c22:	2002      	movs	r0, #2
 8000c24:	3901      	subs	r1, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e017      	b.n	8000c5c <__ledf2+0xa8>
 8000c2c:	4662      	mov	r2, ip
 8000c2e:	2a00      	cmp	r2, #0
 8000c30:	d00f      	beq.n	8000c52 <__ledf2+0x9e>
 8000c32:	459a      	cmp	sl, r3
 8000c34:	d1e1      	bne.n	8000bfa <__ledf2+0x46>
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	db05      	blt.n	8000c46 <__ledf2+0x92>
 8000c3a:	42be      	cmp	r6, r7
 8000c3c:	d8dd      	bhi.n	8000bfa <__ledf2+0x46>
 8000c3e:	d019      	beq.n	8000c74 <__ledf2+0xc0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	42be      	cmp	r6, r7
 8000c44:	d20a      	bcs.n	8000c5c <__ledf2+0xa8>
 8000c46:	4650      	mov	r0, sl
 8000c48:	2301      	movs	r3, #1
 8000c4a:	3801      	subs	r0, #1
 8000c4c:	4398      	bics	r0, r3
 8000c4e:	3001      	adds	r0, #1
 8000c50:	e004      	b.n	8000c5c <__ledf2+0xa8>
 8000c52:	2201      	movs	r2, #1
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4393      	bics	r3, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	3001      	adds	r0, #1
 8000c5c:	bc1c      	pop	{r2, r3, r4}
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4699      	mov	r9, r3
 8000c62:	46a2      	mov	sl, r4
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	433a      	orrs	r2, r7
 8000c68:	d1d0      	bne.n	8000c0c <__ledf2+0x58>
 8000c6a:	459a      	cmp	sl, r3
 8000c6c:	d1c5      	bne.n	8000bfa <__ledf2+0x46>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	dcc3      	bgt.n	8000bfa <__ledf2+0x46>
 8000c72:	e7e0      	b.n	8000c36 <__ledf2+0x82>
 8000c74:	45c8      	cmp	r8, r9
 8000c76:	d8c0      	bhi.n	8000bfa <__ledf2+0x46>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d3e3      	bcc.n	8000c46 <__ledf2+0x92>
 8000c7e:	e7ed      	b.n	8000c5c <__ledf2+0xa8>
 8000c80:	000007ff 	.word	0x000007ff

08000c84 <__aeabi_dmul>:
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c86:	4657      	mov	r7, sl
 8000c88:	46de      	mov	lr, fp
 8000c8a:	464e      	mov	r6, r9
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	b5e0      	push	{r5, r6, r7, lr}
 8000c90:	4683      	mov	fp, r0
 8000c92:	0006      	movs	r6, r0
 8000c94:	030f      	lsls	r7, r1, #12
 8000c96:	0048      	lsls	r0, r1, #1
 8000c98:	b087      	sub	sp, #28
 8000c9a:	4692      	mov	sl, r2
 8000c9c:	001d      	movs	r5, r3
 8000c9e:	0b3f      	lsrs	r7, r7, #12
 8000ca0:	0d40      	lsrs	r0, r0, #21
 8000ca2:	0fcc      	lsrs	r4, r1, #31
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dmul+0x26>
 8000ca8:	e06f      	b.n	8000d8a <__aeabi_dmul+0x106>
 8000caa:	4bde      	ldr	r3, [pc, #888]	; (8001024 <__aeabi_dmul+0x3a0>)
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d038      	beq.n	8000d22 <__aeabi_dmul+0x9e>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	00ff      	lsls	r7, r7, #3
 8000cb4:	041b      	lsls	r3, r3, #16
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0f73      	lsrs	r3, r6, #29
 8000cba:	433b      	orrs	r3, r7
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	4bda      	ldr	r3, [pc, #872]	; (8001028 <__aeabi_dmul+0x3a4>)
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	469b      	mov	fp, r3
 8000cc8:	00f6      	lsls	r6, r6, #3
 8000cca:	4481      	add	r9, r0
 8000ccc:	032b      	lsls	r3, r5, #12
 8000cce:	0069      	lsls	r1, r5, #1
 8000cd0:	0b1b      	lsrs	r3, r3, #12
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	0d49      	lsrs	r1, r1, #21
 8000cd8:	0fed      	lsrs	r5, r5, #31
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dmul+0x5c>
 8000cde:	e085      	b.n	8000dec <__aeabi_dmul+0x168>
 8000ce0:	4bd0      	ldr	r3, [pc, #832]	; (8001024 <__aeabi_dmul+0x3a0>)
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dmul+0x64>
 8000ce6:	e073      	b.n	8000dd0 <__aeabi_dmul+0x14c>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	00da      	lsls	r2, r3, #3
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	041b      	lsls	r3, r3, #16
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	4652      	mov	r2, sl
 8000cf4:	48cc      	ldr	r0, [pc, #816]	; (8001028 <__aeabi_dmul+0x3a4>)
 8000cf6:	0f52      	lsrs	r2, r2, #29
 8000cf8:	4684      	mov	ip, r0
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	2000      	movs	r0, #0
 8000d00:	4461      	add	r1, ip
 8000d02:	00d2      	lsls	r2, r2, #3
 8000d04:	4489      	add	r9, r1
 8000d06:	0021      	movs	r1, r4
 8000d08:	4069      	eors	r1, r5
 8000d0a:	9100      	str	r1, [sp, #0]
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4449      	add	r1, r9
 8000d12:	468a      	mov	sl, r1
 8000d14:	2f0f      	cmp	r7, #15
 8000d16:	d900      	bls.n	8000d1a <__aeabi_dmul+0x96>
 8000d18:	e090      	b.n	8000e3c <__aeabi_dmul+0x1b8>
 8000d1a:	49c4      	ldr	r1, [pc, #784]	; (800102c <__aeabi_dmul+0x3a8>)
 8000d1c:	00bf      	lsls	r7, r7, #2
 8000d1e:	59cf      	ldr	r7, [r1, r7]
 8000d20:	46bf      	mov	pc, r7
 8000d22:	465b      	mov	r3, fp
 8000d24:	433b      	orrs	r3, r7
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dmul+0xa8>
 8000d2a:	e16a      	b.n	8001002 <__aeabi_dmul+0x37e>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	2708      	movs	r7, #8
 8000d30:	2600      	movs	r6, #0
 8000d32:	4681      	mov	r9, r0
 8000d34:	469b      	mov	fp, r3
 8000d36:	e7c9      	b.n	8000ccc <__aeabi_dmul+0x48>
 8000d38:	0032      	movs	r2, r6
 8000d3a:	4658      	mov	r0, fp
 8000d3c:	9b01      	ldr	r3, [sp, #4]
 8000d3e:	4661      	mov	r1, ip
 8000d40:	9100      	str	r1, [sp, #0]
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dmul+0xc4>
 8000d46:	e075      	b.n	8000e34 <__aeabi_dmul+0x1b0>
 8000d48:	2803      	cmp	r0, #3
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dmul+0xca>
 8000d4c:	e1fe      	b.n	800114c <__aeabi_dmul+0x4c8>
 8000d4e:	2801      	cmp	r0, #1
 8000d50:	d000      	beq.n	8000d54 <__aeabi_dmul+0xd0>
 8000d52:	e12c      	b.n	8000fae <__aeabi_dmul+0x32a>
 8000d54:	2300      	movs	r3, #0
 8000d56:	2700      	movs	r7, #0
 8000d58:	2600      	movs	r6, #0
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	033f      	lsls	r7, r7, #12
 8000d5e:	0d2a      	lsrs	r2, r5, #20
 8000d60:	0b3f      	lsrs	r7, r7, #12
 8000d62:	48b3      	ldr	r0, [pc, #716]	; (8001030 <__aeabi_dmul+0x3ac>)
 8000d64:	0512      	lsls	r2, r2, #20
 8000d66:	433a      	orrs	r2, r7
 8000d68:	4002      	ands	r2, r0
 8000d6a:	051b      	lsls	r3, r3, #20
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	9a00      	ldr	r2, [sp, #0]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	07d1      	lsls	r1, r2, #31
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	430b      	orrs	r3, r1
 8000d78:	0030      	movs	r0, r6
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	b007      	add	sp, #28
 8000d7e:	bc3c      	pop	{r2, r3, r4, r5}
 8000d80:	4690      	mov	r8, r2
 8000d82:	4699      	mov	r9, r3
 8000d84:	46a2      	mov	sl, r4
 8000d86:	46ab      	mov	fp, r5
 8000d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8a:	465b      	mov	r3, fp
 8000d8c:	433b      	orrs	r3, r7
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dmul+0x110>
 8000d92:	e12f      	b.n	8000ff4 <__aeabi_dmul+0x370>
 8000d94:	2f00      	cmp	r7, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dmul+0x116>
 8000d98:	e1a5      	b.n	80010e6 <__aeabi_dmul+0x462>
 8000d9a:	0038      	movs	r0, r7
 8000d9c:	f000 fdce 	bl	800193c <__clzsi2>
 8000da0:	0003      	movs	r3, r0
 8000da2:	3b0b      	subs	r3, #11
 8000da4:	2b1c      	cmp	r3, #28
 8000da6:	dd00      	ble.n	8000daa <__aeabi_dmul+0x126>
 8000da8:	e196      	b.n	80010d8 <__aeabi_dmul+0x454>
 8000daa:	221d      	movs	r2, #29
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	465a      	mov	r2, fp
 8000db0:	0001      	movs	r1, r0
 8000db2:	40da      	lsrs	r2, r3
 8000db4:	465e      	mov	r6, fp
 8000db6:	3908      	subs	r1, #8
 8000db8:	408f      	lsls	r7, r1
 8000dba:	0013      	movs	r3, r2
 8000dbc:	408e      	lsls	r6, r1
 8000dbe:	433b      	orrs	r3, r7
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	4b9c      	ldr	r3, [pc, #624]	; (8001034 <__aeabi_dmul+0x3b0>)
 8000dc4:	2700      	movs	r7, #0
 8000dc6:	1a1b      	subs	r3, r3, r0
 8000dc8:	4699      	mov	r9, r3
 8000dca:	2300      	movs	r3, #0
 8000dcc:	469b      	mov	fp, r3
 8000dce:	e77d      	b.n	8000ccc <__aeabi_dmul+0x48>
 8000dd0:	4641      	mov	r1, r8
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	4993      	ldr	r1, [pc, #588]	; (8001024 <__aeabi_dmul+0x3a0>)
 8000dd8:	468c      	mov	ip, r1
 8000dda:	44e1      	add	r9, ip
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d000      	beq.n	8000de2 <__aeabi_dmul+0x15e>
 8000de0:	e11a      	b.n	8001018 <__aeabi_dmul+0x394>
 8000de2:	2202      	movs	r2, #2
 8000de4:	2002      	movs	r0, #2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	2200      	movs	r2, #0
 8000dea:	e78c      	b.n	8000d06 <__aeabi_dmul+0x82>
 8000dec:	4313      	orrs	r3, r2
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dmul+0x16e>
 8000df0:	e10d      	b.n	800100e <__aeabi_dmul+0x38a>
 8000df2:	4643      	mov	r3, r8
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_dmul+0x176>
 8000df8:	e181      	b.n	80010fe <__aeabi_dmul+0x47a>
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	f000 fd9e 	bl	800193c <__clzsi2>
 8000e00:	0002      	movs	r2, r0
 8000e02:	3a0b      	subs	r2, #11
 8000e04:	2a1c      	cmp	r2, #28
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dmul+0x186>
 8000e08:	e172      	b.n	80010f0 <__aeabi_dmul+0x46c>
 8000e0a:	0001      	movs	r1, r0
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	3908      	subs	r1, #8
 8000e10:	408b      	lsls	r3, r1
 8000e12:	4698      	mov	r8, r3
 8000e14:	231d      	movs	r3, #29
 8000e16:	1a9a      	subs	r2, r3, r2
 8000e18:	4653      	mov	r3, sl
 8000e1a:	40d3      	lsrs	r3, r2
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4643      	mov	r3, r8
 8000e20:	4313      	orrs	r3, r2
 8000e22:	4652      	mov	r2, sl
 8000e24:	408a      	lsls	r2, r1
 8000e26:	4649      	mov	r1, r9
 8000e28:	1a08      	subs	r0, r1, r0
 8000e2a:	4982      	ldr	r1, [pc, #520]	; (8001034 <__aeabi_dmul+0x3b0>)
 8000e2c:	4689      	mov	r9, r1
 8000e2e:	4481      	add	r9, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e768      	b.n	8000d06 <__aeabi_dmul+0x82>
 8000e34:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <__aeabi_dmul+0x3a0>)
 8000e36:	2700      	movs	r7, #0
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e78e      	b.n	8000d5a <__aeabi_dmul+0xd6>
 8000e3c:	0c14      	lsrs	r4, r2, #16
 8000e3e:	0412      	lsls	r2, r2, #16
 8000e40:	0c12      	lsrs	r2, r2, #16
 8000e42:	0011      	movs	r1, r2
 8000e44:	0c37      	lsrs	r7, r6, #16
 8000e46:	0436      	lsls	r6, r6, #16
 8000e48:	0c35      	lsrs	r5, r6, #16
 8000e4a:	4379      	muls	r1, r7
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	468c      	mov	ip, r1
 8000e50:	002e      	movs	r6, r5
 8000e52:	4360      	muls	r0, r4
 8000e54:	4460      	add	r0, ip
 8000e56:	4683      	mov	fp, r0
 8000e58:	4356      	muls	r6, r2
 8000e5a:	0021      	movs	r1, r4
 8000e5c:	0c30      	lsrs	r0, r6, #16
 8000e5e:	4680      	mov	r8, r0
 8000e60:	4658      	mov	r0, fp
 8000e62:	4379      	muls	r1, r7
 8000e64:	4440      	add	r0, r8
 8000e66:	9102      	str	r1, [sp, #8]
 8000e68:	4584      	cmp	ip, r0
 8000e6a:	d906      	bls.n	8000e7a <__aeabi_dmul+0x1f6>
 8000e6c:	4688      	mov	r8, r1
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	468c      	mov	ip, r1
 8000e74:	44e0      	add	r8, ip
 8000e76:	4641      	mov	r1, r8
 8000e78:	9102      	str	r1, [sp, #8]
 8000e7a:	0436      	lsls	r6, r6, #16
 8000e7c:	0c01      	lsrs	r1, r0, #16
 8000e7e:	0c36      	lsrs	r6, r6, #16
 8000e80:	0400      	lsls	r0, r0, #16
 8000e82:	468b      	mov	fp, r1
 8000e84:	1981      	adds	r1, r0, r6
 8000e86:	0c1e      	lsrs	r6, r3, #16
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	0c1b      	lsrs	r3, r3, #16
 8000e8c:	9103      	str	r1, [sp, #12]
 8000e8e:	0019      	movs	r1, r3
 8000e90:	4379      	muls	r1, r7
 8000e92:	468c      	mov	ip, r1
 8000e94:	0028      	movs	r0, r5
 8000e96:	4375      	muls	r5, r6
 8000e98:	4465      	add	r5, ip
 8000e9a:	46a8      	mov	r8, r5
 8000e9c:	4358      	muls	r0, r3
 8000e9e:	0c05      	lsrs	r5, r0, #16
 8000ea0:	4445      	add	r5, r8
 8000ea2:	4377      	muls	r7, r6
 8000ea4:	42a9      	cmp	r1, r5
 8000ea6:	d903      	bls.n	8000eb0 <__aeabi_dmul+0x22c>
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0249      	lsls	r1, r1, #9
 8000eac:	468c      	mov	ip, r1
 8000eae:	4467      	add	r7, ip
 8000eb0:	0c29      	lsrs	r1, r5, #16
 8000eb2:	468c      	mov	ip, r1
 8000eb4:	0039      	movs	r1, r7
 8000eb6:	0400      	lsls	r0, r0, #16
 8000eb8:	0c00      	lsrs	r0, r0, #16
 8000eba:	042d      	lsls	r5, r5, #16
 8000ebc:	182d      	adds	r5, r5, r0
 8000ebe:	4461      	add	r1, ip
 8000ec0:	44ab      	add	fp, r5
 8000ec2:	9105      	str	r1, [sp, #20]
 8000ec4:	4659      	mov	r1, fp
 8000ec6:	9104      	str	r1, [sp, #16]
 8000ec8:	9901      	ldr	r1, [sp, #4]
 8000eca:	040f      	lsls	r7, r1, #16
 8000ecc:	0c3f      	lsrs	r7, r7, #16
 8000ece:	0c08      	lsrs	r0, r1, #16
 8000ed0:	0039      	movs	r1, r7
 8000ed2:	4351      	muls	r1, r2
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	0002      	movs	r2, r0
 8000eda:	468c      	mov	ip, r1
 8000edc:	0c09      	lsrs	r1, r1, #16
 8000ede:	468b      	mov	fp, r1
 8000ee0:	4362      	muls	r2, r4
 8000ee2:	437c      	muls	r4, r7
 8000ee4:	4444      	add	r4, r8
 8000ee6:	445c      	add	r4, fp
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	d903      	bls.n	8000ef4 <__aeabi_dmul+0x270>
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0249      	lsls	r1, r1, #9
 8000ef0:	4688      	mov	r8, r1
 8000ef2:	4442      	add	r2, r8
 8000ef4:	0c21      	lsrs	r1, r4, #16
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	4661      	mov	r1, ip
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c09      	lsrs	r1, r1, #16
 8000efe:	468c      	mov	ip, r1
 8000f00:	0039      	movs	r1, r7
 8000f02:	4359      	muls	r1, r3
 8000f04:	4343      	muls	r3, r0
 8000f06:	4370      	muls	r0, r6
 8000f08:	437e      	muls	r6, r7
 8000f0a:	0c0f      	lsrs	r7, r1, #16
 8000f0c:	18f6      	adds	r6, r6, r3
 8000f0e:	0424      	lsls	r4, r4, #16
 8000f10:	19be      	adds	r6, r7, r6
 8000f12:	4464      	add	r4, ip
 8000f14:	4442      	add	r2, r8
 8000f16:	468c      	mov	ip, r1
 8000f18:	42b3      	cmp	r3, r6
 8000f1a:	d903      	bls.n	8000f24 <__aeabi_dmul+0x2a0>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	025b      	lsls	r3, r3, #9
 8000f20:	4698      	mov	r8, r3
 8000f22:	4440      	add	r0, r8
 8000f24:	9b02      	ldr	r3, [sp, #8]
 8000f26:	4661      	mov	r1, ip
 8000f28:	4698      	mov	r8, r3
 8000f2a:	9b04      	ldr	r3, [sp, #16]
 8000f2c:	0437      	lsls	r7, r6, #16
 8000f2e:	4443      	add	r3, r8
 8000f30:	469b      	mov	fp, r3
 8000f32:	45ab      	cmp	fp, r5
 8000f34:	41ad      	sbcs	r5, r5
 8000f36:	426b      	negs	r3, r5
 8000f38:	040d      	lsls	r5, r1, #16
 8000f3a:	9905      	ldr	r1, [sp, #20]
 8000f3c:	0c2d      	lsrs	r5, r5, #16
 8000f3e:	468c      	mov	ip, r1
 8000f40:	197f      	adds	r7, r7, r5
 8000f42:	4467      	add	r7, ip
 8000f44:	18fd      	adds	r5, r7, r3
 8000f46:	46a8      	mov	r8, r5
 8000f48:	465d      	mov	r5, fp
 8000f4a:	192d      	adds	r5, r5, r4
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	41a4      	sbcs	r4, r4
 8000f50:	4693      	mov	fp, r2
 8000f52:	4264      	negs	r4, r4
 8000f54:	46a4      	mov	ip, r4
 8000f56:	44c3      	add	fp, r8
 8000f58:	44dc      	add	ip, fp
 8000f5a:	428f      	cmp	r7, r1
 8000f5c:	41bf      	sbcs	r7, r7
 8000f5e:	4598      	cmp	r8, r3
 8000f60:	419b      	sbcs	r3, r3
 8000f62:	4593      	cmp	fp, r2
 8000f64:	4192      	sbcs	r2, r2
 8000f66:	45a4      	cmp	ip, r4
 8000f68:	41a4      	sbcs	r4, r4
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	427f      	negs	r7, r7
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c36      	lsrs	r6, r6, #16
 8000f72:	4252      	negs	r2, r2
 8000f74:	4264      	negs	r4, r4
 8000f76:	19bf      	adds	r7, r7, r6
 8000f78:	4322      	orrs	r2, r4
 8000f7a:	18bf      	adds	r7, r7, r2
 8000f7c:	4662      	mov	r2, ip
 8000f7e:	1838      	adds	r0, r7, r0
 8000f80:	0243      	lsls	r3, r0, #9
 8000f82:	0dd2      	lsrs	r2, r2, #23
 8000f84:	9903      	ldr	r1, [sp, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	026a      	lsls	r2, r5, #9
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	1e50      	subs	r0, r2, #1
 8000f8e:	4182      	sbcs	r2, r0
 8000f90:	4661      	mov	r1, ip
 8000f92:	0ded      	lsrs	r5, r5, #23
 8000f94:	432a      	orrs	r2, r5
 8000f96:	024e      	lsls	r6, r1, #9
 8000f98:	4332      	orrs	r2, r6
 8000f9a:	01d9      	lsls	r1, r3, #7
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_dmul+0x31c>
 8000f9e:	e0b3      	b.n	8001108 <__aeabi_dmul+0x484>
 8000fa0:	2601      	movs	r6, #1
 8000fa2:	0850      	lsrs	r0, r2, #1
 8000fa4:	4032      	ands	r2, r6
 8000fa6:	4302      	orrs	r2, r0
 8000fa8:	07de      	lsls	r6, r3, #31
 8000faa:	4332      	orrs	r2, r6
 8000fac:	085b      	lsrs	r3, r3, #1
 8000fae:	4c22      	ldr	r4, [pc, #136]	; (8001038 <__aeabi_dmul+0x3b4>)
 8000fb0:	4454      	add	r4, sl
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	dd62      	ble.n	800107c <__aeabi_dmul+0x3f8>
 8000fb6:	0751      	lsls	r1, r2, #29
 8000fb8:	d009      	beq.n	8000fce <__aeabi_dmul+0x34a>
 8000fba:	200f      	movs	r0, #15
 8000fbc:	4010      	ands	r0, r2
 8000fbe:	2804      	cmp	r0, #4
 8000fc0:	d005      	beq.n	8000fce <__aeabi_dmul+0x34a>
 8000fc2:	1d10      	adds	r0, r2, #4
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	4192      	sbcs	r2, r2
 8000fc8:	4252      	negs	r2, r2
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	0002      	movs	r2, r0
 8000fce:	01d9      	lsls	r1, r3, #7
 8000fd0:	d504      	bpl.n	8000fdc <__aeabi_dmul+0x358>
 8000fd2:	2480      	movs	r4, #128	; 0x80
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <__aeabi_dmul+0x3b8>)
 8000fd6:	00e4      	lsls	r4, r4, #3
 8000fd8:	4003      	ands	r3, r0
 8000fda:	4454      	add	r4, sl
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <__aeabi_dmul+0x3bc>)
 8000fde:	4284      	cmp	r4, r0
 8000fe0:	dd00      	ble.n	8000fe4 <__aeabi_dmul+0x360>
 8000fe2:	e727      	b.n	8000e34 <__aeabi_dmul+0x1b0>
 8000fe4:	075e      	lsls	r6, r3, #29
 8000fe6:	025b      	lsls	r3, r3, #9
 8000fe8:	08d2      	lsrs	r2, r2, #3
 8000fea:	0b1f      	lsrs	r7, r3, #12
 8000fec:	0563      	lsls	r3, r4, #21
 8000fee:	4316      	orrs	r6, r2
 8000ff0:	0d5b      	lsrs	r3, r3, #21
 8000ff2:	e6b2      	b.n	8000d5a <__aeabi_dmul+0xd6>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4699      	mov	r9, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	2704      	movs	r7, #4
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	469b      	mov	fp, r3
 8001000:	e664      	b.n	8000ccc <__aeabi_dmul+0x48>
 8001002:	2303      	movs	r3, #3
 8001004:	9701      	str	r7, [sp, #4]
 8001006:	4681      	mov	r9, r0
 8001008:	270c      	movs	r7, #12
 800100a:	469b      	mov	fp, r3
 800100c:	e65e      	b.n	8000ccc <__aeabi_dmul+0x48>
 800100e:	2201      	movs	r2, #1
 8001010:	2001      	movs	r0, #1
 8001012:	4317      	orrs	r7, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e676      	b.n	8000d06 <__aeabi_dmul+0x82>
 8001018:	2303      	movs	r3, #3
 800101a:	2003      	movs	r0, #3
 800101c:	431f      	orrs	r7, r3
 800101e:	4643      	mov	r3, r8
 8001020:	e671      	b.n	8000d06 <__aeabi_dmul+0x82>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	000007ff 	.word	0x000007ff
 8001028:	fffffc01 	.word	0xfffffc01
 800102c:	08005f14 	.word	0x08005f14
 8001030:	800fffff 	.word	0x800fffff
 8001034:	fffffc0d 	.word	0xfffffc0d
 8001038:	000003ff 	.word	0x000003ff
 800103c:	feffffff 	.word	0xfeffffff
 8001040:	000007fe 	.word	0x000007fe
 8001044:	2300      	movs	r3, #0
 8001046:	2780      	movs	r7, #128	; 0x80
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	033f      	lsls	r7, r7, #12
 800104c:	2600      	movs	r6, #0
 800104e:	4b43      	ldr	r3, [pc, #268]	; (800115c <__aeabi_dmul+0x4d8>)
 8001050:	e683      	b.n	8000d5a <__aeabi_dmul+0xd6>
 8001052:	9b01      	ldr	r3, [sp, #4]
 8001054:	0032      	movs	r2, r6
 8001056:	46a4      	mov	ip, r4
 8001058:	4658      	mov	r0, fp
 800105a:	e670      	b.n	8000d3e <__aeabi_dmul+0xba>
 800105c:	46ac      	mov	ip, r5
 800105e:	e66e      	b.n	8000d3e <__aeabi_dmul+0xba>
 8001060:	2780      	movs	r7, #128	; 0x80
 8001062:	9901      	ldr	r1, [sp, #4]
 8001064:	033f      	lsls	r7, r7, #12
 8001066:	4239      	tst	r1, r7
 8001068:	d02d      	beq.n	80010c6 <__aeabi_dmul+0x442>
 800106a:	423b      	tst	r3, r7
 800106c:	d12b      	bne.n	80010c6 <__aeabi_dmul+0x442>
 800106e:	431f      	orrs	r7, r3
 8001070:	033f      	lsls	r7, r7, #12
 8001072:	0b3f      	lsrs	r7, r7, #12
 8001074:	9500      	str	r5, [sp, #0]
 8001076:	0016      	movs	r6, r2
 8001078:	4b38      	ldr	r3, [pc, #224]	; (800115c <__aeabi_dmul+0x4d8>)
 800107a:	e66e      	b.n	8000d5a <__aeabi_dmul+0xd6>
 800107c:	2501      	movs	r5, #1
 800107e:	1b2d      	subs	r5, r5, r4
 8001080:	2d38      	cmp	r5, #56	; 0x38
 8001082:	dd00      	ble.n	8001086 <__aeabi_dmul+0x402>
 8001084:	e666      	b.n	8000d54 <__aeabi_dmul+0xd0>
 8001086:	2d1f      	cmp	r5, #31
 8001088:	dc40      	bgt.n	800110c <__aeabi_dmul+0x488>
 800108a:	4835      	ldr	r0, [pc, #212]	; (8001160 <__aeabi_dmul+0x4dc>)
 800108c:	001c      	movs	r4, r3
 800108e:	4450      	add	r0, sl
 8001090:	0016      	movs	r6, r2
 8001092:	4082      	lsls	r2, r0
 8001094:	4084      	lsls	r4, r0
 8001096:	40ee      	lsrs	r6, r5
 8001098:	1e50      	subs	r0, r2, #1
 800109a:	4182      	sbcs	r2, r0
 800109c:	4334      	orrs	r4, r6
 800109e:	4314      	orrs	r4, r2
 80010a0:	40eb      	lsrs	r3, r5
 80010a2:	0762      	lsls	r2, r4, #29
 80010a4:	d009      	beq.n	80010ba <__aeabi_dmul+0x436>
 80010a6:	220f      	movs	r2, #15
 80010a8:	4022      	ands	r2, r4
 80010aa:	2a04      	cmp	r2, #4
 80010ac:	d005      	beq.n	80010ba <__aeabi_dmul+0x436>
 80010ae:	0022      	movs	r2, r4
 80010b0:	1d14      	adds	r4, r2, #4
 80010b2:	4294      	cmp	r4, r2
 80010b4:	4180      	sbcs	r0, r0
 80010b6:	4240      	negs	r0, r0
 80010b8:	181b      	adds	r3, r3, r0
 80010ba:	021a      	lsls	r2, r3, #8
 80010bc:	d53e      	bpl.n	800113c <__aeabi_dmul+0x4b8>
 80010be:	2301      	movs	r3, #1
 80010c0:	2700      	movs	r7, #0
 80010c2:	2600      	movs	r6, #0
 80010c4:	e649      	b.n	8000d5a <__aeabi_dmul+0xd6>
 80010c6:	2780      	movs	r7, #128	; 0x80
 80010c8:	9b01      	ldr	r3, [sp, #4]
 80010ca:	033f      	lsls	r7, r7, #12
 80010cc:	431f      	orrs	r7, r3
 80010ce:	033f      	lsls	r7, r7, #12
 80010d0:	0b3f      	lsrs	r7, r7, #12
 80010d2:	9400      	str	r4, [sp, #0]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <__aeabi_dmul+0x4d8>)
 80010d6:	e640      	b.n	8000d5a <__aeabi_dmul+0xd6>
 80010d8:	0003      	movs	r3, r0
 80010da:	465a      	mov	r2, fp
 80010dc:	3b28      	subs	r3, #40	; 0x28
 80010de:	409a      	lsls	r2, r3
 80010e0:	2600      	movs	r6, #0
 80010e2:	9201      	str	r2, [sp, #4]
 80010e4:	e66d      	b.n	8000dc2 <__aeabi_dmul+0x13e>
 80010e6:	4658      	mov	r0, fp
 80010e8:	f000 fc28 	bl	800193c <__clzsi2>
 80010ec:	3020      	adds	r0, #32
 80010ee:	e657      	b.n	8000da0 <__aeabi_dmul+0x11c>
 80010f0:	0003      	movs	r3, r0
 80010f2:	4652      	mov	r2, sl
 80010f4:	3b28      	subs	r3, #40	; 0x28
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	2200      	movs	r2, #0
 80010fc:	e693      	b.n	8000e26 <__aeabi_dmul+0x1a2>
 80010fe:	4650      	mov	r0, sl
 8001100:	f000 fc1c 	bl	800193c <__clzsi2>
 8001104:	3020      	adds	r0, #32
 8001106:	e67b      	b.n	8000e00 <__aeabi_dmul+0x17c>
 8001108:	46ca      	mov	sl, r9
 800110a:	e750      	b.n	8000fae <__aeabi_dmul+0x32a>
 800110c:	201f      	movs	r0, #31
 800110e:	001e      	movs	r6, r3
 8001110:	4240      	negs	r0, r0
 8001112:	1b04      	subs	r4, r0, r4
 8001114:	40e6      	lsrs	r6, r4
 8001116:	2d20      	cmp	r5, #32
 8001118:	d003      	beq.n	8001122 <__aeabi_dmul+0x49e>
 800111a:	4c12      	ldr	r4, [pc, #72]	; (8001164 <__aeabi_dmul+0x4e0>)
 800111c:	4454      	add	r4, sl
 800111e:	40a3      	lsls	r3, r4
 8001120:	431a      	orrs	r2, r3
 8001122:	1e50      	subs	r0, r2, #1
 8001124:	4182      	sbcs	r2, r0
 8001126:	4332      	orrs	r2, r6
 8001128:	2607      	movs	r6, #7
 800112a:	2700      	movs	r7, #0
 800112c:	4016      	ands	r6, r2
 800112e:	d009      	beq.n	8001144 <__aeabi_dmul+0x4c0>
 8001130:	200f      	movs	r0, #15
 8001132:	2300      	movs	r3, #0
 8001134:	4010      	ands	r0, r2
 8001136:	0014      	movs	r4, r2
 8001138:	2804      	cmp	r0, #4
 800113a:	d1b9      	bne.n	80010b0 <__aeabi_dmul+0x42c>
 800113c:	0022      	movs	r2, r4
 800113e:	075e      	lsls	r6, r3, #29
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	0b1f      	lsrs	r7, r3, #12
 8001144:	08d2      	lsrs	r2, r2, #3
 8001146:	4316      	orrs	r6, r2
 8001148:	2300      	movs	r3, #0
 800114a:	e606      	b.n	8000d5a <__aeabi_dmul+0xd6>
 800114c:	2780      	movs	r7, #128	; 0x80
 800114e:	033f      	lsls	r7, r7, #12
 8001150:	431f      	orrs	r7, r3
 8001152:	033f      	lsls	r7, r7, #12
 8001154:	0b3f      	lsrs	r7, r7, #12
 8001156:	0016      	movs	r6, r2
 8001158:	4b00      	ldr	r3, [pc, #0]	; (800115c <__aeabi_dmul+0x4d8>)
 800115a:	e5fe      	b.n	8000d5a <__aeabi_dmul+0xd6>
 800115c:	000007ff 	.word	0x000007ff
 8001160:	0000041e 	.word	0x0000041e
 8001164:	0000043e 	.word	0x0000043e

08001168 <__aeabi_dsub>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	4657      	mov	r7, sl
 800116c:	464e      	mov	r6, r9
 800116e:	4645      	mov	r5, r8
 8001170:	46de      	mov	lr, fp
 8001172:	000c      	movs	r4, r1
 8001174:	0309      	lsls	r1, r1, #12
 8001176:	b5e0      	push	{r5, r6, r7, lr}
 8001178:	0a49      	lsrs	r1, r1, #9
 800117a:	0f46      	lsrs	r6, r0, #29
 800117c:	005f      	lsls	r7, r3, #1
 800117e:	4331      	orrs	r1, r6
 8001180:	031e      	lsls	r6, r3, #12
 8001182:	0fdb      	lsrs	r3, r3, #31
 8001184:	0a76      	lsrs	r6, r6, #9
 8001186:	469b      	mov	fp, r3
 8001188:	0f53      	lsrs	r3, r2, #29
 800118a:	4333      	orrs	r3, r6
 800118c:	4ec8      	ldr	r6, [pc, #800]	; (80014b0 <__aeabi_dsub+0x348>)
 800118e:	0065      	lsls	r5, r4, #1
 8001190:	00c0      	lsls	r0, r0, #3
 8001192:	0fe4      	lsrs	r4, r4, #31
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	0d6d      	lsrs	r5, r5, #21
 8001198:	46a2      	mov	sl, r4
 800119a:	4681      	mov	r9, r0
 800119c:	0d7f      	lsrs	r7, r7, #21
 800119e:	469c      	mov	ip, r3
 80011a0:	4690      	mov	r8, r2
 80011a2:	42b7      	cmp	r7, r6
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dsub+0x40>
 80011a6:	e0b9      	b.n	800131c <__aeabi_dsub+0x1b4>
 80011a8:	465b      	mov	r3, fp
 80011aa:	2601      	movs	r6, #1
 80011ac:	4073      	eors	r3, r6
 80011ae:	469b      	mov	fp, r3
 80011b0:	1bee      	subs	r6, r5, r7
 80011b2:	45a3      	cmp	fp, r4
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dsub+0x50>
 80011b6:	e083      	b.n	80012c0 <__aeabi_dsub+0x158>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	dd63      	ble.n	8001284 <__aeabi_dsub+0x11c>
 80011bc:	2f00      	cmp	r7, #0
 80011be:	d000      	beq.n	80011c2 <__aeabi_dsub+0x5a>
 80011c0:	e0b1      	b.n	8001326 <__aeabi_dsub+0x1be>
 80011c2:	4663      	mov	r3, ip
 80011c4:	4313      	orrs	r3, r2
 80011c6:	d100      	bne.n	80011ca <__aeabi_dsub+0x62>
 80011c8:	e123      	b.n	8001412 <__aeabi_dsub+0x2aa>
 80011ca:	1e73      	subs	r3, r6, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dsub+0x6a>
 80011d0:	e1ba      	b.n	8001548 <__aeabi_dsub+0x3e0>
 80011d2:	1a86      	subs	r6, r0, r2
 80011d4:	4663      	mov	r3, ip
 80011d6:	42b0      	cmp	r0, r6
 80011d8:	4180      	sbcs	r0, r0
 80011da:	2501      	movs	r5, #1
 80011dc:	1ac9      	subs	r1, r1, r3
 80011de:	4240      	negs	r0, r0
 80011e0:	1a09      	subs	r1, r1, r0
 80011e2:	020b      	lsls	r3, r1, #8
 80011e4:	d400      	bmi.n	80011e8 <__aeabi_dsub+0x80>
 80011e6:	e147      	b.n	8001478 <__aeabi_dsub+0x310>
 80011e8:	0249      	lsls	r1, r1, #9
 80011ea:	0a4b      	lsrs	r3, r1, #9
 80011ec:	4698      	mov	r8, r3
 80011ee:	4643      	mov	r3, r8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dsub+0x8e>
 80011f4:	e189      	b.n	800150a <__aeabi_dsub+0x3a2>
 80011f6:	4640      	mov	r0, r8
 80011f8:	f000 fba0 	bl	800193c <__clzsi2>
 80011fc:	0003      	movs	r3, r0
 80011fe:	3b08      	subs	r3, #8
 8001200:	2b1f      	cmp	r3, #31
 8001202:	dd00      	ble.n	8001206 <__aeabi_dsub+0x9e>
 8001204:	e17c      	b.n	8001500 <__aeabi_dsub+0x398>
 8001206:	2220      	movs	r2, #32
 8001208:	0030      	movs	r0, r6
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	4641      	mov	r1, r8
 800120e:	40d0      	lsrs	r0, r2
 8001210:	4099      	lsls	r1, r3
 8001212:	0002      	movs	r2, r0
 8001214:	409e      	lsls	r6, r3
 8001216:	430a      	orrs	r2, r1
 8001218:	429d      	cmp	r5, r3
 800121a:	dd00      	ble.n	800121e <__aeabi_dsub+0xb6>
 800121c:	e16a      	b.n	80014f4 <__aeabi_dsub+0x38c>
 800121e:	1b5d      	subs	r5, r3, r5
 8001220:	1c6b      	adds	r3, r5, #1
 8001222:	2b1f      	cmp	r3, #31
 8001224:	dd00      	ble.n	8001228 <__aeabi_dsub+0xc0>
 8001226:	e194      	b.n	8001552 <__aeabi_dsub+0x3ea>
 8001228:	2120      	movs	r1, #32
 800122a:	0010      	movs	r0, r2
 800122c:	0035      	movs	r5, r6
 800122e:	1ac9      	subs	r1, r1, r3
 8001230:	408e      	lsls	r6, r1
 8001232:	40da      	lsrs	r2, r3
 8001234:	4088      	lsls	r0, r1
 8001236:	40dd      	lsrs	r5, r3
 8001238:	1e71      	subs	r1, r6, #1
 800123a:	418e      	sbcs	r6, r1
 800123c:	0011      	movs	r1, r2
 800123e:	2207      	movs	r2, #7
 8001240:	4328      	orrs	r0, r5
 8001242:	2500      	movs	r5, #0
 8001244:	4306      	orrs	r6, r0
 8001246:	4032      	ands	r2, r6
 8001248:	2a00      	cmp	r2, #0
 800124a:	d009      	beq.n	8001260 <__aeabi_dsub+0xf8>
 800124c:	230f      	movs	r3, #15
 800124e:	4033      	ands	r3, r6
 8001250:	2b04      	cmp	r3, #4
 8001252:	d005      	beq.n	8001260 <__aeabi_dsub+0xf8>
 8001254:	1d33      	adds	r3, r6, #4
 8001256:	42b3      	cmp	r3, r6
 8001258:	41b6      	sbcs	r6, r6
 800125a:	4276      	negs	r6, r6
 800125c:	1989      	adds	r1, r1, r6
 800125e:	001e      	movs	r6, r3
 8001260:	020b      	lsls	r3, r1, #8
 8001262:	d400      	bmi.n	8001266 <__aeabi_dsub+0xfe>
 8001264:	e23d      	b.n	80016e2 <__aeabi_dsub+0x57a>
 8001266:	1c6a      	adds	r2, r5, #1
 8001268:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <__aeabi_dsub+0x348>)
 800126a:	0555      	lsls	r5, r2, #21
 800126c:	0d6d      	lsrs	r5, r5, #21
 800126e:	429a      	cmp	r2, r3
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x10c>
 8001272:	e119      	b.n	80014a8 <__aeabi_dsub+0x340>
 8001274:	4a8f      	ldr	r2, [pc, #572]	; (80014b4 <__aeabi_dsub+0x34c>)
 8001276:	08f6      	lsrs	r6, r6, #3
 8001278:	400a      	ands	r2, r1
 800127a:	0757      	lsls	r7, r2, #29
 800127c:	0252      	lsls	r2, r2, #9
 800127e:	4337      	orrs	r7, r6
 8001280:	0b12      	lsrs	r2, r2, #12
 8001282:	e09b      	b.n	80013bc <__aeabi_dsub+0x254>
 8001284:	2e00      	cmp	r6, #0
 8001286:	d000      	beq.n	800128a <__aeabi_dsub+0x122>
 8001288:	e0c5      	b.n	8001416 <__aeabi_dsub+0x2ae>
 800128a:	1c6e      	adds	r6, r5, #1
 800128c:	0576      	lsls	r6, r6, #21
 800128e:	0d76      	lsrs	r6, r6, #21
 8001290:	2e01      	cmp	r6, #1
 8001292:	dc00      	bgt.n	8001296 <__aeabi_dsub+0x12e>
 8001294:	e148      	b.n	8001528 <__aeabi_dsub+0x3c0>
 8001296:	4667      	mov	r7, ip
 8001298:	1a86      	subs	r6, r0, r2
 800129a:	1bcb      	subs	r3, r1, r7
 800129c:	42b0      	cmp	r0, r6
 800129e:	41bf      	sbcs	r7, r7
 80012a0:	427f      	negs	r7, r7
 80012a2:	46b8      	mov	r8, r7
 80012a4:	001f      	movs	r7, r3
 80012a6:	4643      	mov	r3, r8
 80012a8:	1aff      	subs	r7, r7, r3
 80012aa:	003b      	movs	r3, r7
 80012ac:	46b8      	mov	r8, r7
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	d500      	bpl.n	80012b4 <__aeabi_dsub+0x14c>
 80012b2:	e15f      	b.n	8001574 <__aeabi_dsub+0x40c>
 80012b4:	4337      	orrs	r7, r6
 80012b6:	d19a      	bne.n	80011ee <__aeabi_dsub+0x86>
 80012b8:	2200      	movs	r2, #0
 80012ba:	2400      	movs	r4, #0
 80012bc:	2500      	movs	r5, #0
 80012be:	e079      	b.n	80013b4 <__aeabi_dsub+0x24c>
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_dsub+0x15e>
 80012c4:	e0fa      	b.n	80014bc <__aeabi_dsub+0x354>
 80012c6:	2f00      	cmp	r7, #0
 80012c8:	d100      	bne.n	80012cc <__aeabi_dsub+0x164>
 80012ca:	e08d      	b.n	80013e8 <__aeabi_dsub+0x280>
 80012cc:	4b78      	ldr	r3, [pc, #480]	; (80014b0 <__aeabi_dsub+0x348>)
 80012ce:	429d      	cmp	r5, r3
 80012d0:	d067      	beq.n	80013a2 <__aeabi_dsub+0x23a>
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	4667      	mov	r7, ip
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	431f      	orrs	r7, r3
 80012da:	46bc      	mov	ip, r7
 80012dc:	2e38      	cmp	r6, #56	; 0x38
 80012de:	dc00      	bgt.n	80012e2 <__aeabi_dsub+0x17a>
 80012e0:	e152      	b.n	8001588 <__aeabi_dsub+0x420>
 80012e2:	4663      	mov	r3, ip
 80012e4:	4313      	orrs	r3, r2
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	4193      	sbcs	r3, r2
 80012ea:	181e      	adds	r6, r3, r0
 80012ec:	4286      	cmp	r6, r0
 80012ee:	4180      	sbcs	r0, r0
 80012f0:	4240      	negs	r0, r0
 80012f2:	1809      	adds	r1, r1, r0
 80012f4:	020b      	lsls	r3, r1, #8
 80012f6:	d400      	bmi.n	80012fa <__aeabi_dsub+0x192>
 80012f8:	e0be      	b.n	8001478 <__aeabi_dsub+0x310>
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <__aeabi_dsub+0x348>)
 80012fc:	3501      	adds	r5, #1
 80012fe:	429d      	cmp	r5, r3
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x19c>
 8001302:	e0d2      	b.n	80014aa <__aeabi_dsub+0x342>
 8001304:	4a6b      	ldr	r2, [pc, #428]	; (80014b4 <__aeabi_dsub+0x34c>)
 8001306:	0873      	lsrs	r3, r6, #1
 8001308:	400a      	ands	r2, r1
 800130a:	2101      	movs	r1, #1
 800130c:	400e      	ands	r6, r1
 800130e:	431e      	orrs	r6, r3
 8001310:	0851      	lsrs	r1, r2, #1
 8001312:	07d3      	lsls	r3, r2, #31
 8001314:	2207      	movs	r2, #7
 8001316:	431e      	orrs	r6, r3
 8001318:	4032      	ands	r2, r6
 800131a:	e795      	b.n	8001248 <__aeabi_dsub+0xe0>
 800131c:	001e      	movs	r6, r3
 800131e:	4316      	orrs	r6, r2
 8001320:	d000      	beq.n	8001324 <__aeabi_dsub+0x1bc>
 8001322:	e745      	b.n	80011b0 <__aeabi_dsub+0x48>
 8001324:	e740      	b.n	80011a8 <__aeabi_dsub+0x40>
 8001326:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <__aeabi_dsub+0x348>)
 8001328:	429d      	cmp	r5, r3
 800132a:	d03a      	beq.n	80013a2 <__aeabi_dsub+0x23a>
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	4667      	mov	r7, ip
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	431f      	orrs	r7, r3
 8001334:	46bc      	mov	ip, r7
 8001336:	2e38      	cmp	r6, #56	; 0x38
 8001338:	dd00      	ble.n	800133c <__aeabi_dsub+0x1d4>
 800133a:	e0eb      	b.n	8001514 <__aeabi_dsub+0x3ac>
 800133c:	2e1f      	cmp	r6, #31
 800133e:	dc00      	bgt.n	8001342 <__aeabi_dsub+0x1da>
 8001340:	e13a      	b.n	80015b8 <__aeabi_dsub+0x450>
 8001342:	0033      	movs	r3, r6
 8001344:	4667      	mov	r7, ip
 8001346:	3b20      	subs	r3, #32
 8001348:	40df      	lsrs	r7, r3
 800134a:	003b      	movs	r3, r7
 800134c:	2e20      	cmp	r6, #32
 800134e:	d005      	beq.n	800135c <__aeabi_dsub+0x1f4>
 8001350:	2740      	movs	r7, #64	; 0x40
 8001352:	1bbf      	subs	r7, r7, r6
 8001354:	4666      	mov	r6, ip
 8001356:	40be      	lsls	r6, r7
 8001358:	4332      	orrs	r2, r6
 800135a:	4690      	mov	r8, r2
 800135c:	4646      	mov	r6, r8
 800135e:	1e72      	subs	r2, r6, #1
 8001360:	4196      	sbcs	r6, r2
 8001362:	4333      	orrs	r3, r6
 8001364:	e0da      	b.n	800151c <__aeabi_dsub+0x3b4>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dsub+0x204>
 800136a:	e214      	b.n	8001796 <__aeabi_dsub+0x62e>
 800136c:	4663      	mov	r3, ip
 800136e:	4313      	orrs	r3, r2
 8001370:	d100      	bne.n	8001374 <__aeabi_dsub+0x20c>
 8001372:	e168      	b.n	8001646 <__aeabi_dsub+0x4de>
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	074e      	lsls	r6, r1, #29
 8001378:	08c0      	lsrs	r0, r0, #3
 800137a:	08c9      	lsrs	r1, r1, #3
 800137c:	031b      	lsls	r3, r3, #12
 800137e:	4306      	orrs	r6, r0
 8001380:	4219      	tst	r1, r3
 8001382:	d008      	beq.n	8001396 <__aeabi_dsub+0x22e>
 8001384:	4660      	mov	r0, ip
 8001386:	08c0      	lsrs	r0, r0, #3
 8001388:	4218      	tst	r0, r3
 800138a:	d104      	bne.n	8001396 <__aeabi_dsub+0x22e>
 800138c:	4663      	mov	r3, ip
 800138e:	0001      	movs	r1, r0
 8001390:	08d2      	lsrs	r2, r2, #3
 8001392:	075e      	lsls	r6, r3, #29
 8001394:	4316      	orrs	r6, r2
 8001396:	00f3      	lsls	r3, r6, #3
 8001398:	4699      	mov	r9, r3
 800139a:	00c9      	lsls	r1, r1, #3
 800139c:	0f72      	lsrs	r2, r6, #29
 800139e:	4d44      	ldr	r5, [pc, #272]	; (80014b0 <__aeabi_dsub+0x348>)
 80013a0:	4311      	orrs	r1, r2
 80013a2:	464b      	mov	r3, r9
 80013a4:	08de      	lsrs	r6, r3, #3
 80013a6:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <__aeabi_dsub+0x348>)
 80013a8:	074f      	lsls	r7, r1, #29
 80013aa:	4337      	orrs	r7, r6
 80013ac:	08ca      	lsrs	r2, r1, #3
 80013ae:	429d      	cmp	r5, r3
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dsub+0x24c>
 80013b2:	e06e      	b.n	8001492 <__aeabi_dsub+0x32a>
 80013b4:	0312      	lsls	r2, r2, #12
 80013b6:	056d      	lsls	r5, r5, #21
 80013b8:	0b12      	lsrs	r2, r2, #12
 80013ba:	0d6d      	lsrs	r5, r5, #21
 80013bc:	2100      	movs	r1, #0
 80013be:	0312      	lsls	r2, r2, #12
 80013c0:	0b13      	lsrs	r3, r2, #12
 80013c2:	0d0a      	lsrs	r2, r1, #20
 80013c4:	0512      	lsls	r2, r2, #20
 80013c6:	431a      	orrs	r2, r3
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <__aeabi_dsub+0x350>)
 80013ca:	052d      	lsls	r5, r5, #20
 80013cc:	4013      	ands	r3, r2
 80013ce:	432b      	orrs	r3, r5
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	07e4      	lsls	r4, r4, #31
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	4323      	orrs	r3, r4
 80013d8:	0038      	movs	r0, r7
 80013da:	0019      	movs	r1, r3
 80013dc:	bc3c      	pop	{r2, r3, r4, r5}
 80013de:	4690      	mov	r8, r2
 80013e0:	4699      	mov	r9, r3
 80013e2:	46a2      	mov	sl, r4
 80013e4:	46ab      	mov	fp, r5
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e8:	4663      	mov	r3, ip
 80013ea:	4313      	orrs	r3, r2
 80013ec:	d011      	beq.n	8001412 <__aeabi_dsub+0x2aa>
 80013ee:	1e73      	subs	r3, r6, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_dsub+0x28e>
 80013f4:	e107      	b.n	8001606 <__aeabi_dsub+0x49e>
 80013f6:	1886      	adds	r6, r0, r2
 80013f8:	4286      	cmp	r6, r0
 80013fa:	4180      	sbcs	r0, r0
 80013fc:	4461      	add	r1, ip
 80013fe:	4240      	negs	r0, r0
 8001400:	1809      	adds	r1, r1, r0
 8001402:	2501      	movs	r5, #1
 8001404:	020b      	lsls	r3, r1, #8
 8001406:	d537      	bpl.n	8001478 <__aeabi_dsub+0x310>
 8001408:	2502      	movs	r5, #2
 800140a:	e77b      	b.n	8001304 <__aeabi_dsub+0x19c>
 800140c:	003e      	movs	r6, r7
 800140e:	4661      	mov	r1, ip
 8001410:	4691      	mov	r9, r2
 8001412:	0035      	movs	r5, r6
 8001414:	e7c5      	b.n	80013a2 <__aeabi_dsub+0x23a>
 8001416:	465c      	mov	r4, fp
 8001418:	2d00      	cmp	r5, #0
 800141a:	d000      	beq.n	800141e <__aeabi_dsub+0x2b6>
 800141c:	e0e1      	b.n	80015e2 <__aeabi_dsub+0x47a>
 800141e:	000b      	movs	r3, r1
 8001420:	4303      	orrs	r3, r0
 8001422:	d0f3      	beq.n	800140c <__aeabi_dsub+0x2a4>
 8001424:	1c73      	adds	r3, r6, #1
 8001426:	d100      	bne.n	800142a <__aeabi_dsub+0x2c2>
 8001428:	e1ac      	b.n	8001784 <__aeabi_dsub+0x61c>
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <__aeabi_dsub+0x348>)
 800142c:	429f      	cmp	r7, r3
 800142e:	d100      	bne.n	8001432 <__aeabi_dsub+0x2ca>
 8001430:	e13a      	b.n	80016a8 <__aeabi_dsub+0x540>
 8001432:	43f3      	mvns	r3, r6
 8001434:	2b38      	cmp	r3, #56	; 0x38
 8001436:	dd00      	ble.n	800143a <__aeabi_dsub+0x2d2>
 8001438:	e16f      	b.n	800171a <__aeabi_dsub+0x5b2>
 800143a:	2b1f      	cmp	r3, #31
 800143c:	dd00      	ble.n	8001440 <__aeabi_dsub+0x2d8>
 800143e:	e18c      	b.n	800175a <__aeabi_dsub+0x5f2>
 8001440:	2520      	movs	r5, #32
 8001442:	000e      	movs	r6, r1
 8001444:	1aed      	subs	r5, r5, r3
 8001446:	40ae      	lsls	r6, r5
 8001448:	46b0      	mov	r8, r6
 800144a:	0006      	movs	r6, r0
 800144c:	46aa      	mov	sl, r5
 800144e:	40de      	lsrs	r6, r3
 8001450:	4645      	mov	r5, r8
 8001452:	4335      	orrs	r5, r6
 8001454:	002e      	movs	r6, r5
 8001456:	4655      	mov	r5, sl
 8001458:	40d9      	lsrs	r1, r3
 800145a:	40a8      	lsls	r0, r5
 800145c:	4663      	mov	r3, ip
 800145e:	1e45      	subs	r5, r0, #1
 8001460:	41a8      	sbcs	r0, r5
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	469c      	mov	ip, r3
 8001466:	4330      	orrs	r0, r6
 8001468:	1a16      	subs	r6, r2, r0
 800146a:	42b2      	cmp	r2, r6
 800146c:	4192      	sbcs	r2, r2
 800146e:	4663      	mov	r3, ip
 8001470:	4252      	negs	r2, r2
 8001472:	1a99      	subs	r1, r3, r2
 8001474:	003d      	movs	r5, r7
 8001476:	e6b4      	b.n	80011e2 <__aeabi_dsub+0x7a>
 8001478:	2207      	movs	r2, #7
 800147a:	4032      	ands	r2, r6
 800147c:	2a00      	cmp	r2, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_dsub+0x31a>
 8001480:	e6e4      	b.n	800124c <__aeabi_dsub+0xe4>
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <__aeabi_dsub+0x348>)
 8001484:	08f6      	lsrs	r6, r6, #3
 8001486:	074f      	lsls	r7, r1, #29
 8001488:	4337      	orrs	r7, r6
 800148a:	08ca      	lsrs	r2, r1, #3
 800148c:	429d      	cmp	r5, r3
 800148e:	d000      	beq.n	8001492 <__aeabi_dsub+0x32a>
 8001490:	e790      	b.n	80013b4 <__aeabi_dsub+0x24c>
 8001492:	003b      	movs	r3, r7
 8001494:	4313      	orrs	r3, r2
 8001496:	d100      	bne.n	800149a <__aeabi_dsub+0x332>
 8001498:	e1a6      	b.n	80017e8 <__aeabi_dsub+0x680>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	431a      	orrs	r2, r3
 80014a0:	0312      	lsls	r2, r2, #12
 80014a2:	0b12      	lsrs	r2, r2, #12
 80014a4:	4d02      	ldr	r5, [pc, #8]	; (80014b0 <__aeabi_dsub+0x348>)
 80014a6:	e789      	b.n	80013bc <__aeabi_dsub+0x254>
 80014a8:	0015      	movs	r5, r2
 80014aa:	2200      	movs	r2, #0
 80014ac:	2700      	movs	r7, #0
 80014ae:	e785      	b.n	80013bc <__aeabi_dsub+0x254>
 80014b0:	000007ff 	.word	0x000007ff
 80014b4:	ff7fffff 	.word	0xff7fffff
 80014b8:	800fffff 	.word	0x800fffff
 80014bc:	2e00      	cmp	r6, #0
 80014be:	d000      	beq.n	80014c2 <__aeabi_dsub+0x35a>
 80014c0:	e0c7      	b.n	8001652 <__aeabi_dsub+0x4ea>
 80014c2:	1c6b      	adds	r3, r5, #1
 80014c4:	055e      	lsls	r6, r3, #21
 80014c6:	0d76      	lsrs	r6, r6, #21
 80014c8:	2e01      	cmp	r6, #1
 80014ca:	dc00      	bgt.n	80014ce <__aeabi_dsub+0x366>
 80014cc:	e0f0      	b.n	80016b0 <__aeabi_dsub+0x548>
 80014ce:	4dc8      	ldr	r5, [pc, #800]	; (80017f0 <__aeabi_dsub+0x688>)
 80014d0:	42ab      	cmp	r3, r5
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dsub+0x36e>
 80014d4:	e0b9      	b.n	800164a <__aeabi_dsub+0x4e2>
 80014d6:	1885      	adds	r5, r0, r2
 80014d8:	000a      	movs	r2, r1
 80014da:	4285      	cmp	r5, r0
 80014dc:	4189      	sbcs	r1, r1
 80014de:	4462      	add	r2, ip
 80014e0:	4249      	negs	r1, r1
 80014e2:	1851      	adds	r1, r2, r1
 80014e4:	2207      	movs	r2, #7
 80014e6:	07ce      	lsls	r6, r1, #31
 80014e8:	086d      	lsrs	r5, r5, #1
 80014ea:	432e      	orrs	r6, r5
 80014ec:	0849      	lsrs	r1, r1, #1
 80014ee:	4032      	ands	r2, r6
 80014f0:	001d      	movs	r5, r3
 80014f2:	e6a9      	b.n	8001248 <__aeabi_dsub+0xe0>
 80014f4:	49bf      	ldr	r1, [pc, #764]	; (80017f4 <__aeabi_dsub+0x68c>)
 80014f6:	1aed      	subs	r5, r5, r3
 80014f8:	4011      	ands	r1, r2
 80014fa:	2207      	movs	r2, #7
 80014fc:	4032      	ands	r2, r6
 80014fe:	e6a3      	b.n	8001248 <__aeabi_dsub+0xe0>
 8001500:	0032      	movs	r2, r6
 8001502:	3828      	subs	r0, #40	; 0x28
 8001504:	4082      	lsls	r2, r0
 8001506:	2600      	movs	r6, #0
 8001508:	e686      	b.n	8001218 <__aeabi_dsub+0xb0>
 800150a:	0030      	movs	r0, r6
 800150c:	f000 fa16 	bl	800193c <__clzsi2>
 8001510:	3020      	adds	r0, #32
 8001512:	e673      	b.n	80011fc <__aeabi_dsub+0x94>
 8001514:	4663      	mov	r3, ip
 8001516:	4313      	orrs	r3, r2
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	4193      	sbcs	r3, r2
 800151c:	1ac6      	subs	r6, r0, r3
 800151e:	42b0      	cmp	r0, r6
 8001520:	4180      	sbcs	r0, r0
 8001522:	4240      	negs	r0, r0
 8001524:	1a09      	subs	r1, r1, r0
 8001526:	e65c      	b.n	80011e2 <__aeabi_dsub+0x7a>
 8001528:	000e      	movs	r6, r1
 800152a:	4667      	mov	r7, ip
 800152c:	4306      	orrs	r6, r0
 800152e:	4317      	orrs	r7, r2
 8001530:	2d00      	cmp	r5, #0
 8001532:	d15e      	bne.n	80015f2 <__aeabi_dsub+0x48a>
 8001534:	2e00      	cmp	r6, #0
 8001536:	d000      	beq.n	800153a <__aeabi_dsub+0x3d2>
 8001538:	e0f3      	b.n	8001722 <__aeabi_dsub+0x5ba>
 800153a:	2f00      	cmp	r7, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dsub+0x3d8>
 800153e:	e11e      	b.n	800177e <__aeabi_dsub+0x616>
 8001540:	465c      	mov	r4, fp
 8001542:	4661      	mov	r1, ip
 8001544:	4691      	mov	r9, r2
 8001546:	e72c      	b.n	80013a2 <__aeabi_dsub+0x23a>
 8001548:	4fa9      	ldr	r7, [pc, #676]	; (80017f0 <__aeabi_dsub+0x688>)
 800154a:	42be      	cmp	r6, r7
 800154c:	d07b      	beq.n	8001646 <__aeabi_dsub+0x4de>
 800154e:	001e      	movs	r6, r3
 8001550:	e6f1      	b.n	8001336 <__aeabi_dsub+0x1ce>
 8001552:	0010      	movs	r0, r2
 8001554:	3d1f      	subs	r5, #31
 8001556:	40e8      	lsrs	r0, r5
 8001558:	2b20      	cmp	r3, #32
 800155a:	d003      	beq.n	8001564 <__aeabi_dsub+0x3fc>
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	1acb      	subs	r3, r1, r3
 8001560:	409a      	lsls	r2, r3
 8001562:	4316      	orrs	r6, r2
 8001564:	1e73      	subs	r3, r6, #1
 8001566:	419e      	sbcs	r6, r3
 8001568:	2207      	movs	r2, #7
 800156a:	4306      	orrs	r6, r0
 800156c:	4032      	ands	r2, r6
 800156e:	2100      	movs	r1, #0
 8001570:	2500      	movs	r5, #0
 8001572:	e783      	b.n	800147c <__aeabi_dsub+0x314>
 8001574:	1a16      	subs	r6, r2, r0
 8001576:	4663      	mov	r3, ip
 8001578:	42b2      	cmp	r2, r6
 800157a:	4180      	sbcs	r0, r0
 800157c:	1a59      	subs	r1, r3, r1
 800157e:	4240      	negs	r0, r0
 8001580:	1a0b      	subs	r3, r1, r0
 8001582:	4698      	mov	r8, r3
 8001584:	465c      	mov	r4, fp
 8001586:	e632      	b.n	80011ee <__aeabi_dsub+0x86>
 8001588:	2e1f      	cmp	r6, #31
 800158a:	dd00      	ble.n	800158e <__aeabi_dsub+0x426>
 800158c:	e0ab      	b.n	80016e6 <__aeabi_dsub+0x57e>
 800158e:	2720      	movs	r7, #32
 8001590:	1bbb      	subs	r3, r7, r6
 8001592:	469a      	mov	sl, r3
 8001594:	4663      	mov	r3, ip
 8001596:	4657      	mov	r7, sl
 8001598:	40bb      	lsls	r3, r7
 800159a:	4699      	mov	r9, r3
 800159c:	0013      	movs	r3, r2
 800159e:	464f      	mov	r7, r9
 80015a0:	40f3      	lsrs	r3, r6
 80015a2:	431f      	orrs	r7, r3
 80015a4:	003b      	movs	r3, r7
 80015a6:	4657      	mov	r7, sl
 80015a8:	40ba      	lsls	r2, r7
 80015aa:	1e57      	subs	r7, r2, #1
 80015ac:	41ba      	sbcs	r2, r7
 80015ae:	4313      	orrs	r3, r2
 80015b0:	4662      	mov	r2, ip
 80015b2:	40f2      	lsrs	r2, r6
 80015b4:	1889      	adds	r1, r1, r2
 80015b6:	e698      	b.n	80012ea <__aeabi_dsub+0x182>
 80015b8:	2720      	movs	r7, #32
 80015ba:	1bbb      	subs	r3, r7, r6
 80015bc:	469a      	mov	sl, r3
 80015be:	4663      	mov	r3, ip
 80015c0:	4657      	mov	r7, sl
 80015c2:	40bb      	lsls	r3, r7
 80015c4:	4699      	mov	r9, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	464f      	mov	r7, r9
 80015ca:	40f3      	lsrs	r3, r6
 80015cc:	431f      	orrs	r7, r3
 80015ce:	003b      	movs	r3, r7
 80015d0:	4657      	mov	r7, sl
 80015d2:	40ba      	lsls	r2, r7
 80015d4:	1e57      	subs	r7, r2, #1
 80015d6:	41ba      	sbcs	r2, r7
 80015d8:	4313      	orrs	r3, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	40f2      	lsrs	r2, r6
 80015de:	1a89      	subs	r1, r1, r2
 80015e0:	e79c      	b.n	800151c <__aeabi_dsub+0x3b4>
 80015e2:	4b83      	ldr	r3, [pc, #524]	; (80017f0 <__aeabi_dsub+0x688>)
 80015e4:	429f      	cmp	r7, r3
 80015e6:	d05f      	beq.n	80016a8 <__aeabi_dsub+0x540>
 80015e8:	2580      	movs	r5, #128	; 0x80
 80015ea:	042d      	lsls	r5, r5, #16
 80015ec:	4273      	negs	r3, r6
 80015ee:	4329      	orrs	r1, r5
 80015f0:	e720      	b.n	8001434 <__aeabi_dsub+0x2cc>
 80015f2:	2e00      	cmp	r6, #0
 80015f4:	d10c      	bne.n	8001610 <__aeabi_dsub+0x4a8>
 80015f6:	2f00      	cmp	r7, #0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dsub+0x494>
 80015fa:	e0d0      	b.n	800179e <__aeabi_dsub+0x636>
 80015fc:	465c      	mov	r4, fp
 80015fe:	4661      	mov	r1, ip
 8001600:	4691      	mov	r9, r2
 8001602:	4d7b      	ldr	r5, [pc, #492]	; (80017f0 <__aeabi_dsub+0x688>)
 8001604:	e6cd      	b.n	80013a2 <__aeabi_dsub+0x23a>
 8001606:	4f7a      	ldr	r7, [pc, #488]	; (80017f0 <__aeabi_dsub+0x688>)
 8001608:	42be      	cmp	r6, r7
 800160a:	d01c      	beq.n	8001646 <__aeabi_dsub+0x4de>
 800160c:	001e      	movs	r6, r3
 800160e:	e665      	b.n	80012dc <__aeabi_dsub+0x174>
 8001610:	2f00      	cmp	r7, #0
 8001612:	d018      	beq.n	8001646 <__aeabi_dsub+0x4de>
 8001614:	08c0      	lsrs	r0, r0, #3
 8001616:	074e      	lsls	r6, r1, #29
 8001618:	4306      	orrs	r6, r0
 800161a:	2080      	movs	r0, #128	; 0x80
 800161c:	08c9      	lsrs	r1, r1, #3
 800161e:	0300      	lsls	r0, r0, #12
 8001620:	4201      	tst	r1, r0
 8001622:	d008      	beq.n	8001636 <__aeabi_dsub+0x4ce>
 8001624:	4663      	mov	r3, ip
 8001626:	08dc      	lsrs	r4, r3, #3
 8001628:	4204      	tst	r4, r0
 800162a:	d104      	bne.n	8001636 <__aeabi_dsub+0x4ce>
 800162c:	0021      	movs	r1, r4
 800162e:	46da      	mov	sl, fp
 8001630:	08d2      	lsrs	r2, r2, #3
 8001632:	075e      	lsls	r6, r3, #29
 8001634:	4316      	orrs	r6, r2
 8001636:	00f3      	lsls	r3, r6, #3
 8001638:	4699      	mov	r9, r3
 800163a:	2401      	movs	r4, #1
 800163c:	4653      	mov	r3, sl
 800163e:	00c9      	lsls	r1, r1, #3
 8001640:	0f72      	lsrs	r2, r6, #29
 8001642:	4311      	orrs	r1, r2
 8001644:	401c      	ands	r4, r3
 8001646:	4d6a      	ldr	r5, [pc, #424]	; (80017f0 <__aeabi_dsub+0x688>)
 8001648:	e6ab      	b.n	80013a2 <__aeabi_dsub+0x23a>
 800164a:	001d      	movs	r5, r3
 800164c:	2200      	movs	r2, #0
 800164e:	2700      	movs	r7, #0
 8001650:	e6b4      	b.n	80013bc <__aeabi_dsub+0x254>
 8001652:	2d00      	cmp	r5, #0
 8001654:	d159      	bne.n	800170a <__aeabi_dsub+0x5a2>
 8001656:	000b      	movs	r3, r1
 8001658:	4303      	orrs	r3, r0
 800165a:	d100      	bne.n	800165e <__aeabi_dsub+0x4f6>
 800165c:	e6d6      	b.n	800140c <__aeabi_dsub+0x2a4>
 800165e:	1c73      	adds	r3, r6, #1
 8001660:	d100      	bne.n	8001664 <__aeabi_dsub+0x4fc>
 8001662:	e0b2      	b.n	80017ca <__aeabi_dsub+0x662>
 8001664:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <__aeabi_dsub+0x688>)
 8001666:	429f      	cmp	r7, r3
 8001668:	d01e      	beq.n	80016a8 <__aeabi_dsub+0x540>
 800166a:	43f3      	mvns	r3, r6
 800166c:	2b38      	cmp	r3, #56	; 0x38
 800166e:	dc6f      	bgt.n	8001750 <__aeabi_dsub+0x5e8>
 8001670:	2b1f      	cmp	r3, #31
 8001672:	dd00      	ble.n	8001676 <__aeabi_dsub+0x50e>
 8001674:	e097      	b.n	80017a6 <__aeabi_dsub+0x63e>
 8001676:	2520      	movs	r5, #32
 8001678:	000e      	movs	r6, r1
 800167a:	1aed      	subs	r5, r5, r3
 800167c:	40ae      	lsls	r6, r5
 800167e:	46b0      	mov	r8, r6
 8001680:	0006      	movs	r6, r0
 8001682:	46aa      	mov	sl, r5
 8001684:	40de      	lsrs	r6, r3
 8001686:	4645      	mov	r5, r8
 8001688:	4335      	orrs	r5, r6
 800168a:	002e      	movs	r6, r5
 800168c:	4655      	mov	r5, sl
 800168e:	40a8      	lsls	r0, r5
 8001690:	40d9      	lsrs	r1, r3
 8001692:	1e45      	subs	r5, r0, #1
 8001694:	41a8      	sbcs	r0, r5
 8001696:	448c      	add	ip, r1
 8001698:	4306      	orrs	r6, r0
 800169a:	18b6      	adds	r6, r6, r2
 800169c:	4296      	cmp	r6, r2
 800169e:	4192      	sbcs	r2, r2
 80016a0:	4251      	negs	r1, r2
 80016a2:	4461      	add	r1, ip
 80016a4:	003d      	movs	r5, r7
 80016a6:	e625      	b.n	80012f4 <__aeabi_dsub+0x18c>
 80016a8:	003d      	movs	r5, r7
 80016aa:	4661      	mov	r1, ip
 80016ac:	4691      	mov	r9, r2
 80016ae:	e678      	b.n	80013a2 <__aeabi_dsub+0x23a>
 80016b0:	000b      	movs	r3, r1
 80016b2:	4303      	orrs	r3, r0
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d000      	beq.n	80016ba <__aeabi_dsub+0x552>
 80016b8:	e655      	b.n	8001366 <__aeabi_dsub+0x1fe>
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f5      	beq.n	80016aa <__aeabi_dsub+0x542>
 80016be:	4663      	mov	r3, ip
 80016c0:	4313      	orrs	r3, r2
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dsub+0x55e>
 80016c4:	e66d      	b.n	80013a2 <__aeabi_dsub+0x23a>
 80016c6:	1886      	adds	r6, r0, r2
 80016c8:	4286      	cmp	r6, r0
 80016ca:	4180      	sbcs	r0, r0
 80016cc:	4461      	add	r1, ip
 80016ce:	4240      	negs	r0, r0
 80016d0:	1809      	adds	r1, r1, r0
 80016d2:	2200      	movs	r2, #0
 80016d4:	020b      	lsls	r3, r1, #8
 80016d6:	d400      	bmi.n	80016da <__aeabi_dsub+0x572>
 80016d8:	e6d0      	b.n	800147c <__aeabi_dsub+0x314>
 80016da:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <__aeabi_dsub+0x68c>)
 80016dc:	3501      	adds	r5, #1
 80016de:	4019      	ands	r1, r3
 80016e0:	e5b2      	b.n	8001248 <__aeabi_dsub+0xe0>
 80016e2:	46b1      	mov	r9, r6
 80016e4:	e65d      	b.n	80013a2 <__aeabi_dsub+0x23a>
 80016e6:	0033      	movs	r3, r6
 80016e8:	4667      	mov	r7, ip
 80016ea:	3b20      	subs	r3, #32
 80016ec:	40df      	lsrs	r7, r3
 80016ee:	003b      	movs	r3, r7
 80016f0:	2e20      	cmp	r6, #32
 80016f2:	d005      	beq.n	8001700 <__aeabi_dsub+0x598>
 80016f4:	2740      	movs	r7, #64	; 0x40
 80016f6:	1bbf      	subs	r7, r7, r6
 80016f8:	4666      	mov	r6, ip
 80016fa:	40be      	lsls	r6, r7
 80016fc:	4332      	orrs	r2, r6
 80016fe:	4690      	mov	r8, r2
 8001700:	4646      	mov	r6, r8
 8001702:	1e72      	subs	r2, r6, #1
 8001704:	4196      	sbcs	r6, r2
 8001706:	4333      	orrs	r3, r6
 8001708:	e5ef      	b.n	80012ea <__aeabi_dsub+0x182>
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <__aeabi_dsub+0x688>)
 800170c:	429f      	cmp	r7, r3
 800170e:	d0cb      	beq.n	80016a8 <__aeabi_dsub+0x540>
 8001710:	2580      	movs	r5, #128	; 0x80
 8001712:	042d      	lsls	r5, r5, #16
 8001714:	4273      	negs	r3, r6
 8001716:	4329      	orrs	r1, r5
 8001718:	e7a8      	b.n	800166c <__aeabi_dsub+0x504>
 800171a:	4308      	orrs	r0, r1
 800171c:	1e41      	subs	r1, r0, #1
 800171e:	4188      	sbcs	r0, r1
 8001720:	e6a2      	b.n	8001468 <__aeabi_dsub+0x300>
 8001722:	2f00      	cmp	r7, #0
 8001724:	d100      	bne.n	8001728 <__aeabi_dsub+0x5c0>
 8001726:	e63c      	b.n	80013a2 <__aeabi_dsub+0x23a>
 8001728:	4663      	mov	r3, ip
 800172a:	1a86      	subs	r6, r0, r2
 800172c:	1acf      	subs	r7, r1, r3
 800172e:	42b0      	cmp	r0, r6
 8001730:	419b      	sbcs	r3, r3
 8001732:	425b      	negs	r3, r3
 8001734:	1afb      	subs	r3, r7, r3
 8001736:	4698      	mov	r8, r3
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	d54e      	bpl.n	80017da <__aeabi_dsub+0x672>
 800173c:	1a16      	subs	r6, r2, r0
 800173e:	4663      	mov	r3, ip
 8001740:	42b2      	cmp	r2, r6
 8001742:	4192      	sbcs	r2, r2
 8001744:	1a59      	subs	r1, r3, r1
 8001746:	4252      	negs	r2, r2
 8001748:	1a89      	subs	r1, r1, r2
 800174a:	465c      	mov	r4, fp
 800174c:	2200      	movs	r2, #0
 800174e:	e57b      	b.n	8001248 <__aeabi_dsub+0xe0>
 8001750:	4301      	orrs	r1, r0
 8001752:	000e      	movs	r6, r1
 8001754:	1e71      	subs	r1, r6, #1
 8001756:	418e      	sbcs	r6, r1
 8001758:	e79f      	b.n	800169a <__aeabi_dsub+0x532>
 800175a:	001d      	movs	r5, r3
 800175c:	000e      	movs	r6, r1
 800175e:	3d20      	subs	r5, #32
 8001760:	40ee      	lsrs	r6, r5
 8001762:	46b0      	mov	r8, r6
 8001764:	2b20      	cmp	r3, #32
 8001766:	d004      	beq.n	8001772 <__aeabi_dsub+0x60a>
 8001768:	2540      	movs	r5, #64	; 0x40
 800176a:	1aeb      	subs	r3, r5, r3
 800176c:	4099      	lsls	r1, r3
 800176e:	4308      	orrs	r0, r1
 8001770:	4681      	mov	r9, r0
 8001772:	4648      	mov	r0, r9
 8001774:	4643      	mov	r3, r8
 8001776:	1e41      	subs	r1, r0, #1
 8001778:	4188      	sbcs	r0, r1
 800177a:	4318      	orrs	r0, r3
 800177c:	e674      	b.n	8001468 <__aeabi_dsub+0x300>
 800177e:	2200      	movs	r2, #0
 8001780:	2400      	movs	r4, #0
 8001782:	e617      	b.n	80013b4 <__aeabi_dsub+0x24c>
 8001784:	1a16      	subs	r6, r2, r0
 8001786:	4663      	mov	r3, ip
 8001788:	42b2      	cmp	r2, r6
 800178a:	4192      	sbcs	r2, r2
 800178c:	1a59      	subs	r1, r3, r1
 800178e:	4252      	negs	r2, r2
 8001790:	1a89      	subs	r1, r1, r2
 8001792:	003d      	movs	r5, r7
 8001794:	e525      	b.n	80011e2 <__aeabi_dsub+0x7a>
 8001796:	4661      	mov	r1, ip
 8001798:	4691      	mov	r9, r2
 800179a:	4d15      	ldr	r5, [pc, #84]	; (80017f0 <__aeabi_dsub+0x688>)
 800179c:	e601      	b.n	80013a2 <__aeabi_dsub+0x23a>
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	2400      	movs	r4, #0
 80017a2:	0312      	lsls	r2, r2, #12
 80017a4:	e679      	b.n	800149a <__aeabi_dsub+0x332>
 80017a6:	001d      	movs	r5, r3
 80017a8:	000e      	movs	r6, r1
 80017aa:	3d20      	subs	r5, #32
 80017ac:	40ee      	lsrs	r6, r5
 80017ae:	46b0      	mov	r8, r6
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d004      	beq.n	80017be <__aeabi_dsub+0x656>
 80017b4:	2540      	movs	r5, #64	; 0x40
 80017b6:	1aeb      	subs	r3, r5, r3
 80017b8:	4099      	lsls	r1, r3
 80017ba:	4308      	orrs	r0, r1
 80017bc:	4681      	mov	r9, r0
 80017be:	464e      	mov	r6, r9
 80017c0:	4643      	mov	r3, r8
 80017c2:	1e71      	subs	r1, r6, #1
 80017c4:	418e      	sbcs	r6, r1
 80017c6:	431e      	orrs	r6, r3
 80017c8:	e767      	b.n	800169a <__aeabi_dsub+0x532>
 80017ca:	1886      	adds	r6, r0, r2
 80017cc:	4296      	cmp	r6, r2
 80017ce:	419b      	sbcs	r3, r3
 80017d0:	4461      	add	r1, ip
 80017d2:	425b      	negs	r3, r3
 80017d4:	18c9      	adds	r1, r1, r3
 80017d6:	003d      	movs	r5, r7
 80017d8:	e58c      	b.n	80012f4 <__aeabi_dsub+0x18c>
 80017da:	4647      	mov	r7, r8
 80017dc:	4337      	orrs	r7, r6
 80017de:	d0ce      	beq.n	800177e <__aeabi_dsub+0x616>
 80017e0:	2207      	movs	r2, #7
 80017e2:	4641      	mov	r1, r8
 80017e4:	4032      	ands	r2, r6
 80017e6:	e649      	b.n	800147c <__aeabi_dsub+0x314>
 80017e8:	2700      	movs	r7, #0
 80017ea:	003a      	movs	r2, r7
 80017ec:	e5e6      	b.n	80013bc <__aeabi_dsub+0x254>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	ff7fffff 	.word	0xff7fffff

080017f8 <__aeabi_d2iz>:
 80017f8:	b530      	push	{r4, r5, lr}
 80017fa:	4d14      	ldr	r5, [pc, #80]	; (800184c <__aeabi_d2iz+0x54>)
 80017fc:	030a      	lsls	r2, r1, #12
 80017fe:	004b      	lsls	r3, r1, #1
 8001800:	0b12      	lsrs	r2, r2, #12
 8001802:	0d5b      	lsrs	r3, r3, #21
 8001804:	0fc9      	lsrs	r1, r1, #31
 8001806:	2400      	movs	r4, #0
 8001808:	42ab      	cmp	r3, r5
 800180a:	dd11      	ble.n	8001830 <__aeabi_d2iz+0x38>
 800180c:	4c10      	ldr	r4, [pc, #64]	; (8001850 <__aeabi_d2iz+0x58>)
 800180e:	42a3      	cmp	r3, r4
 8001810:	dc10      	bgt.n	8001834 <__aeabi_d2iz+0x3c>
 8001812:	2480      	movs	r4, #128	; 0x80
 8001814:	0364      	lsls	r4, r4, #13
 8001816:	4322      	orrs	r2, r4
 8001818:	4c0e      	ldr	r4, [pc, #56]	; (8001854 <__aeabi_d2iz+0x5c>)
 800181a:	1ae4      	subs	r4, r4, r3
 800181c:	2c1f      	cmp	r4, #31
 800181e:	dd0c      	ble.n	800183a <__aeabi_d2iz+0x42>
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <__aeabi_d2iz+0x60>)
 8001822:	1ac3      	subs	r3, r0, r3
 8001824:	40da      	lsrs	r2, r3
 8001826:	0013      	movs	r3, r2
 8001828:	425c      	negs	r4, r3
 800182a:	2900      	cmp	r1, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_d2iz+0x38>
 800182e:	001c      	movs	r4, r3
 8001830:	0020      	movs	r0, r4
 8001832:	bd30      	pop	{r4, r5, pc}
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <__aeabi_d2iz+0x64>)
 8001836:	18cc      	adds	r4, r1, r3
 8001838:	e7fa      	b.n	8001830 <__aeabi_d2iz+0x38>
 800183a:	4d09      	ldr	r5, [pc, #36]	; (8001860 <__aeabi_d2iz+0x68>)
 800183c:	40e0      	lsrs	r0, r4
 800183e:	46ac      	mov	ip, r5
 8001840:	4463      	add	r3, ip
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	4303      	orrs	r3, r0
 8001848:	e7ee      	b.n	8001828 <__aeabi_d2iz+0x30>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	000003fe 	.word	0x000003fe
 8001850:	0000041d 	.word	0x0000041d
 8001854:	00000433 	.word	0x00000433
 8001858:	00000413 	.word	0x00000413
 800185c:	7fffffff 	.word	0x7fffffff
 8001860:	fffffbed 	.word	0xfffffbed

08001864 <__aeabi_i2d>:
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	2800      	cmp	r0, #0
 8001868:	d02d      	beq.n	80018c6 <__aeabi_i2d+0x62>
 800186a:	17c3      	asrs	r3, r0, #31
 800186c:	18c5      	adds	r5, r0, r3
 800186e:	405d      	eors	r5, r3
 8001870:	0fc4      	lsrs	r4, r0, #31
 8001872:	0028      	movs	r0, r5
 8001874:	f000 f862 	bl	800193c <__clzsi2>
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <__aeabi_i2d+0x6c>)
 800187a:	1a1b      	subs	r3, r3, r0
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	0d5b      	lsrs	r3, r3, #21
 8001880:	280a      	cmp	r0, #10
 8001882:	dd15      	ble.n	80018b0 <__aeabi_i2d+0x4c>
 8001884:	380b      	subs	r0, #11
 8001886:	4085      	lsls	r5, r0
 8001888:	2200      	movs	r2, #0
 800188a:	032d      	lsls	r5, r5, #12
 800188c:	0b2d      	lsrs	r5, r5, #12
 800188e:	2100      	movs	r1, #0
 8001890:	0010      	movs	r0, r2
 8001892:	032d      	lsls	r5, r5, #12
 8001894:	0d0a      	lsrs	r2, r1, #20
 8001896:	0b2d      	lsrs	r5, r5, #12
 8001898:	0512      	lsls	r2, r2, #20
 800189a:	432a      	orrs	r2, r5
 800189c:	4d0d      	ldr	r5, [pc, #52]	; (80018d4 <__aeabi_i2d+0x70>)
 800189e:	051b      	lsls	r3, r3, #20
 80018a0:	402a      	ands	r2, r5
 80018a2:	4313      	orrs	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	07e4      	lsls	r4, r4, #31
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	4323      	orrs	r3, r4
 80018ac:	0019      	movs	r1, r3
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	0002      	movs	r2, r0
 80018b2:	0029      	movs	r1, r5
 80018b4:	3215      	adds	r2, #21
 80018b6:	4091      	lsls	r1, r2
 80018b8:	000a      	movs	r2, r1
 80018ba:	210b      	movs	r1, #11
 80018bc:	1a08      	subs	r0, r1, r0
 80018be:	40c5      	lsrs	r5, r0
 80018c0:	032d      	lsls	r5, r5, #12
 80018c2:	0b2d      	lsrs	r5, r5, #12
 80018c4:	e7e3      	b.n	800188e <__aeabi_i2d+0x2a>
 80018c6:	2400      	movs	r4, #0
 80018c8:	2300      	movs	r3, #0
 80018ca:	2500      	movs	r5, #0
 80018cc:	2200      	movs	r2, #0
 80018ce:	e7de      	b.n	800188e <__aeabi_i2d+0x2a>
 80018d0:	0000041e 	.word	0x0000041e
 80018d4:	800fffff 	.word	0x800fffff

080018d8 <__aeabi_ui2d>:
 80018d8:	b510      	push	{r4, lr}
 80018da:	1e04      	subs	r4, r0, #0
 80018dc:	d025      	beq.n	800192a <__aeabi_ui2d+0x52>
 80018de:	f000 f82d 	bl	800193c <__clzsi2>
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <__aeabi_ui2d+0x5c>)
 80018e4:	1a1b      	subs	r3, r3, r0
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	0d5b      	lsrs	r3, r3, #21
 80018ea:	280a      	cmp	r0, #10
 80018ec:	dd12      	ble.n	8001914 <__aeabi_ui2d+0x3c>
 80018ee:	380b      	subs	r0, #11
 80018f0:	4084      	lsls	r4, r0
 80018f2:	2200      	movs	r2, #0
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	0b24      	lsrs	r4, r4, #12
 80018f8:	2100      	movs	r1, #0
 80018fa:	0010      	movs	r0, r2
 80018fc:	0324      	lsls	r4, r4, #12
 80018fe:	0d0a      	lsrs	r2, r1, #20
 8001900:	0b24      	lsrs	r4, r4, #12
 8001902:	0512      	lsls	r2, r2, #20
 8001904:	4322      	orrs	r2, r4
 8001906:	4c0c      	ldr	r4, [pc, #48]	; (8001938 <__aeabi_ui2d+0x60>)
 8001908:	051b      	lsls	r3, r3, #20
 800190a:	4022      	ands	r2, r4
 800190c:	4313      	orrs	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	0859      	lsrs	r1, r3, #1
 8001912:	bd10      	pop	{r4, pc}
 8001914:	0002      	movs	r2, r0
 8001916:	0021      	movs	r1, r4
 8001918:	3215      	adds	r2, #21
 800191a:	4091      	lsls	r1, r2
 800191c:	000a      	movs	r2, r1
 800191e:	210b      	movs	r1, #11
 8001920:	1a08      	subs	r0, r1, r0
 8001922:	40c4      	lsrs	r4, r0
 8001924:	0324      	lsls	r4, r4, #12
 8001926:	0b24      	lsrs	r4, r4, #12
 8001928:	e7e6      	b.n	80018f8 <__aeabi_ui2d+0x20>
 800192a:	2300      	movs	r3, #0
 800192c:	2400      	movs	r4, #0
 800192e:	2200      	movs	r2, #0
 8001930:	e7e2      	b.n	80018f8 <__aeabi_ui2d+0x20>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	0000041e 	.word	0x0000041e
 8001938:	800fffff 	.word	0x800fffff

0800193c <__clzsi2>:
 800193c:	211c      	movs	r1, #28
 800193e:	2301      	movs	r3, #1
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	4298      	cmp	r0, r3
 8001944:	d301      	bcc.n	800194a <__clzsi2+0xe>
 8001946:	0c00      	lsrs	r0, r0, #16
 8001948:	3910      	subs	r1, #16
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	4298      	cmp	r0, r3
 800194e:	d301      	bcc.n	8001954 <__clzsi2+0x18>
 8001950:	0a00      	lsrs	r0, r0, #8
 8001952:	3908      	subs	r1, #8
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	4298      	cmp	r0, r3
 8001958:	d301      	bcc.n	800195e <__clzsi2+0x22>
 800195a:	0900      	lsrs	r0, r0, #4
 800195c:	3904      	subs	r1, #4
 800195e:	a202      	add	r2, pc, #8	; (adr r2, 8001968 <__clzsi2+0x2c>)
 8001960:	5c10      	ldrb	r0, [r2, r0]
 8001962:	1840      	adds	r0, r0, r1
 8001964:	4770      	bx	lr
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	02020304 	.word	0x02020304
 800196c:	01010101 	.word	0x01010101
	...

08001978 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 800197e:	211a      	movs	r1, #26
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2206      	movs	r2, #6
 8001984:	801a      	strh	r2, [r3, #0]
 8001986:	2018      	movs	r0, #24
 8001988:	183b      	adds	r3, r7, r0
 800198a:	2206      	movs	r2, #6
 800198c:	801a      	strh	r2, [r3, #0]
  uint16_t varidx = 0;
 800198e:	231e      	movs	r3, #30
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2200      	movs	r2, #0
 8001994:	801a      	strh	r2, [r3, #0]
  uint16_t eepromstatus = 0, readstatus = 0;
 8001996:	2316      	movs	r3, #22
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	2314      	movs	r3, #20
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
  int16_t x = -1;
 80019a6:	231c      	movs	r3, #28
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2201      	movs	r2, #1
 80019ac:	4252      	negs	r2, r2
 80019ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80019b4:	4ad1      	ldr	r2, [pc, #836]	; (8001cfc <EE_Init+0x384>)
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	801a      	strh	r2, [r3, #0]
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80019bc:	4ad0      	ldr	r2, [pc, #832]	; (8001d00 <EE_Init+0x388>)
 80019be:	183b      	adds	r3, r7, r0
 80019c0:	8812      	ldrh	r2, [r2, #0]
 80019c2:	801a      	strh	r2, [r3, #0]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80019c4:	003b      	movs	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80019ca:	003b      	movs	r3, r7
 80019cc:	4acb      	ldr	r2, [pc, #812]	; (8001cfc <EE_Init+0x384>)
 80019ce:	605a      	str	r2, [r3, #4]
  s_eraseinit.NbPages     = 1;
 80019d0:	003b      	movs	r3, r7
 80019d2:	2201      	movs	r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4aca      	ldr	r2, [pc, #808]	; (8001d04 <EE_Init+0x38c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d100      	bne.n	80019e2 <EE_Init+0x6a>
 80019e0:	e06b      	b.n	8001aba <EE_Init+0x142>
 80019e2:	4ac9      	ldr	r2, [pc, #804]	; (8001d08 <EE_Init+0x390>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d003      	beq.n	80019f0 <EE_Init+0x78>
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d100      	bne.n	80019ee <EE_Init+0x76>
 80019ec:	e145      	b.n	8001c7a <EE_Init+0x302>
 80019ee:	e21e      	b.n	8001e2e <EE_Init+0x4b6>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80019f0:	2318      	movs	r3, #24
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11b      	bne.n	8001a32 <EE_Init+0xba>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80019fa:	4bc0      	ldr	r3, [pc, #768]	; (8001cfc <EE_Init+0x384>)
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 fa3b 	bl	8001e78 <EE_VerifyPageFullyErased>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d000      	beq.n	8001a08 <EE_Init+0x90>
 8001a06:	e221      	b.n	8001e4c <EE_Init+0x4d4>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001a08:	2513      	movs	r5, #19
 8001a0a:	197c      	adds	r4, r7, r5
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	18fa      	adds	r2, r7, r3
 8001a10:	003b      	movs	r3, r7
 8001a12:	0011      	movs	r1, r2
 8001a14:	0018      	movs	r0, r3
 8001a16:	f002 fc09 	bl	800422c <HAL_FLASHEx_Erase>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	7023      	strb	r3, [r4, #0]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001a1e:	197b      	adds	r3, r7, r5
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d100      	bne.n	8001a28 <EE_Init+0xb0>
 8001a26:	e211      	b.n	8001e4c <EE_Init+0x4d4>
          {
            return flashstatus;
 8001a28:	2313      	movs	r3, #19
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	e214      	b.n	8001e5c <EE_Init+0x4e4>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001a32:	2318      	movs	r3, #24
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	4ab2      	ldr	r2, [pc, #712]	; (8001d04 <EE_Init+0x38c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12d      	bne.n	8001a9a <EE_Init+0x122>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001a3e:	4baf      	ldr	r3, [pc, #700]	; (8001cfc <EE_Init+0x384>)
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 fa19 	bl	8001e78 <EE_VerifyPageFullyErased>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d113      	bne.n	8001a72 <EE_Init+0xfa>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001a4a:	2513      	movs	r5, #19
 8001a4c:	197c      	adds	r4, r7, r5
 8001a4e:	230c      	movs	r3, #12
 8001a50:	18fa      	adds	r2, r7, r3
 8001a52:	003b      	movs	r3, r7
 8001a54:	0011      	movs	r1, r2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f002 fbe8 	bl	800422c <HAL_FLASHEx_Erase>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	7023      	strb	r3, [r4, #0]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001a60:	197b      	adds	r3, r7, r5
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <EE_Init+0xfa>
          {
            return flashstatus;
 8001a68:	2313      	movs	r3, #19
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	e1f4      	b.n	8001e5c <EE_Init+0x4e4>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8001a72:	2513      	movs	r5, #19
 8001a74:	197c      	adds	r4, r7, r5
 8001a76:	49a2      	ldr	r1, [pc, #648]	; (8001d00 <EE_Init+0x388>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f002 fa8d 	bl	8003f9c <HAL_FLASH_Program>
 8001a82:	0003      	movs	r3, r0
 8001a84:	7023      	strb	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d100      	bne.n	8001a90 <EE_Init+0x118>
 8001a8e:	e1dd      	b.n	8001e4c <EE_Init+0x4d4>
        {
          return flashstatus;
 8001a90:	2313      	movs	r3, #19
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	e1e0      	b.n	8001e5c <EE_Init+0x4e4>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001a9a:	2513      	movs	r5, #19
 8001a9c:	197c      	adds	r4, r7, r5
 8001a9e:	f000 faab 	bl	8001ff8 <EE_Format>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	7023      	strb	r3, [r4, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001aa6:	197b      	adds	r3, r7, r5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <EE_Init+0x138>
 8001aae:	e1cd      	b.n	8001e4c <EE_Init+0x4d4>
        {
          return flashstatus;
 8001ab0:	2313      	movs	r3, #19
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	e1d0      	b.n	8001e5c <EE_Init+0x4e4>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001aba:	2318      	movs	r3, #24
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d000      	beq.n	8001ac6 <EE_Init+0x14e>
 8001ac4:	e08c      	b.n	8001be0 <EE_Init+0x268>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001ac6:	231e      	movs	r3, #30
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	2200      	movs	r2, #0
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	e04a      	b.n	8001b66 <EE_Init+0x1ee>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001ad0:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <EE_Init+0x394>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	231e      	movs	r3, #30
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	8819      	ldrh	r1, [r3, #0]
 8001adc:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <EE_Init+0x398>)
 8001ade:	0049      	lsls	r1, r1, #1
 8001ae0:	5acb      	ldrh	r3, [r1, r3]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d105      	bne.n	8001af2 <EE_Init+0x17a>
          {
            x = varidx;
 8001ae6:	231c      	movs	r3, #28
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	221e      	movs	r2, #30
 8001aec:	18ba      	adds	r2, r7, r2
 8001aee:	8812      	ldrh	r2, [r2, #0]
 8001af0:	801a      	strh	r2, [r3, #0]
          }
          if (varidx != x)
 8001af2:	231e      	movs	r3, #30
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	881a      	ldrh	r2, [r3, #0]
 8001af8:	231c      	movs	r3, #28
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2100      	movs	r1, #0
 8001afe:	5e5b      	ldrsh	r3, [r3, r1]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d02a      	beq.n	8001b5a <EE_Init+0x1e2>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001b04:	231e      	movs	r3, #30
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <EE_Init+0x398>)
 8001b0c:	0052      	lsls	r2, r2, #1
 8001b0e:	5ad3      	ldrh	r3, [r2, r3]
 8001b10:	2514      	movs	r5, #20
 8001b12:	197c      	adds	r4, r7, r5
 8001b14:	4a7f      	ldr	r2, [pc, #508]	; (8001d14 <EE_Init+0x39c>)
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 f9d9 	bl	8001ed0 <EE_ReadVariable>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001b22:	197b      	adds	r3, r7, r5
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d017      	beq.n	8001b5a <EE_Init+0x1e2>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001b2a:	231e      	movs	r3, #30
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	4b77      	ldr	r3, [pc, #476]	; (8001d10 <EE_Init+0x398>)
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	5ad2      	ldrh	r2, [r2, r3]
 8001b36:	4b77      	ldr	r3, [pc, #476]	; (8001d14 <EE_Init+0x39c>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	2516      	movs	r5, #22
 8001b3c:	197c      	adds	r4, r7, r5
 8001b3e:	0019      	movs	r1, r3
 8001b40:	0010      	movs	r0, r2
 8001b42:	f000 fb13 	bl	800216c <EE_VerifyPageFullWriteVariable>
 8001b46:	0003      	movs	r3, r0
 8001b48:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001b4a:	197b      	adds	r3, r7, r5
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <EE_Init+0x1e2>
              {
                return eepromstatus;
 8001b52:	2316      	movs	r3, #22
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	e180      	b.n	8001e5c <EE_Init+0x4e4>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001b5a:	211e      	movs	r1, #30
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	881a      	ldrh	r2, [r3, #0]
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	3201      	adds	r2, #1
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	231e      	movs	r3, #30
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d9af      	bls.n	8001ad0 <EE_Init+0x158>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001b70:	2513      	movs	r5, #19
 8001b72:	197c      	adds	r4, r7, r5
 8001b74:	4961      	ldr	r1, [pc, #388]	; (8001cfc <EE_Init+0x384>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	2300      	movs	r3, #0
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f002 fa0e 	bl	8003f9c <HAL_FLASH_Program>
 8001b80:	0003      	movs	r3, r0
 8001b82:	7023      	strb	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001b84:	197b      	adds	r3, r7, r5
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <EE_Init+0x21e>
        {
          return flashstatus;
 8001b8c:	2313      	movs	r3, #19
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	e162      	b.n	8001e5c <EE_Init+0x4e4>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001b96:	003b      	movs	r3, r7
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	4a58      	ldr	r2, [pc, #352]	; (8001d00 <EE_Init+0x388>)
 8001ba0:	605a      	str	r2, [r3, #4]
        s_eraseinit.NbPages     = 1;
 8001ba2:	003b      	movs	r3, r7
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	609a      	str	r2, [r3, #8]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <EE_Init+0x388>)
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f964 	bl	8001e78 <EE_VerifyPageFullyErased>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d000      	beq.n	8001bb6 <EE_Init+0x23e>
 8001bb4:	e14c      	b.n	8001e50 <EE_Init+0x4d8>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001bb6:	2513      	movs	r5, #19
 8001bb8:	197c      	adds	r4, r7, r5
 8001bba:	230c      	movs	r3, #12
 8001bbc:	18fa      	adds	r2, r7, r3
 8001bbe:	003b      	movs	r3, r7
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f002 fb32 	bl	800422c <HAL_FLASHEx_Erase>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	7023      	strb	r3, [r4, #0]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001bcc:	197b      	adds	r3, r7, r5
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d100      	bne.n	8001bd6 <EE_Init+0x25e>
 8001bd4:	e13c      	b.n	8001e50 <EE_Init+0x4d8>
          {
            return flashstatus;
 8001bd6:	2313      	movs	r3, #19
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	e13d      	b.n	8001e5c <EE_Init+0x4e4>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001be0:	2318      	movs	r3, #24
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <EE_Init+0x390>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d136      	bne.n	8001c5a <EE_Init+0x2e2>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001bec:	003b      	movs	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8001bf2:	003b      	movs	r3, r7
 8001bf4:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <EE_Init+0x388>)
 8001bf6:	605a      	str	r2, [r3, #4]
        s_eraseinit.NbPages     = 1;
 8001bf8:	003b      	movs	r3, r7
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	609a      	str	r2, [r3, #8]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <EE_Init+0x388>)
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 f939 	bl	8001e78 <EE_VerifyPageFullyErased>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d113      	bne.n	8001c32 <EE_Init+0x2ba>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001c0a:	2513      	movs	r5, #19
 8001c0c:	197c      	adds	r4, r7, r5
 8001c0e:	230c      	movs	r3, #12
 8001c10:	18fa      	adds	r2, r7, r3
 8001c12:	003b      	movs	r3, r7
 8001c14:	0011      	movs	r1, r2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f002 fb08 	bl	800422c <HAL_FLASHEx_Erase>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	7023      	strb	r3, [r4, #0]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001c20:	197b      	adds	r3, r7, r5
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <EE_Init+0x2ba>
          {
            return flashstatus;
 8001c28:	2313      	movs	r3, #19
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	e114      	b.n	8001e5c <EE_Init+0x4e4>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001c32:	2513      	movs	r5, #19
 8001c34:	197c      	adds	r4, r7, r5
 8001c36:	4931      	ldr	r1, [pc, #196]	; (8001cfc <EE_Init+0x384>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f002 f9ad 	bl	8003f9c <HAL_FLASH_Program>
 8001c42:	0003      	movs	r3, r0
 8001c44:	7023      	strb	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001c46:	197b      	adds	r3, r7, r5
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d100      	bne.n	8001c50 <EE_Init+0x2d8>
 8001c4e:	e0ff      	b.n	8001e50 <EE_Init+0x4d8>
        {
          return flashstatus;
 8001c50:	2313      	movs	r3, #19
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	e100      	b.n	8001e5c <EE_Init+0x4e4>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001c5a:	2513      	movs	r5, #19
 8001c5c:	197c      	adds	r4, r7, r5
 8001c5e:	f000 f9cb 	bl	8001ff8 <EE_Format>
 8001c62:	0003      	movs	r3, r0
 8001c64:	7023      	strb	r3, [r4, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001c66:	197b      	adds	r3, r7, r5
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d100      	bne.n	8001c70 <EE_Init+0x2f8>
 8001c6e:	e0ef      	b.n	8001e50 <EE_Init+0x4d8>
        {
          return flashstatus;
 8001c70:	2313      	movs	r3, #19
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	e0f0      	b.n	8001e5c <EE_Init+0x4e4>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001c7a:	2318      	movs	r3, #24
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10f      	bne.n	8001ca4 <EE_Init+0x32c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001c84:	2513      	movs	r5, #19
 8001c86:	197c      	adds	r4, r7, r5
 8001c88:	f000 f9b6 	bl	8001ff8 <EE_Format>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	7023      	strb	r3, [r4, #0]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001c90:	197b      	adds	r3, r7, r5
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d100      	bne.n	8001c9a <EE_Init+0x322>
 8001c98:	e0dc      	b.n	8001e54 <EE_Init+0x4dc>
        {
          return flashstatus;
 8001c9a:	2313      	movs	r3, #19
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	e0db      	b.n	8001e5c <EE_Init+0x4e4>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8001ca4:	2318      	movs	r3, #24
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <EE_Init+0x390>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d133      	bne.n	8001d18 <EE_Init+0x3a0>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001cb0:	003b      	movs	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8001cb6:	003b      	movs	r3, r7
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <EE_Init+0x388>)
 8001cba:	605a      	str	r2, [r3, #4]
        s_eraseinit.NbPages     = 1;
 8001cbc:	003b      	movs	r3, r7
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	609a      	str	r2, [r3, #8]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <EE_Init+0x388>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 f8d7 	bl	8001e78 <EE_VerifyPageFullyErased>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d000      	beq.n	8001cd0 <EE_Init+0x358>
 8001cce:	e0c1      	b.n	8001e54 <EE_Init+0x4dc>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001cd0:	2513      	movs	r5, #19
 8001cd2:	197c      	adds	r4, r7, r5
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	18fa      	adds	r2, r7, r3
 8001cd8:	003b      	movs	r3, r7
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f002 faa5 	bl	800422c <HAL_FLASHEx_Erase>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	7023      	strb	r3, [r4, #0]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001ce6:	197b      	adds	r3, r7, r5
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d100      	bne.n	8001cf0 <EE_Init+0x378>
 8001cee:	e0b1      	b.n	8001e54 <EE_Init+0x4dc>
          {
            return flashstatus;
 8001cf0:	2313      	movs	r3, #19
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	e0b0      	b.n	8001e5c <EE_Init+0x4e4>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	08006000 	.word	0x08006000
 8001d00:	08006800 	.word	0x08006800
 8001d04:	0000eeee 	.word	0x0000eeee
 8001d08:	0000ffff 	.word	0x0000ffff
 8001d0c:	08006006 	.word	0x08006006
 8001d10:	200000d4 	.word	0x200000d4
 8001d14:	2000009c 	.word	0x2000009c
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001d18:	231e      	movs	r3, #30
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	e04a      	b.n	8001db8 <EE_Init+0x440>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001d22:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <EE_Init+0x4ec>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	231e      	movs	r3, #30
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	8819      	ldrh	r1, [r3, #0]
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <EE_Init+0x4f0>)
 8001d30:	0049      	lsls	r1, r1, #1
 8001d32:	5acb      	ldrh	r3, [r1, r3]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d105      	bne.n	8001d44 <EE_Init+0x3cc>
          {
            x = varidx;
 8001d38:	231c      	movs	r3, #28
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	221e      	movs	r2, #30
 8001d3e:	18ba      	adds	r2, r7, r2
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	801a      	strh	r2, [r3, #0]
          }
          if (varidx != x)
 8001d44:	231e      	movs	r3, #30
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	881a      	ldrh	r2, [r3, #0]
 8001d4a:	231c      	movs	r3, #28
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5e5b      	ldrsh	r3, [r3, r1]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d02a      	beq.n	8001dac <EE_Init+0x434>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001d56:	231e      	movs	r3, #30
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <EE_Init+0x4f0>)
 8001d5e:	0052      	lsls	r2, r2, #1
 8001d60:	5ad3      	ldrh	r3, [r2, r3]
 8001d62:	2514      	movs	r5, #20
 8001d64:	197c      	adds	r4, r7, r5
 8001d66:	4a41      	ldr	r2, [pc, #260]	; (8001e6c <EE_Init+0x4f4>)
 8001d68:	0011      	movs	r1, r2
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f8b0 	bl	8001ed0 <EE_ReadVariable>
 8001d70:	0003      	movs	r3, r0
 8001d72:	8023      	strh	r3, [r4, #0]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001d74:	197b      	adds	r3, r7, r5
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d017      	beq.n	8001dac <EE_Init+0x434>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001d7c:	231e      	movs	r3, #30
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	881a      	ldrh	r2, [r3, #0]
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <EE_Init+0x4f0>)
 8001d84:	0052      	lsls	r2, r2, #1
 8001d86:	5ad2      	ldrh	r2, [r2, r3]
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <EE_Init+0x4f4>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	2516      	movs	r5, #22
 8001d8e:	197c      	adds	r4, r7, r5
 8001d90:	0019      	movs	r1, r3
 8001d92:	0010      	movs	r0, r2
 8001d94:	f000 f9ea 	bl	800216c <EE_VerifyPageFullWriteVariable>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	8023      	strh	r3, [r4, #0]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001d9c:	197b      	adds	r3, r7, r5
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <EE_Init+0x434>
              {
                return eepromstatus;
 8001da4:	2316      	movs	r3, #22
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	e057      	b.n	8001e5c <EE_Init+0x4e4>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001dac:	211e      	movs	r1, #30
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	3201      	adds	r2, #1
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	231e      	movs	r3, #30
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d9af      	bls.n	8001d22 <EE_Init+0x3aa>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8001dc2:	2513      	movs	r5, #19
 8001dc4:	197c      	adds	r4, r7, r5
 8001dc6:	492a      	ldr	r1, [pc, #168]	; (8001e70 <EE_Init+0x4f8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f002 f8e5 	bl	8003f9c <HAL_FLASH_Program>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	7023      	strb	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001dd6:	197b      	adds	r3, r7, r5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <EE_Init+0x470>
        {
          return flashstatus;
 8001dde:	2313      	movs	r3, #19
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	e039      	b.n	8001e5c <EE_Init+0x4e4>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001de8:	003b      	movs	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8001dee:	003b      	movs	r3, r7
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <EE_Init+0x4fc>)
 8001df2:	605a      	str	r2, [r3, #4]
        s_eraseinit.NbPages     = 1;
 8001df4:	003b      	movs	r3, r7
 8001df6:	2201      	movs	r2, #1
 8001df8:	609a      	str	r2, [r3, #8]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <EE_Init+0x4fc>)
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f83b 	bl	8001e78 <EE_VerifyPageFullyErased>
 8001e02:	1e03      	subs	r3, r0, #0
 8001e04:	d126      	bne.n	8001e54 <EE_Init+0x4dc>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001e06:	2513      	movs	r5, #19
 8001e08:	197c      	adds	r4, r7, r5
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	18fa      	adds	r2, r7, r3
 8001e0e:	003b      	movs	r3, r7
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f002 fa0a 	bl	800422c <HAL_FLASHEx_Erase>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	7023      	strb	r3, [r4, #0]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001e1c:	197b      	adds	r3, r7, r5
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d017      	beq.n	8001e54 <EE_Init+0x4dc>
          {
            return flashstatus;
 8001e24:	2313      	movs	r3, #19
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	e016      	b.n	8001e5c <EE_Init+0x4e4>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 8001e2e:	2513      	movs	r5, #19
 8001e30:	197c      	adds	r4, r7, r5
 8001e32:	f000 f8e1 	bl	8001ff8 <EE_Format>
 8001e36:	0003      	movs	r3, r0
 8001e38:	7023      	strb	r3, [r4, #0]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 8001e3a:	197b      	adds	r3, r7, r5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <EE_Init+0x4e0>
      {
        return flashstatus;
 8001e42:	2313      	movs	r3, #19
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	e007      	b.n	8001e5c <EE_Init+0x4e4>
      break;
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	e004      	b.n	8001e5a <EE_Init+0x4e2>
      break;
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	e002      	b.n	8001e5a <EE_Init+0x4e2>
      break;
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	e000      	b.n	8001e5a <EE_Init+0x4e2>
      }
      break;
 8001e58:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b008      	add	sp, #32
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	08006806 	.word	0x08006806
 8001e68:	200000d4 	.word	0x200000d4
 8001e6c:	2000009c 	.word	0x2000009c
 8001e70:	08006800 	.word	0x08006800
 8001e74:	08006000 	.word	0x08006000

08001e78 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8001e84:	230a      	movs	r3, #10
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <EE_VerifyPageFullyErased+0x4c>)
 8001e8a:	801a      	strh	r2, [r3, #0]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001e8c:	e00f      	b.n	8001eae <EE_VerifyPageFullyErased+0x36>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	210a      	movs	r1, #10
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	801a      	strh	r2, [r3, #0]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <EE_VerifyPageFullyErased+0x50>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d002      	beq.n	8001ea8 <EE_VerifyPageFullyErased+0x30>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]

      break;
 8001ea6:	e006      	b.n	8001eb6 <EE_VerifyPageFullyErased+0x3e>
    }
    /* Next address location */
    Address = Address + 4;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <EE_VerifyPageFullyErased+0x54>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d9eb      	bls.n	8001e8e <EE_VerifyPageFullyErased+0x16>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	b29b      	uxth	r3, r3
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	00005555 	.word	0x00005555
 8001ec8:	0000ffff 	.word	0x0000ffff
 8001ecc:	080063ff 	.word	0x080063ff

08001ed0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	801a      	strh	r2, [r3, #0]
  uint16_t validpage = PAGE0;
 8001ede:	210e      	movs	r1, #14
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <EE_ReadVariable+0xb8>)
 8001eec:	801a      	strh	r2, [r3, #0]
 8001eee:	2316      	movs	r3, #22
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	801a      	strh	r2, [r3, #0]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <EE_ReadVariable+0xbc>)
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <EE_ReadVariable+0xbc>)
 8001efc:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001efe:	000d      	movs	r5, r1
 8001f00:	187c      	adds	r4, r7, r1
 8001f02:	2000      	movs	r0, #0
 8001f04:	f000 f8da 	bl	80020bc <EE_FindValidPage>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	8023      	strh	r3, [r4, #0]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001f0c:	0029      	movs	r1, r5
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	2bab      	cmp	r3, #171	; 0xab
 8001f14:	d101      	bne.n	8001f1a <EE_ReadVariable+0x4a>
  {
    return  NO_VALID_PAGE;
 8001f16:	23ab      	movs	r3, #171	; 0xab
 8001f18:	e031      	b.n	8001f7e <EE_ReadVariable+0xae>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8001f1a:	220e      	movs	r2, #14
 8001f1c:	18bb      	adds	r3, r7, r2
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	491b      	ldr	r1, [pc, #108]	; (8001f90 <EE_ReadVariable+0xc0>)
 8001f22:	468c      	mov	ip, r1
 8001f24:	4463      	add	r3, ip
 8001f26:	029b      	lsls	r3, r3, #10
 8001f28:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8001f2a:	18bb      	adds	r3, r7, r2
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <EE_ReadVariable+0xc4>)
 8001f34:	4694      	mov	ip, r2
 8001f36:	4463      	add	r3, ip
 8001f38:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8001f3a:	e018      	b.n	8001f6e <EE_ReadVariable+0x9e>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	210c      	movs	r1, #12
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	801a      	strh	r2, [r3, #0]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 8001f46:	187a      	adds	r2, r7, r1
 8001f48:	1dbb      	adds	r3, r7, #6
 8001f4a:	8812      	ldrh	r2, [r2, #0]
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d10a      	bne.n	8001f68 <EE_ReadVariable+0x98>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	3b02      	subs	r3, #2
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001f5e:	2316      	movs	r3, #22
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2200      	movs	r2, #0
 8001f64:	801a      	strh	r2, [r3, #0]

      break;
 8001f66:	e007      	b.n	8001f78 <EE_ReadVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3302      	adds	r3, #2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8e1      	bhi.n	8001f3c <EE_ReadVariable+0x6c>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8001f78:	2316      	movs	r3, #22
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	881b      	ldrh	r3, [r3, #0]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	00005555 	.word	0x00005555
 8001f8c:	08006000 	.word	0x08006000
 8001f90:	00020018 	.word	0x00020018
 8001f94:	08005ffe 	.word	0x08005ffe

08001f98 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	1dbb      	adds	r3, r7, #6
 8001fa2:	801a      	strh	r2, [r3, #0]
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	1c0a      	adds	r2, r1, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
  uint16_t Status = 0;
 8001faa:	250e      	movs	r5, #14
 8001fac:	197b      	adds	r3, r7, r5
 8001fae:	2200      	movs	r2, #0
 8001fb0:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001fb2:	197c      	adds	r4, r7, r5
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	1dbb      	adds	r3, r7, #6
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f8d4 	bl	800216c <EE_VerifyPageFullWriteVariable>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	8023      	strh	r3, [r4, #0]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001fc8:	197b      	adds	r3, r7, r5
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d10b      	bne.n	8001fe8 <EE_WriteVariable+0x50>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8001fd0:	230e      	movs	r3, #14
 8001fd2:	18fc      	adds	r4, r7, r3
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	1dbb      	adds	r3, r7, #6
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 f958 	bl	8002294 <EE_PageTransfer>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	8023      	strh	r3, [r4, #0]
  }

  /* Return last operation status */
  return Status;
 8001fe8:	230e      	movs	r3, #14
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	881b      	ldrh	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ff8 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001ffe:	2317      	movs	r3, #23
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
  uint32_t page_error = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <EE_Format+0xbc>)
 8002014:	605a      	str	r2, [r3, #4]
  s_eraseinit.NbPages     = 1;
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2201      	movs	r2, #1
 800201a:	609a      	str	r2, [r3, #8]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <EE_Format+0xbc>)
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff ff2a 	bl	8001e78 <EE_VerifyPageFullyErased>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d112      	bne.n	800204e <EE_Format+0x56>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002028:	2517      	movs	r5, #23
 800202a:	197c      	adds	r4, r7, r5
 800202c:	2310      	movs	r3, #16
 800202e:	18fa      	adds	r2, r7, r3
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f002 f8f9 	bl	800422c <HAL_FLASHEx_Erase>
 800203a:	0003      	movs	r3, r0
 800203c:	7023      	strb	r3, [r4, #0]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800203e:	197b      	adds	r3, r7, r5
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <EE_Format+0x56>
    {
      return flashstatus;
 8002046:	2317      	movs	r3, #23
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	e02e      	b.n	80020ac <EE_Format+0xb4>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800204e:	2517      	movs	r5, #23
 8002050:	197c      	adds	r4, r7, r5
 8002052:	4918      	ldr	r1, [pc, #96]	; (80020b4 <EE_Format+0xbc>)
 8002054:	2200      	movs	r2, #0
 8002056:	2300      	movs	r3, #0
 8002058:	2001      	movs	r0, #1
 800205a:	f001 ff9f 	bl	8003f9c <HAL_FLASH_Program>
 800205e:	0003      	movs	r3, r0
 8002060:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002062:	197b      	adds	r3, r7, r5
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <EE_Format+0x7a>
  {
    return flashstatus;
 800206a:	2317      	movs	r3, #23
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	e01c      	b.n	80020ac <EE_Format+0xb4>
  }

  s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <EE_Format+0xc0>)
 8002076:	605a      	str	r2, [r3, #4]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <EE_Format+0xc0>)
 800207a:	0018      	movs	r0, r3
 800207c:	f7ff fefc 	bl	8001e78 <EE_VerifyPageFullyErased>
 8002080:	1e03      	subs	r3, r0, #0
 8002082:	d112      	bne.n	80020aa <EE_Format+0xb2>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002084:	2517      	movs	r5, #23
 8002086:	197c      	adds	r4, r7, r5
 8002088:	2310      	movs	r3, #16
 800208a:	18fa      	adds	r2, r7, r3
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f002 f8cb 	bl	800422c <HAL_FLASHEx_Erase>
 8002096:	0003      	movs	r3, r0
 8002098:	7023      	strb	r3, [r4, #0]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800209a:	197b      	adds	r3, r7, r5
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <EE_Format+0xb2>
    {
      return flashstatus;
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	e000      	b.n	80020ac <EE_Format+0xb4>
    }
  }
  
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bdb0      	pop	{r4, r5, r7, pc}
 80020b4:	08006000 	.word	0x08006000
 80020b8:	08006800 	.word	0x08006800

080020bc <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	0002      	movs	r2, r0
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	701a      	strb	r2, [r3, #0]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80020c8:	210e      	movs	r1, #14
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	2206      	movs	r2, #6
 80020ce:	801a      	strh	r2, [r3, #0]
 80020d0:	200c      	movs	r0, #12
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	2206      	movs	r2, #6
 80020d6:	801a      	strh	r2, [r3, #0]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <EE_FindValidPage+0xa4>)
 80020da:	187b      	adds	r3, r7, r1
 80020dc:	8812      	ldrh	r2, [r2, #0]
 80020de:	801a      	strh	r2, [r3, #0]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <EE_FindValidPage+0xa8>)
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	801a      	strh	r2, [r3, #0]

  /* Write or read operation */
  switch (Operation)
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d021      	beq.n	8002134 <EE_FindValidPage+0x78>
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d12f      	bne.n	8002154 <EE_FindValidPage+0x98>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 80020f4:	230c      	movs	r3, #12
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <EE_FindValidPage+0x56>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 80020fe:	230e      	movs	r3, #14
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <EE_FindValidPage+0xac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <EE_FindValidPage+0x52>
        {
          return PAGE0;         /* Page0 valid */
 800210a:	2300      	movs	r3, #0
 800210c:	e023      	b.n	8002156 <EE_FindValidPage+0x9a>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800210e:	2320      	movs	r3, #32
 8002110:	e021      	b.n	8002156 <EE_FindValidPage+0x9a>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8002112:	230e      	movs	r3, #14
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <EE_FindValidPage+0x74>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 800211c:	230c      	movs	r3, #12
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	4a11      	ldr	r2, [pc, #68]	; (8002168 <EE_FindValidPage+0xac>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <EE_FindValidPage+0x70>
        {
          return PAGE1;         /* Page1 valid */
 8002128:	2320      	movs	r3, #32
 800212a:	e014      	b.n	8002156 <EE_FindValidPage+0x9a>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800212c:	2300      	movs	r3, #0
 800212e:	e012      	b.n	8002156 <EE_FindValidPage+0x9a>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002130:	23ab      	movs	r3, #171	; 0xab
 8002132:	e010      	b.n	8002156 <EE_FindValidPage+0x9a>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8002134:	230e      	movs	r3, #14
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <EE_FindValidPage+0x86>
      {
        return PAGE0;           /* Page0 valid */
 800213e:	2300      	movs	r3, #0
 8002140:	e009      	b.n	8002156 <EE_FindValidPage+0x9a>
      }
      else if (pagestatus1 == VALID_PAGE)
 8002142:	230c      	movs	r3, #12
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <EE_FindValidPage+0x94>
      {
        return PAGE1;           /* Page1 valid */
 800214c:	2320      	movs	r3, #32
 800214e:	e002      	b.n	8002156 <EE_FindValidPage+0x9a>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002150:	23ab      	movs	r3, #171	; 0xab
 8002152:	e000      	b.n	8002156 <EE_FindValidPage+0x9a>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8002154:	2300      	movs	r3, #0
  }
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	08006000 	.word	0x08006000
 8002164:	08006800 	.word	0x08006800
 8002168:	0000eeee 	.word	0x0000eeee

0800216c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	0002      	movs	r2, r0
 8002174:	230e      	movs	r3, #14
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	230c      	movs	r3, #12
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	1c0a      	adds	r2, r1, #0
 8002180:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8002182:	2313      	movs	r3, #19
 8002184:	2208      	movs	r2, #8
 8002186:	4694      	mov	ip, r2
 8002188:	44bc      	add	ip, r7
 800218a:	4463      	add	r3, ip
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
  uint16_t validpage = PAGE0;
 8002190:	2110      	movs	r1, #16
 8002192:	2008      	movs	r0, #8
 8002194:	183b      	adds	r3, r7, r0
 8002196:	185b      	adds	r3, r3, r1
 8002198:	2200      	movs	r2, #0
 800219a:	801a      	strh	r2, [r3, #0]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <EE_VerifyPageFullWriteVariable+0x118>)
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	4b39      	ldr	r3, [pc, #228]	; (8002288 <EE_VerifyPageFullWriteVariable+0x11c>)
 80021a2:	617b      	str	r3, [r7, #20]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80021a4:	183b      	adds	r3, r7, r0
 80021a6:	185c      	adds	r4, r3, r1
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff ff87 	bl	80020bc <EE_FindValidPage>
 80021ae:	0003      	movs	r3, r0
 80021b0:	8023      	strh	r3, [r4, #0]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80021b2:	2110      	movs	r1, #16
 80021b4:	2008      	movs	r0, #8
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	185b      	adds	r3, r3, r1
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	2bab      	cmp	r3, #171	; 0xab
 80021be:	d101      	bne.n	80021c4 <EE_VerifyPageFullWriteVariable+0x58>
  {
    return  NO_VALID_PAGE;
 80021c0:	23ab      	movs	r3, #171	; 0xab
 80021c2:	e05b      	b.n	800227c <EE_VerifyPageFullWriteVariable+0x110>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80021c4:	2210      	movs	r2, #16
 80021c6:	2008      	movs	r0, #8
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	492f      	ldr	r1, [pc, #188]	; (800228c <EE_VerifyPageFullWriteVariable+0x120>)
 80021d0:	468c      	mov	ip, r1
 80021d2:	4463      	add	r3, ip
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	61fb      	str	r3, [r7, #28]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <EE_VerifyPageFullWriteVariable+0x124>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	4463      	add	r3, ip
 80021e8:	617b      	str	r3, [r7, #20]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80021ea:	e042      	b.n	8002272 <EE_VerifyPageFullWriteVariable+0x106>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	d13b      	bne.n	800226c <EE_VerifyPageFullWriteVariable+0x100>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 80021f4:	230c      	movs	r3, #12
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	001d      	movs	r5, r3
 80021fe:	2300      	movs	r3, #0
 8002200:	001e      	movs	r6, r3
 8002202:	2313      	movs	r3, #19
 8002204:	2208      	movs	r2, #8
 8002206:	18ba      	adds	r2, r7, r2
 8002208:	18d4      	adds	r4, r2, r3
 800220a:	69f9      	ldr	r1, [r7, #28]
 800220c:	002a      	movs	r2, r5
 800220e:	0033      	movs	r3, r6
 8002210:	2001      	movs	r0, #1
 8002212:	f001 fec3 	bl	8003f9c <HAL_FLASH_Program>
 8002216:	0003      	movs	r3, r0
 8002218:	7023      	strb	r3, [r4, #0]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800221a:	2313      	movs	r3, #19
 800221c:	2208      	movs	r2, #8
 800221e:	4694      	mov	ip, r2
 8002220:	44bc      	add	ip, r7
 8002222:	4463      	add	r3, ip
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <EE_VerifyPageFullWriteVariable+0xce>
      {
        return flashstatus;
 800222a:	2313      	movs	r3, #19
 800222c:	2208      	movs	r2, #8
 800222e:	4694      	mov	ip, r2
 8002230:	44bc      	add	ip, r7
 8002232:	4463      	add	r3, ip
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	e020      	b.n	800227c <EE_VerifyPageFullWriteVariable+0x110>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	1c99      	adds	r1, r3, #2
 800223e:	230e      	movs	r3, #14
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	2513      	movs	r5, #19
 800224e:	2608      	movs	r6, #8
 8002250:	19bb      	adds	r3, r7, r6
 8002252:	195c      	adds	r4, r3, r5
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2001      	movs	r0, #1
 800225a:	f001 fe9f 	bl	8003f9c <HAL_FLASH_Program>
 800225e:	0003      	movs	r3, r0
 8002260:	7023      	strb	r3, [r4, #0]
      /* Return program operation status */
      return flashstatus;
 8002262:	19bb      	adds	r3, r7, r6
 8002264:	195b      	adds	r3, r3, r5
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	e007      	b.n	800227c <EE_VerifyPageFullWriteVariable+0x110>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3304      	adds	r3, #4
 8002270:	61fb      	str	r3, [r7, #28]
  while (address < pageendaddress)
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	429a      	cmp	r2, r3
 8002278:	d3b8      	bcc.n	80021ec <EE_VerifyPageFullWriteVariable+0x80>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800227a:	2380      	movs	r3, #128	; 0x80
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b009      	add	sp, #36	; 0x24
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002284:	08006000 	.word	0x08006000
 8002288:	08006400 	.word	0x08006400
 800228c:	00020018 	.word	0x00020018
 8002290:	08005fff 	.word	0x08005fff

08002294 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8002294:	b5b0      	push	{r4, r5, r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	0002      	movs	r2, r0
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	1c0a      	adds	r2, r1, #0
 80022a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 80022a6:	2325      	movs	r3, #37	; 0x25
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 80022ae:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <EE_PageTransfer+0x1cc>)
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 80022b6:	2122      	movs	r1, #34	; 0x22
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2200      	movs	r2, #0
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	2326      	movs	r3, #38	; 0x26
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2200      	movs	r2, #0
 80022c4:	801a      	strh	r2, [r3, #0]
  uint16_t eepromstatus = 0, readstatus = 0;
 80022c6:	2320      	movs	r3, #32
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2200      	movs	r2, #0
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	231e      	movs	r3, #30
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	801a      	strh	r2, [r3, #0]
  uint32_t page_error = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80022da:	000d      	movs	r5, r1
 80022dc:	187c      	adds	r4, r7, r1
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff feec 	bl	80020bc <EE_FindValidPage>
 80022e4:	0003      	movs	r3, r0
 80022e6:	8023      	strh	r3, [r4, #0]

  if (validpage == PAGE1)       /* Page1 valid */
 80022e8:	0029      	movs	r1, r5
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d104      	bne.n	80022fc <EE_PageTransfer+0x68>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 80022f2:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <EE_PageTransfer+0x1cc>)
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_BASE_ADDRESS;
 80022f6:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <EE_PageTransfer+0x1d0>)
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fa:	e00b      	b.n	8002314 <EE_PageTransfer+0x80>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 80022fc:	2322      	movs	r3, #34	; 0x22
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d104      	bne.n	8002310 <EE_PageTransfer+0x7c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 8002306:	4b57      	ldr	r3, [pc, #348]	; (8002464 <EE_PageTransfer+0x1d0>)
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
 800230a:	4b55      	ldr	r3, [pc, #340]	; (8002460 <EE_PageTransfer+0x1cc>)
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	e001      	b.n	8002314 <EE_PageTransfer+0x80>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8002310:	23ab      	movs	r3, #171	; 0xab
 8002312:	e0a0      	b.n	8002456 <EE_PageTransfer+0x1c2>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002314:	2525      	movs	r5, #37	; 0x25
 8002316:	197c      	adds	r4, r7, r5
 8002318:	4a53      	ldr	r2, [pc, #332]	; (8002468 <EE_PageTransfer+0x1d4>)
 800231a:	2300      	movs	r3, #0
 800231c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800231e:	2001      	movs	r0, #1
 8002320:	f001 fe3c 	bl	8003f9c <HAL_FLASH_Program>
 8002324:	0003      	movs	r3, r0
 8002326:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002328:	197b      	adds	r3, r7, r5
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <EE_PageTransfer+0xa6>
  {
    return flashstatus;
 8002330:	2325      	movs	r3, #37	; 0x25
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	e08d      	b.n	8002456 <EE_PageTransfer+0x1c2>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800233a:	2520      	movs	r5, #32
 800233c:	197c      	adds	r4, r7, r5
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	1dbb      	adds	r3, r7, #6
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ff0f 	bl	800216c <EE_VerifyPageFullWriteVariable>
 800234e:	0003      	movs	r3, r0
 8002350:	8023      	strh	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 8002352:	197b      	adds	r3, r7, r5
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <EE_PageTransfer+0xce>
  {
    return eepromstatus;
 800235a:	2320      	movs	r3, #32
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	e079      	b.n	8002456 <EE_PageTransfer+0x1c2>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002362:	2326      	movs	r3, #38	; 0x26
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2200      	movs	r2, #0
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e03a      	b.n	80023e2 <EE_PageTransfer+0x14e>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800236c:	2326      	movs	r3, #38	; 0x26
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <EE_PageTransfer+0x1d8>)
 8002374:	0052      	lsls	r2, r2, #1
 8002376:	5ad3      	ldrh	r3, [r2, r3]
 8002378:	1dba      	adds	r2, r7, #6
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d02a      	beq.n	80023d6 <EE_PageTransfer+0x142>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8002380:	2326      	movs	r3, #38	; 0x26
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	881a      	ldrh	r2, [r3, #0]
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <EE_PageTransfer+0x1d8>)
 8002388:	0052      	lsls	r2, r2, #1
 800238a:	5ad3      	ldrh	r3, [r2, r3]
 800238c:	251e      	movs	r5, #30
 800238e:	197c      	adds	r4, r7, r5
 8002390:	4a37      	ldr	r2, [pc, #220]	; (8002470 <EE_PageTransfer+0x1dc>)
 8002392:	0011      	movs	r1, r2
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff fd9b 	bl	8001ed0 <EE_ReadVariable>
 800239a:	0003      	movs	r3, r0
 800239c:	8023      	strh	r3, [r4, #0]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 800239e:	197b      	adds	r3, r7, r5
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d017      	beq.n	80023d6 <EE_PageTransfer+0x142>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80023a6:	2326      	movs	r3, #38	; 0x26
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	4b2f      	ldr	r3, [pc, #188]	; (800246c <EE_PageTransfer+0x1d8>)
 80023ae:	0052      	lsls	r2, r2, #1
 80023b0:	5ad2      	ldrh	r2, [r2, r3]
 80023b2:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <EE_PageTransfer+0x1dc>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	2520      	movs	r5, #32
 80023b8:	197c      	adds	r4, r7, r5
 80023ba:	0019      	movs	r1, r3
 80023bc:	0010      	movs	r0, r2
 80023be:	f7ff fed5 	bl	800216c <EE_VerifyPageFullWriteVariable>
 80023c2:	0003      	movs	r3, r0
 80023c4:	8023      	strh	r3, [r4, #0]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 80023c6:	197b      	adds	r3, r7, r5
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <EE_PageTransfer+0x142>
        {
          return eepromstatus;
 80023ce:	2320      	movs	r3, #32
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	e03f      	b.n	8002456 <EE_PageTransfer+0x1c2>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80023d6:	2126      	movs	r1, #38	; 0x26
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	3201      	adds	r2, #1
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	2326      	movs	r3, #38	; 0x26
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d9bf      	bls.n	800236c <EE_PageTransfer+0xd8>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80023ec:	210c      	movs	r1, #12
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
  s_eraseinit.PageAddress = oldpageid;
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f8:	605a      	str	r2, [r3, #4]
  s_eraseinit.NbPages     = 1;
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	2201      	movs	r2, #1
 80023fe:	609a      	str	r2, [r3, #8]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002400:	2525      	movs	r5, #37	; 0x25
 8002402:	197c      	adds	r4, r7, r5
 8002404:	2318      	movs	r3, #24
 8002406:	18fa      	adds	r2, r7, r3
 8002408:	187b      	adds	r3, r7, r1
 800240a:	0011      	movs	r1, r2
 800240c:	0018      	movs	r0, r3
 800240e:	f001 ff0d 	bl	800422c <HAL_FLASHEx_Erase>
 8002412:	0003      	movs	r3, r0
 8002414:	7023      	strb	r3, [r4, #0]
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8002416:	197b      	adds	r3, r7, r5
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <EE_PageTransfer+0x194>
  {
    return flashstatus;
 800241e:	2325      	movs	r3, #37	; 0x25
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	e016      	b.n	8002456 <EE_PageTransfer+0x1c2>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8002428:	2525      	movs	r5, #37	; 0x25
 800242a:	197c      	adds	r4, r7, r5
 800242c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800242e:	2200      	movs	r2, #0
 8002430:	2300      	movs	r3, #0
 8002432:	2001      	movs	r0, #1
 8002434:	f001 fdb2 	bl	8003f9c <HAL_FLASH_Program>
 8002438:	0003      	movs	r3, r0
 800243a:	7023      	strb	r3, [r4, #0]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800243c:	197b      	adds	r3, r7, r5
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <EE_PageTransfer+0x1ba>
  {
    return flashstatus;
 8002444:	2325      	movs	r3, #37	; 0x25
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	e003      	b.n	8002456 <EE_PageTransfer+0x1c2>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 800244e:	2325      	movs	r3, #37	; 0x25
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b00c      	add	sp, #48	; 0x30
 800245c:	bdb0      	pop	{r4, r5, r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	08006000 	.word	0x08006000
 8002464:	08006800 	.word	0x08006800
 8002468:	0000eeee 	.word	0x0000eeee
 800246c:	200000d4 	.word	0x200000d4
 8002470:	2000009c 	.word	0x2000009c

08002474 <Delay_us>:
// ------------------------ Command & Data Write functions --------------------------
static void Command(uint8_t cmd);                   // 8Bit Data Transfer in command Mode
static void Command4Bit(uint8_t cmd);               // 2*4Bit Data Transfer in command Mode
static void lcd_write_data(uint8_t data);           // Data transfer in Non-command Mode
void Delay_us(uint32_t us)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	us=us*50;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2232      	movs	r2, #50	; 0x32
 8002480:	4353      	muls	r3, r2
 8002482:	607b      	str	r3, [r7, #4]

	for(uint32_t i=0;i<us;i++)
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e003      	b.n	8002492 <Delay_us+0x1e>
	{
		__ASM("NOP");
 800248a:	46c0      	nop			; (mov r8, r8)
	for(uint32_t i=0;i<us;i++)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d3f7      	bcc.n	800248a <Delay_us+0x16>
	}
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <lcd_Init>:
#define LCD_CURSOR_OFF    0x0C                       // Cursor Off Command Address
#define LCD_2LINE         0x08                       // Address for More Than 2 Line LCDs (For Example 4*20)

// ------------------------- Initializing Function for LCD ----------------------------
void lcd_Init(void)
{	
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0

	uint8_t FuncCnTrL=0;                             // Tuning Variable
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
    HAL_Delay(1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f001 fc74 	bl	8003d9c <HAL_Delay>
	lcd_gotoxy(0,0);                                 // Sets Cursor on 0,0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 f944 	bl	8002744 <lcd_gotoxy>
    if (LCD_ROWS > 1){FuncCnTrL|=LCD_2LINE;}         // Changing Address if --> LCD Rows>2 Line
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	1dfa      	adds	r2, r7, #7
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	2108      	movs	r1, #8
 80024c4:	430a      	orrs	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
    Command4Bit(0x03);                               // Starts Commands to set LCD in 4Bit Interface
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 f8f5 	bl	80026b8 <Command4Bit>
	HAL_Delay(1);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f001 fc64 	bl	8003d9c <HAL_Delay>
	Command4Bit(0x03);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 f8ef 	bl	80026b8 <Command4Bit>
	HAL_Delay(1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f001 fc5e 	bl	8003d9c <HAL_Delay>
	Command4Bit(0x03);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f8e9 	bl	80026b8 <Command4Bit>
	HAL_Delay(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f001 fc58 	bl	8003d9c <HAL_Delay>
	Command4Bit(0x02);
 80024ec:	2002      	movs	r0, #2
 80024ee:	f000 f8e3 	bl	80026b8 <Command4Bit>
	HAL_Delay(1);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f001 fc52 	bl	8003d9c <HAL_Delay>

// ----------- Turns Displays on - No Cursor - No Blinking - Position 0,0 - Default Font

	Command(0x20 | FuncCnTrL);
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2220      	movs	r2, #32
 80024fe:	4313      	orrs	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f894 	bl	8002630 <Command>
    Command(0x08|0x04);
 8002508:	200c      	movs	r0, #12
 800250a:	f000 f891 	bl	8002630 <Command>
    lcd_clrscr();
 800250e:	f000 f80a 	bl	8002526 <lcd_clrscr>
	Command(0x04 | 0x02);
 8002512:	2006      	movs	r0, #6
 8002514:	f000 f88c 	bl	8002630 <Command>
	HAL_Delay(1);
 8002518:	2001      	movs	r0, #1
 800251a:	f001 fc3f 	bl	8003d9c <HAL_Delay>
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}

08002526 <lcd_clrscr>:
// --------------------------------- Screen Clear Function -------------------------------
void lcd_clrscr(void)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	af00      	add	r7, sp, #0
	Command(LCD_CLR);
 800252a:	2001      	movs	r0, #1
 800252c:	f000 f880 	bl	8002630 <Command>
	HAL_Delay(1);
 8002530:	2001      	movs	r0, #1
 8002532:	f001 fc33 	bl	8003d9c <HAL_Delay>
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <lcd_puts>:
// ----------------------------------- Puts String on LCD ---------------------------------
void lcd_puts(char * str){
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

	while (*str)
 8002544:	e03d      	b.n	80025c2 <lcd_puts+0x86>
	  {
			if (Xcurrent >= LCD_COLS)
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <lcd_puts+0x98>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b13      	cmp	r3, #19
 800254c:	d90d      	bls.n	800256a <lcd_puts+0x2e>
	    {
				Xcurrent = 0;
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <lcd_puts+0x98>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
				Ycurrent=0;
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <lcd_puts+0x9c>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
				lcd_gotoxy(Xcurrent, Ycurrent);
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <lcd_puts+0x98>)
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <lcd_puts+0x9c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	0019      	movs	r1, r3
 8002564:	0010      	movs	r0, r2
 8002566:	f000 f8ed 	bl	8002744 <lcd_gotoxy>
			}
			if (*str == '\n')
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b0a      	cmp	r3, #10
 8002570:	d10e      	bne.n	8002590 <lcd_puts+0x54>
	    {
				Ycurrent++;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <lcd_puts+0x9c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <lcd_puts+0x9c>)
 800257c:	701a      	strb	r2, [r3, #0]
				lcd_gotoxy(Xcurrent, Ycurrent);
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <lcd_puts+0x98>)
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <lcd_puts+0x9c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	0019      	movs	r1, r3
 8002588:	0010      	movs	r0, r2
 800258a:	f000 f8db 	bl	8002744 <lcd_gotoxy>
 800258e:	e015      	b.n	80025bc <lcd_puts+0x80>
			}
	    else if (*str == '\r')
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b0d      	cmp	r3, #13
 8002596:	d106      	bne.n	80025a6 <lcd_puts+0x6a>
	    {
	    	lcd_gotoxy(0, Ycurrent);
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <lcd_puts+0x9c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	0019      	movs	r1, r3
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 f8d0 	bl	8002744 <lcd_gotoxy>
 80025a4:	e00a      	b.n	80025bc <lcd_puts+0x80>
			}
	    else
	    {
				lcd_write_data(*str);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f862 	bl	8002674 <lcd_write_data>
				Xcurrent++;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <lcd_puts+0x98>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <lcd_puts+0x98>)
 80025ba:	701a      	strb	r2, [r3, #0]
			}
			str++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3301      	adds	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
	while (*str)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1bd      	bne.n	8002546 <lcd_puts+0xa>
		}


	  }
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	2000009e 	.word	0x2000009e
 80025d8:	2000009f 	.word	0x2000009f

080025dc <lcd_pos_puts>:

// --------------------------------- Puts String on X,Y Position ---------------------------------
void lcd_pos_puts(uint8_t x, uint8_t y, char* str)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	603a      	str	r2, [r7, #0]
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	1c0a      	adds	r2, r1, #0
 80025ee:	701a      	strb	r2, [r3, #0]

	lcd_gotoxy(x, y);
 80025f0:	1dbb      	adds	r3, r7, #6
 80025f2:	781a      	ldrb	r2, [r3, #0]
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f8a2 	bl	8002744 <lcd_gotoxy>
lcd_puts(str);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	0018      	movs	r0, r3
 8002604:	f7ff ff9a 	bl	800253c <lcd_puts>

}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}

08002610 <lcd_BlinkOn>:

	Command(LCD_DISP_OFF);
}
//---------------------------------------- Blink On Function -----------------------------------------
void lcd_BlinkOn(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	Command(LCD_BLINK_ON);
 8002614:	200d      	movs	r0, #13
 8002616:	f000 f80b 	bl	8002630 <Command>
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <lcd_BlinkOff>:
//---------------------------------------- Blink Off Function -----------------------------------------
void lcd_BlinkOff(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

	Command(LCD_BLINK_OFF);
 8002624:	200c      	movs	r0, #12
 8002626:	f000 f803 	bl	8002630 <Command>
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <Command>:
{
	Command(LCD_CURSOR_OFF);
}
// ----------------------------------- Command Data Transfer Function ---------------------------------
static void Command(uint8_t cmd)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	0002      	movs	r2, r0
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	701a      	strb	r2, [r3, #0]
	LCD_RS_LOW;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <Command+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	2101      	movs	r1, #1
 8002642:	0018      	movs	r0, r3
 8002644:	f002 f82b 	bl	800469e <HAL_GPIO_WritePin>
	Command4Bit(cmd >> 4);
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	b2db      	uxtb	r3, r3
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f831 	bl	80026b8 <Command4Bit>
	Command4Bit(cmd & 0x0F);
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	220f      	movs	r2, #15
 800265c:	4013      	ands	r3, r2
 800265e:	b2db      	uxtb	r3, r3
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f829 	bl	80026b8 <Command4Bit>
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	b002      	add	sp, #8
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	48000400 	.word	0x48000400

08002674 <lcd_write_data>:
// ----------------------------------------- Sends RAW DATA to LCD ------------------------------------
static void lcd_write_data(uint8_t data)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	0002      	movs	r2, r0
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	701a      	strb	r2, [r3, #0]
	LCD_RS_HIGH;
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <lcd_write_data+0x40>)
 8002682:	2201      	movs	r2, #1
 8002684:	2101      	movs	r1, #1
 8002686:	0018      	movs	r0, r3
 8002688:	f002 f809 	bl	800469e <HAL_GPIO_WritePin>
	Command4Bit(data >> 4);
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	b2db      	uxtb	r3, r3
 8002694:	0018      	movs	r0, r3
 8002696:	f000 f80f 	bl	80026b8 <Command4Bit>
	Command4Bit(data & 0x0F);
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	220f      	movs	r2, #15
 80026a0:	4013      	ands	r3, r2
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f807 	bl	80026b8 <Command4Bit>
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	48000400 	.word	0x48000400

080026b8 <Command4Bit>:
// -------------------------------- Command Data Transfer Function(4Bit Mode) -------------------------
static void Command4Bit(uint8_t cmd)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	0002      	movs	r2, r0
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DATA7_PORT, LCD_DATA7_PIN, (GPIO_PinState)(cmd & 0x08));
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4013      	ands	r3, r2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	481c      	ldr	r0, [pc, #112]	; (8002740 <Command4Bit+0x88>)
 80026d0:	001a      	movs	r2, r3
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	f001 ffe3 	bl	800469e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA6_PORT, LCD_DATA6_PIN, (GPIO_PinState)(cmd & 0x04));
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4817      	ldr	r0, [pc, #92]	; (8002740 <Command4Bit+0x88>)
 80026e4:	001a      	movs	r2, r3
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	f001 ffd9 	bl	800469e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA5_PORT, LCD_DATA5_PIN, (GPIO_PinState)(cmd & 0x02));
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4812      	ldr	r0, [pc, #72]	; (8002740 <Command4Bit+0x88>)
 80026f8:	001a      	movs	r2, r3
 80026fa:	2120      	movs	r1, #32
 80026fc:	f001 ffcf 	bl	800469e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA4_PORT, LCD_DATA4_PIN, (GPIO_PinState)(cmd & 0x01));
 8002700:	1dfb      	adds	r3, r7, #7
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	b2db      	uxtb	r3, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <Command4Bit+0x88>)
 800270c:	001a      	movs	r2, r3
 800270e:	2110      	movs	r1, #16
 8002710:	f001 ffc5 	bl	800469e <HAL_GPIO_WritePin>
	LCD_E_BLINK;
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <Command4Bit+0x88>)
 8002716:	2201      	movs	r2, #1
 8002718:	2108      	movs	r1, #8
 800271a:	0018      	movs	r0, r3
 800271c:	f001 ffbf 	bl	800469e <HAL_GPIO_WritePin>
 8002720:	200c      	movs	r0, #12
 8002722:	f7ff fea7 	bl	8002474 <Delay_us>
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <Command4Bit+0x88>)
 8002728:	2200      	movs	r2, #0
 800272a:	2108      	movs	r1, #8
 800272c:	0018      	movs	r0, r3
 800272e:	f001 ffb6 	bl	800469e <HAL_GPIO_WritePin>
 8002732:	200c      	movs	r0, #12
 8002734:	f7ff fe9e 	bl	8002474 <Delay_us>
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	48000400 	.word	0x48000400

08002744 <lcd_gotoxy>:
// ------------------------------------ Cursor Position set Function ----------------------------------
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	0002      	movs	r2, r0
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	1dbb      	adds	r3, r7, #6
 8002752:	1c0a      	adds	r2, r1, #0
 8002754:	701a      	strb	r2, [r3, #0]

	uint8_t row_addr[] = {0x00, 0x40, 0x14, 0x54}; // Addresses for First Character on each line
 8002756:	230c      	movs	r3, #12
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	4a14      	ldr	r2, [pc, #80]	; (80027ac <lcd_gotoxy+0x68>)
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	601a      	str	r2, [r3, #0]
	if (y >= LCD_ROWS)
 8002760:	1dbb      	adds	r3, r7, #6
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d902      	bls.n	800276e <lcd_gotoxy+0x2a>
		y = 0;
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
	Xcurrent = x;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <lcd_gotoxy+0x6c>)
 8002770:	1dfa      	adds	r2, r7, #7
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	701a      	strb	r2, [r3, #0]
	Ycurrent = y;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <lcd_gotoxy+0x70>)
 8002778:	1dba      	adds	r2, r7, #6
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
	Command(0x80 | (x + row_addr[y]));
 800277e:	1dbb      	adds	r3, r7, #6
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	220c      	movs	r2, #12
 8002784:	18ba      	adds	r2, r7, r2
 8002786:	5cd2      	ldrb	r2, [r2, r3]
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	18d3      	adds	r3, r2, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	b25b      	sxtb	r3, r3
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	4252      	negs	r2, r2
 8002796:	4313      	orrs	r3, r2
 8002798:	b25b      	sxtb	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff ff47 	bl	8002630 <Command>


}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	08005d78 	.word	0x08005d78
 80027b0:	2000009e 	.word	0x2000009e
 80027b4:	2000009f 	.word	0x2000009f

080027b8 <HAL_TIM_PeriodElapsedCallback>:
int distance=0;                                                  // Distance in CM
bool cond=0;                                                     // Trig & Echo Pin Condition

// --------------------------------- Functions --------------------------------------
// ----------------------------TIM14 Callback Routine -------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM14){
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d105      	bne.n	80027d6 <HAL_TIM_PeriodElapsedCallback+0x1e>
Time+=65535;                                                     // Adds 65535uS on Timer-overflow
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80027d0:	189a      	adds	r2, r3, r2
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027d4:	601a      	str	r2, [r3, #0]
}
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	40002000 	.word	0x40002000
 80027e4:	200000a0 	.word	0x200000a0
 80027e8:	0000ffff 	.word	0x0000ffff

080027ec <HAL_GPIO_EXTI_Callback>:

//----------------------- External Interrupt Callback Routine -----------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	0002      	movs	r2, r0
 80027f4:	1dbb      	adds	r3, r7, #6
 80027f6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin==ECOPIN){                                        // External Interrupt on PIN1
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d157      	bne.n	80028b0 <HAL_GPIO_EXTI_Callback+0xc4>
	cond^=1;
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	4053      	eors	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4193      	sbcs	r3, r2
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002812:	701a      	strb	r2, [r3, #0]
	if(cond==1){                                                 // Rising Edge Detection
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_GPIO_EXTI_Callback+0x46>
		htim14.Instance->CNT=0;                                  // Sets Timer value to Zero
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_GPIO_EXTI_Callback+0xd0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
		Time=0;
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start(&htim14);                             // Starts Timer On Rising Edge
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_GPIO_EXTI_Callback+0xd0>)
 800282c:	0018      	movs	r0, r3
 800282e:	f002 fc5f 	bl	80050f0 <HAL_TIM_Base_Start>
}
	if(cond==0){                                                 // Falling Edge Detection
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2201      	movs	r2, #1
 8002838:	4053      	eors	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d037      	beq.n	80028b0 <HAL_GPIO_EXTI_Callback+0xc4>
HAL_TIM_Base_Stop(&htim14);                                      // Stops Timer on Falling Edge Detection
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_GPIO_EXTI_Callback+0xd0>)
 8002842:	0018      	movs	r0, r3
 8002844:	f002 fc76 	bl	8005134 <HAL_TIM_Base_Stop>
Time+=htim14.Instance->CNT;                                      // Overflow Time + Counter value = Time in uS
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_GPIO_EXTI_Callback+0xd0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	18d2      	adds	r2, r2, r3
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8002856:	601a      	str	r2, [r3, #0]
distance = Time * .034/2;                                        // Speed of Sound = 340 M/S = 0.034 CM/uS - Travel Time divided by 2 to get Distance in CM
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0018      	movs	r0, r3
 800285e:	f7ff f83b 	bl	80018d8 <__aeabi_ui2d>
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002866:	f7fe fa0d 	bl	8000c84 <__aeabi_dmul>
 800286a:	0003      	movs	r3, r0
 800286c:	000c      	movs	r4, r1
 800286e:	0018      	movs	r0, r3
 8002870:	0021      	movs	r1, r4
 8002872:	2200      	movs	r2, #0
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	05db      	lsls	r3, r3, #23
 8002878:	f7fd fdfa 	bl	8000470 <__aeabi_ddiv>
 800287c:	0003      	movs	r3, r0
 800287e:	000c      	movs	r4, r1
 8002880:	0018      	movs	r0, r3
 8002882:	0021      	movs	r1, r4
 8002884:	f7fe ffb8 	bl	80017f8 <__aeabi_d2iz>
 8002888:	0002      	movs	r2, r0
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_GPIO_EXTI_Callback+0xe0>)
 800288c:	601a      	str	r2, [r3, #0]
if(distance<25)distance=0;                                       // Distance Low Limit for JSN-SR04T is 25 in CM
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_GPIO_EXTI_Callback+0xe0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b18      	cmp	r3, #24
 8002894:	dc02      	bgt.n	800289c <HAL_GPIO_EXTI_Callback+0xb0>
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_GPIO_EXTI_Callback+0xe0>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
if(distance>450)distance=450;
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_GPIO_EXTI_Callback+0xe0>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	23e1      	movs	r3, #225	; 0xe1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dd03      	ble.n	80028b0 <HAL_GPIO_EXTI_Callback+0xc4>
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_GPIO_EXTI_Callback+0xe0>)
 80028aa:	22e1      	movs	r2, #225	; 0xe1
 80028ac:	0052      	lsls	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
	}
}
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b003      	add	sp, #12
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	200000a8 	.word	0x200000a8
 80028bc:	20000110 	.word	0x20000110
 80028c0:	200000a0 	.word	0x200000a0
 80028c4:	b020c49c 	.word	0xb020c49c
 80028c8:	3fa16872 	.word	0x3fa16872
 80028cc:	200000a4 	.word	0x200000a4

080028d0 <Get_Range>:

// ---------------------------- Range Finder function -------------------------------
int Get_Range(void){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	htim14.Instance->CNT=0;
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <Get_Range+0x44>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
	Time=0;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <Get_Range+0x48>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIGPORT, TRIGPIN, GPIO_PIN_SET);         // SETS Trig PIN
 80028e2:	2390      	movs	r3, #144	; 0x90
 80028e4:	05db      	lsls	r3, r3, #23
 80028e6:	2201      	movs	r2, #1
 80028e8:	2102      	movs	r1, #2
 80028ea:	0018      	movs	r0, r3
 80028ec:	f001 fed7 	bl	800469e <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f001 fa53 	bl	8003d9c <HAL_Delay>
		  HAL_GPIO_WritePin(TRIGPORT, TRIGPIN, GPIO_PIN_RESET); // Resets Trig PIN
 80028f6:	2390      	movs	r3, #144	; 0x90
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	2200      	movs	r2, #0
 80028fc:	2102      	movs	r1, #2
 80028fe:	0018      	movs	r0, r3
 8002900:	f001 fecd 	bl	800469e <HAL_GPIO_WritePin>

		  HAL_Delay(50);
 8002904:	2032      	movs	r0, #50	; 0x32
 8002906:	f001 fa49 	bl	8003d9c <HAL_Delay>
return distance;
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <Get_Range+0x4c>)
 800290c:	681b      	ldr	r3, [r3, #0]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000110 	.word	0x20000110
 8002918:	200000a0 	.word	0x200000a0
 800291c:	200000a4 	.word	0x200000a4

08002920 <gui_config>:
IWDG_HandleTypeDef hiwdg;
// ############################# Configuration Function ##################################


// --------------------------------- LCD Initializing -----------------------------------
void gui_config(void){
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
    lcd_Init();                   // Sets LCD in 4 BIT MODE
 8002924:	f7ff fdbd 	bl	80024a2 <lcd_Init>
	HAL_Delay(200);
 8002928:	20c8      	movs	r0, #200	; 0xc8
 800292a:	f001 fa37 	bl	8003d9c <HAL_Delay>
	lcd_Init();					  // Sets LCD in 4 BIT MODE
 800292e:	f7ff fdb8 	bl	80024a2 <lcd_Init>
	lcd_clrscr();                 // Clears Screen
 8002932:	f7ff fdf8 	bl	8002526 <lcd_clrscr>
	lcd_gotoxy(0,0);              // Moves Cursor to 0,0
 8002936:	2100      	movs	r1, #0
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff ff03 	bl	8002744 <lcd_gotoxy>
	return;
 800293e:	46c0      	nop			; (mov r8, r8)
}
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <main_menu>:
//################################   GUI Functions   #####################################

// ----------------------------------- Main Menu ---------------------------------
void main_menu(void){
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	lcd_clrscr();				  // Clears LCD
 8002948:	f7ff fded 	bl	8002526 <lcd_clrscr>
	lcd_pos_puts(14,cursor,"<");  // Puts cursor on desired Position
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <main_menu+0x38>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <main_menu+0x3c>)
 8002954:	0019      	movs	r1, r3
 8002956:	200e      	movs	r0, #14
 8002958:	f7ff fe40 	bl	80025dc <lcd_pos_puts>
	lcd_pos_puts(0,0,"1-RUN");
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <main_menu+0x40>)
 800295e:	001a      	movs	r2, r3
 8002960:	2100      	movs	r1, #0
 8002962:	2000      	movs	r0, #0
 8002964:	f7ff fe3a 	bl	80025dc <lcd_pos_puts>
	lcd_pos_puts(0,1,"2-SETTING");
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <main_menu+0x44>)
 800296a:	001a      	movs	r2, r3
 800296c:	2101      	movs	r1, #1
 800296e:	2000      	movs	r0, #0
 8002970:	f7ff fe34 	bl	80025dc <lcd_pos_puts>
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	200000ac 	.word	0x200000ac
 8002980:	08005d7c 	.word	0x08005d7c
 8002984:	08005d80 	.word	0x08005d80
 8002988:	08005d88 	.word	0x08005d88

0800298c <setting_menu>:

// ---------------------------------- Setting Menu --------------------------------

void setting_menu(void){
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
		lcd_clrscr();
 8002990:	f7ff fdc9 	bl	8002526 <lcd_clrscr>
		if(cursor<=3){							// Checks cursor number for page (if cursor<3 -> Page Number=0)
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <setting_menu+0xc4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	dc35      	bgt.n	8002a08 <setting_menu+0x7c>
		sprintf(c,"DIAMETER=%4.4d CM",dia);
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <setting_menu+0xc8>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	001a      	movs	r2, r3
 80029a2:	492d      	ldr	r1, [pc, #180]	; (8002a58 <setting_menu+0xcc>)
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <setting_menu+0xd0>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f002 fdd2 	bl	8005550 <siprintf>
		lcd_pos_puts(0,0,c);
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <setting_menu+0xd0>)
 80029ae:	001a      	movs	r2, r3
 80029b0:	2100      	movs	r1, #0
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fe12 	bl	80025dc <lcd_pos_puts>
		sprintf(c,"HEIGHT  =%4.4d CM",height);
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <setting_menu+0xd4>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4929      	ldr	r1, [pc, #164]	; (8002a64 <setting_menu+0xd8>)
 80029be:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <setting_menu+0xd0>)
 80029c0:	0018      	movs	r0, r3
 80029c2:	f002 fdc5 	bl	8005550 <siprintf>
		lcd_pos_puts(0,1,c);
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <setting_menu+0xd0>)
 80029c8:	001a      	movs	r2, r3
 80029ca:	2101      	movs	r1, #1
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff fe05 	bl	80025dc <lcd_pos_puts>
		sprintf(c,"H-Limit =%4.4d Litre",hlimit);
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <setting_menu+0xdc>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4925      	ldr	r1, [pc, #148]	; (8002a6c <setting_menu+0xe0>)
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <setting_menu+0xd0>)
 80029da:	0018      	movs	r0, r3
 80029dc:	f002 fdb8 	bl	8005550 <siprintf>
		lcd_pos_puts(0,2,c);
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <setting_menu+0xd0>)
 80029e2:	001a      	movs	r2, r3
 80029e4:	2102      	movs	r1, #2
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fdf8 	bl	80025dc <lcd_pos_puts>
		sprintf(c,"L-Limit =%4.4d Litre",llimit);
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <setting_menu+0xe4>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4920      	ldr	r1, [pc, #128]	; (8002a74 <setting_menu+0xe8>)
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <setting_menu+0xd0>)
 80029f4:	0018      	movs	r0, r3
 80029f6:	f002 fdab 	bl	8005550 <siprintf>
				lcd_pos_puts(0,3,c);
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <setting_menu+0xd0>)
 80029fc:	001a      	movs	r2, r3
 80029fe:	2103      	movs	r1, #3
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7ff fdeb 	bl	80025dc <lcd_pos_puts>
 8002a06:	e009      	b.n	8002a1c <setting_menu+0x90>
		}
		else if(cursor>3){						// Checks cursor number for page (if cursor>3 -> Page Number=1(Next Page))
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <setting_menu+0xc4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	dd05      	ble.n	8002a1c <setting_menu+0x90>
		lcd_pos_puts(0,0,"BACK");
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <setting_menu+0xec>)
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7ff fde0 	bl	80025dc <lcd_pos_puts>
}
		cursor>3? lcd_pos_puts(19,cursor-4,"<"):lcd_pos_puts(19,cursor,"<"); // Cursor Position Tuning
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <setting_menu+0xc4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	dd0a      	ble.n	8002a3a <setting_menu+0xae>
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <setting_menu+0xc4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <setting_menu+0xf0>)
 8002a30:	0019      	movs	r1, r3
 8002a32:	2013      	movs	r0, #19
 8002a34:	f7ff fdd2 	bl	80025dc <lcd_pos_puts>
}
 8002a38:	e007      	b.n	8002a4a <setting_menu+0xbe>
		cursor>3? lcd_pos_puts(19,cursor-4,"<"):lcd_pos_puts(19,cursor,"<"); // Cursor Position Tuning
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <setting_menu+0xc4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <setting_menu+0xf0>)
 8002a42:	0019      	movs	r1, r3
 8002a44:	2013      	movs	r0, #19
 8002a46:	f7ff fdc9 	bl	80025dc <lcd_pos_puts>
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200000ac 	.word	0x200000ac
 8002a54:	200000bc 	.word	0x200000bc
 8002a58:	08005d94 	.word	0x08005d94
 8002a5c:	200000f4 	.word	0x200000f4
 8002a60:	200000c0 	.word	0x200000c0
 8002a64:	08005da8 	.word	0x08005da8
 8002a68:	200000b4 	.word	0x200000b4
 8002a6c:	08005dbc 	.word	0x08005dbc
 8002a70:	200000b8 	.word	0x200000b8
 8002a74:	08005dd4 	.word	0x08005dd4
 8002a78:	08005dec 	.word	0x08005dec
 8002a7c:	08005d7c 	.word	0x08005d7c

08002a80 <set_menu>:

// ------------------------------ Parameter Setting Menu -----------------------------

void set_menu(uint8_t row,uint8_t curpos)
{											// Prints Special column from Setting Menu to set specific parameter With Blinking Cursor on its variable
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	0002      	movs	r2, r0
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	1dbb      	adds	r3, r7, #6
 8002a8e:	1c0a      	adds	r2, r1, #0
 8002a90:	701a      	strb	r2, [r3, #0]
											// Based on PMval
	switch(row){
 8002a92:	1dfb      	adds	r3, r7, #7
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d01f      	beq.n	8002ada <set_menu+0x5a>
 8002a9a:	dc02      	bgt.n	8002aa2 <set_menu+0x22>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <set_menu+0x2c>
	sprintf(c,"L-Limit =%4.4d Litre",llimit);// Prints just column 3 on LCD and puts blinking cursor on special digit based on curpos variable
	lcd_pos_puts(0,3,c);
	lcd_gotoxy(curpos,row);
	break;
}
}
 8002aa0:	e05d      	b.n	8002b5e <set_menu+0xde>
	switch(row){
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d02f      	beq.n	8002b06 <set_menu+0x86>
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d043      	beq.n	8002b32 <set_menu+0xb2>
}
 8002aaa:	e058      	b.n	8002b5e <set_menu+0xde>
	sprintf(c,"DIAMETER=%4.4d CM",dia);
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <set_menu+0xe8>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	492e      	ldr	r1, [pc, #184]	; (8002b6c <set_menu+0xec>)
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <set_menu+0xf0>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f002 fd4a 	bl	8005550 <siprintf>
	lcd_pos_puts(0,0,c);
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <set_menu+0xf0>)
 8002abe:	001a      	movs	r2, r3
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7ff fd8a 	bl	80025dc <lcd_pos_puts>
	lcd_gotoxy(curpos,row);
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	1dbb      	adds	r3, r7, #6
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	0011      	movs	r1, r2
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7ff fe36 	bl	8002744 <lcd_gotoxy>
	break;
 8002ad8:	e041      	b.n	8002b5e <set_menu+0xde>
	sprintf(c,"HEIGHT  =%4.4d CM",height);// Prints just column 1 on LCD and puts blinking cursor on special digit based on curpos variable
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <set_menu+0xf4>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4926      	ldr	r1, [pc, #152]	; (8002b78 <set_menu+0xf8>)
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <set_menu+0xf0>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f002 fd34 	bl	8005550 <siprintf>
	lcd_pos_puts(0,1,c);
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <set_menu+0xf0>)
 8002aea:	001a      	movs	r2, r3
 8002aec:	2101      	movs	r1, #1
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff fd74 	bl	80025dc <lcd_pos_puts>
	lcd_gotoxy(curpos,row);
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	1dbb      	adds	r3, r7, #6
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	0011      	movs	r1, r2
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fe20 	bl	8002744 <lcd_gotoxy>
	break;
 8002b04:	e02b      	b.n	8002b5e <set_menu+0xde>
	sprintf(c,"H-Limit =%4.4d Litre",hlimit);// Prints just column 2 on LCD and puts blinking cursor on special digit based on curpos variable
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <set_menu+0xfc>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	491d      	ldr	r1, [pc, #116]	; (8002b80 <set_menu+0x100>)
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <set_menu+0xf0>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f002 fd1e 	bl	8005550 <siprintf>
	lcd_pos_puts(0,2,c);
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <set_menu+0xf0>)
 8002b16:	001a      	movs	r2, r3
 8002b18:	2102      	movs	r1, #2
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7ff fd5e 	bl	80025dc <lcd_pos_puts>
	lcd_gotoxy(curpos,row);
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	1dbb      	adds	r3, r7, #6
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff fe0a 	bl	8002744 <lcd_gotoxy>
	break;
 8002b30:	e015      	b.n	8002b5e <set_menu+0xde>
	sprintf(c,"L-Limit =%4.4d Litre",llimit);// Prints just column 3 on LCD and puts blinking cursor on special digit based on curpos variable
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <set_menu+0x104>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4914      	ldr	r1, [pc, #80]	; (8002b88 <set_menu+0x108>)
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <set_menu+0xf0>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f002 fd08 	bl	8005550 <siprintf>
	lcd_pos_puts(0,3,c);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <set_menu+0xf0>)
 8002b42:	001a      	movs	r2, r3
 8002b44:	2103      	movs	r1, #3
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff fd48 	bl	80025dc <lcd_pos_puts>
	lcd_gotoxy(curpos,row);
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	1dbb      	adds	r3, r7, #6
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff fdf4 	bl	8002744 <lcd_gotoxy>
	break;
 8002b5c:	46c0      	nop			; (mov r8, r8)
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b002      	add	sp, #8
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	200000bc 	.word	0x200000bc
 8002b6c:	08005d94 	.word	0x08005d94
 8002b70:	200000f4 	.word	0x200000f4
 8002b74:	200000c0 	.word	0x200000c0
 8002b78:	08005da8 	.word	0x08005da8
 8002b7c:	200000b4 	.word	0x200000b4
 8002b80:	08005dbc 	.word	0x08005dbc
 8002b84:	200000b8 	.word	0x200000b8
 8002b88:	08005dd4 	.word	0x08005dd4

08002b8c <set>:

// ------------------------------------ Variable Set function --------------------------
// This function is for setting variables based with changing ones,tens, hundreds & thousands

void set(uint8_t set){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	0002      	movs	r2, r0
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	701a      	strb	r2, [r3, #0]
lcd_clrscr();            	// Clears LCD
 8002b98:	f7ff fcc5 	bl	8002526 <lcd_clrscr>
lcd_BlinkOn();				// Turns On build in LCD Blinking Cursor
 8002b9c:	f7ff fd38 	bl	8002610 <lcd_BlinkOn>
set_menu(set,12);			// Loads Special Line of Setting Menu(Based on set Variable) & Initially Puts Cursor on column 12
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	210c      	movs	r1, #12
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff ff6a 	bl	8002a80 <set_menu>

while(1){
	HAL_IWDG_Refresh(&hiwdg); 	// Watchdog Reset
 8002bac:	4bc1      	ldr	r3, [pc, #772]	; (8002eb4 <set+0x328>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f001 fe14 	bl	80047dc <HAL_IWDG_Refresh>
// ----------------------- Specific row Parameter Increase or Decrease

if(KeyP==0){ 					// Plus Key Pressed
 8002bb4:	2390      	movs	r3, #144	; 0x90
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	2110      	movs	r1, #16
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f001 fd52 	bl	8004664 <HAL_GPIO_ReadPin>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d000      	beq.n	8002bc6 <set+0x3a>
 8002bc4:	e071      	b.n	8002caa <set+0x11e>
HAL_Delay(200);					// Delay Based Debouncing
 8002bc6:	20c8      	movs	r0, #200	; 0xc8
 8002bc8:	f001 f8e8 	bl	8003d9c <HAL_Delay>
	switch(set){				// Based on Set Variable it changes specific parameter (Diameter-Height-High Limit-Low limit)
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d022      	beq.n	8002c1a <set+0x8e>
 8002bd4:	dc02      	bgt.n	8002bdc <set+0x50>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <set+0x5a>
 8002bda:	e066      	b.n	8002caa <set+0x11e>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d034      	beq.n	8002c4a <set+0xbe>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d04a      	beq.n	8002c7a <set+0xee>
 8002be4:	e061      	b.n	8002caa <set+0x11e>
	case 0:
	dia+=PMval;					// Increases value Based on PMval which can be based on ones, tens, hundreds or thousands
 8002be6:	4bb4      	ldr	r3, [pc, #720]	; (8002eb8 <set+0x32c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	4bb3      	ldr	r3, [pc, #716]	; (8002ebc <set+0x330>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	18d3      	adds	r3, r2, r3
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4bb1      	ldr	r3, [pc, #708]	; (8002ebc <set+0x330>)
 8002bf6:	801a      	strh	r2, [r3, #0]
	if(dia>9999)dia=9999;		// Limits Maximum value to 9999
 8002bf8:	4bb0      	ldr	r3, [pc, #704]	; (8002ebc <set+0x330>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	4ab0      	ldr	r2, [pc, #704]	; (8002ec0 <set+0x334>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d902      	bls.n	8002c08 <set+0x7c>
 8002c02:	4bae      	ldr	r3, [pc, #696]	; (8002ebc <set+0x330>)
 8002c04:	4aae      	ldr	r2, [pc, #696]	; (8002ec0 <set+0x334>)
 8002c06:	801a      	strh	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002c08:	4bae      	ldr	r3, [pc, #696]	; (8002ec4 <set+0x338>)
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	1dfb      	adds	r3, r7, #7
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7ff ff34 	bl	8002a80 <set_menu>
	break;
 8002c18:	e047      	b.n	8002caa <set+0x11e>
	case 1:
	height+=PMval;
 8002c1a:	4bab      	ldr	r3, [pc, #684]	; (8002ec8 <set+0x33c>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4ba6      	ldr	r3, [pc, #664]	; (8002eb8 <set+0x32c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	18d2      	adds	r2, r2, r3
 8002c24:	4ba8      	ldr	r3, [pc, #672]	; (8002ec8 <set+0x33c>)
 8002c26:	601a      	str	r2, [r3, #0]
	if(height>9999)height=9999;
 8002c28:	4ba7      	ldr	r3, [pc, #668]	; (8002ec8 <set+0x33c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4aa4      	ldr	r2, [pc, #656]	; (8002ec0 <set+0x334>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dd02      	ble.n	8002c38 <set+0xac>
 8002c32:	4ba5      	ldr	r3, [pc, #660]	; (8002ec8 <set+0x33c>)
 8002c34:	4aa2      	ldr	r2, [pc, #648]	; (8002ec0 <set+0x334>)
 8002c36:	601a      	str	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002c38:	4ba2      	ldr	r3, [pc, #648]	; (8002ec4 <set+0x338>)
 8002c3a:	781a      	ldrb	r2, [r3, #0]
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	0011      	movs	r1, r2
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ff1c 	bl	8002a80 <set_menu>
	break;
 8002c48:	e02f      	b.n	8002caa <set+0x11e>
	case 2:
	hlimit+=PMval;
 8002c4a:	4ba0      	ldr	r3, [pc, #640]	; (8002ecc <set+0x340>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b9a      	ldr	r3, [pc, #616]	; (8002eb8 <set+0x32c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	18d2      	adds	r2, r2, r3
 8002c54:	4b9d      	ldr	r3, [pc, #628]	; (8002ecc <set+0x340>)
 8002c56:	601a      	str	r2, [r3, #0]
	if(hlimit>9999)hlimit=9999;
 8002c58:	4b9c      	ldr	r3, [pc, #624]	; (8002ecc <set+0x340>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a98      	ldr	r2, [pc, #608]	; (8002ec0 <set+0x334>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	dd02      	ble.n	8002c68 <set+0xdc>
 8002c62:	4b9a      	ldr	r3, [pc, #616]	; (8002ecc <set+0x340>)
 8002c64:	4a96      	ldr	r2, [pc, #600]	; (8002ec0 <set+0x334>)
 8002c66:	601a      	str	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002c68:	4b96      	ldr	r3, [pc, #600]	; (8002ec4 <set+0x338>)
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	1dfb      	adds	r3, r7, #7
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	0011      	movs	r1, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff ff04 	bl	8002a80 <set_menu>
	break;
 8002c78:	e017      	b.n	8002caa <set+0x11e>
	case 3:
	llimit+=PMval;
 8002c7a:	4b95      	ldr	r3, [pc, #596]	; (8002ed0 <set+0x344>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b8e      	ldr	r3, [pc, #568]	; (8002eb8 <set+0x32c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	18d2      	adds	r2, r2, r3
 8002c84:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <set+0x344>)
 8002c86:	601a      	str	r2, [r3, #0]
	if(llimit>9999)llimit=9999;
 8002c88:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <set+0x344>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a8c      	ldr	r2, [pc, #560]	; (8002ec0 <set+0x334>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	dd02      	ble.n	8002c98 <set+0x10c>
 8002c92:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <set+0x344>)
 8002c94:	4a8a      	ldr	r2, [pc, #552]	; (8002ec0 <set+0x334>)
 8002c96:	601a      	str	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002c98:	4b8a      	ldr	r3, [pc, #552]	; (8002ec4 <set+0x338>)
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff feec 	bl	8002a80 <set_menu>
	break;
 8002ca8:	46c0      	nop			; (mov r8, r8)
	}
}
								// Exactly Like Plus button. However, it is for minus Button.
if(KeyM==0){
 8002caa:	2390      	movs	r3, #144	; 0x90
 8002cac:	05db      	lsls	r3, r3, #23
 8002cae:	2104      	movs	r1, #4
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 fcd7 	bl	8004664 <HAL_GPIO_ReadPin>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d166      	bne.n	8002d88 <set+0x1fc>
HAL_Delay(200);
 8002cba:	20c8      	movs	r0, #200	; 0xc8
 8002cbc:	f001 f86e 	bl	8003d9c <HAL_Delay>
	switch(set){
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d01a      	beq.n	8002cfe <set+0x172>
 8002cc8:	dc02      	bgt.n	8002cd0 <set+0x144>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <set+0x14e>
 8002cce:	e05b      	b.n	8002d88 <set+0x1fc>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d02b      	beq.n	8002d2c <set+0x1a0>
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d040      	beq.n	8002d5a <set+0x1ce>
 8002cd8:	e056      	b.n	8002d88 <set+0x1fc>
	case 0:
	dia-=PMval;				   // Decreases value Based on PMval which can be based on ones, tens, hundreds or thousands
 8002cda:	4b78      	ldr	r3, [pc, #480]	; (8002ebc <set+0x330>)
 8002cdc:	881a      	ldrh	r2, [r3, #0]
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <set+0x32c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b74      	ldr	r3, [pc, #464]	; (8002ebc <set+0x330>)
 8002cea:	801a      	strh	r2, [r3, #0]
	if(dia<0)dia=0;			   // Limits Minimun Value to 0
	set_menu(set,cursor_colmn);
 8002cec:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <set+0x338>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	1dfb      	adds	r3, r7, #7
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	0011      	movs	r1, r2
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7ff fec2 	bl	8002a80 <set_menu>
	break;
 8002cfc:	e044      	b.n	8002d88 <set+0x1fc>
	case 1:
	height-=PMval;
 8002cfe:	4b72      	ldr	r3, [pc, #456]	; (8002ec8 <set+0x33c>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <set+0x32c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	1ad2      	subs	r2, r2, r3
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <set+0x33c>)
 8002d0a:	601a      	str	r2, [r3, #0]
	if(height<0)height=0;
 8002d0c:	4b6e      	ldr	r3, [pc, #440]	; (8002ec8 <set+0x33c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da02      	bge.n	8002d1a <set+0x18e>
 8002d14:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <set+0x33c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <set+0x338>)
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0011      	movs	r1, r2
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff feab 	bl	8002a80 <set_menu>
	break;
 8002d2a:	e02d      	b.n	8002d88 <set+0x1fc>
	case 2:
	hlimit-=PMval;
 8002d2c:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <set+0x340>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <set+0x32c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad2      	subs	r2, r2, r3
 8002d36:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <set+0x340>)
 8002d38:	601a      	str	r2, [r3, #0]
	if(hlimit<0)hlimit=0;
 8002d3a:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <set+0x340>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da02      	bge.n	8002d48 <set+0x1bc>
 8002d42:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <set+0x340>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002d48:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <set+0x338>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	1dfb      	adds	r3, r7, #7
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7ff fe94 	bl	8002a80 <set_menu>
	break;
 8002d58:	e016      	b.n	8002d88 <set+0x1fc>
	case 3:
	llimit-=PMval;
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <set+0x344>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <set+0x32c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <set+0x344>)
 8002d66:	601a      	str	r2, [r3, #0]
	if(llimit<0)llimit=0;
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <set+0x344>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da02      	bge.n	8002d76 <set+0x1ea>
 8002d70:	4b57      	ldr	r3, [pc, #348]	; (8002ed0 <set+0x344>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
	set_menu(set,cursor_colmn);
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <set+0x338>)
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	0011      	movs	r1, r2
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fe7d 	bl	8002a80 <set_menu>
	break;
 8002d86:	46c0      	nop			; (mov r8, r8)
		}
	}

// ------------------------------------- Plus Variable Size --------------------------------------------
// this function is for increasing or decreasing variable based on ones, tens, hundreds or thousands.
if(KeyL==0){
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	005a      	lsls	r2, r3, #1
 8002d8c:	2390      	movs	r3, #144	; 0x90
 8002d8e:	05db      	lsls	r3, r3, #23
 8002d90:	0011      	movs	r1, r2
 8002d92:	0018      	movs	r0, r3
 8002d94:	f001 fc66 	bl	8004664 <HAL_GPIO_ReadPin>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d135      	bne.n	8002e08 <set+0x27c>
HAL_Delay(200);
 8002d9c:	20c8      	movs	r0, #200	; 0xc8
 8002d9e:	f000 fffd 	bl	8003d9c <HAL_Delay>
    cursor_colmn--;
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <set+0x338>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <set+0x338>)
 8002dac:	701a      	strb	r2, [r3, #0]
	if(cursor_colmn<9){
 8002dae:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <set+0x338>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d802      	bhi.n	8002dbc <set+0x230>
	cursor_colmn=12;
 8002db6:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <set+0x338>)
 8002db8:	220c      	movs	r2, #12
 8002dba:	701a      	strb	r2, [r3, #0]
	}
	switch(cursor_colmn){	// Based on Specific column, calculates PMval variables
 8002dbc:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <set+0x338>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b0a      	cmp	r3, #10
 8002dc2:	d00d      	beq.n	8002de0 <set+0x254>
 8002dc4:	dc02      	bgt.n	8002dcc <set+0x240>
 8002dc6:	2b09      	cmp	r3, #9
 8002dc8:	d005      	beq.n	8002dd6 <set+0x24a>
 8002dca:	e015      	b.n	8002df8 <set+0x26c>
 8002dcc:	2b0b      	cmp	r3, #11
 8002dce:	d00b      	beq.n	8002de8 <set+0x25c>
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d00d      	beq.n	8002df0 <set+0x264>
 8002dd4:	e010      	b.n	8002df8 <set+0x26c>
	case 9:
	PMval=1000;
 8002dd6:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <set+0x32c>)
 8002dd8:	22fa      	movs	r2, #250	; 0xfa
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	601a      	str	r2, [r3, #0]
	break;
 8002dde:	e00b      	b.n	8002df8 <set+0x26c>
	case 10:
	PMval=100;
 8002de0:	4b35      	ldr	r3, [pc, #212]	; (8002eb8 <set+0x32c>)
 8002de2:	2264      	movs	r2, #100	; 0x64
 8002de4:	601a      	str	r2, [r3, #0]
	break;
 8002de6:	e007      	b.n	8002df8 <set+0x26c>
	case 11:
	PMval=10;
 8002de8:	4b33      	ldr	r3, [pc, #204]	; (8002eb8 <set+0x32c>)
 8002dea:	220a      	movs	r2, #10
 8002dec:	601a      	str	r2, [r3, #0]
	break;
 8002dee:	e003      	b.n	8002df8 <set+0x26c>
	case 12:
	PMval=1;
 8002df0:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <set+0x32c>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
	break;
 8002df6:	46c0      	nop			; (mov r8, r8)
}
set_menu(set,cursor_colmn);
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <set+0x338>)
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	0011      	movs	r1, r2
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fe3c 	bl	8002a80 <set_menu>
}


if(KeyR==0){            // Exactly like KeyL Case
 8002e08:	2390      	movs	r3, #144	; 0x90
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f001 fc28 	bl	8004664 <HAL_GPIO_ReadPin>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d135      	bne.n	8002e84 <set+0x2f8>
HAL_Delay(200);
 8002e18:	20c8      	movs	r0, #200	; 0xc8
 8002e1a:	f000 ffbf 	bl	8003d9c <HAL_Delay>
	cursor_colmn++;
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <set+0x338>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <set+0x338>)
 8002e28:	701a      	strb	r2, [r3, #0]
	if(cursor_colmn>12){
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <set+0x338>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d902      	bls.n	8002e38 <set+0x2ac>
	cursor_colmn=9;
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <set+0x338>)
 8002e34:	2209      	movs	r2, #9
 8002e36:	701a      	strb	r2, [r3, #0]
}
	switch(cursor_colmn){
 8002e38:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <set+0x338>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b0a      	cmp	r3, #10
 8002e3e:	d00d      	beq.n	8002e5c <set+0x2d0>
 8002e40:	dc02      	bgt.n	8002e48 <set+0x2bc>
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	d005      	beq.n	8002e52 <set+0x2c6>
 8002e46:	e015      	b.n	8002e74 <set+0x2e8>
 8002e48:	2b0b      	cmp	r3, #11
 8002e4a:	d00b      	beq.n	8002e64 <set+0x2d8>
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d00d      	beq.n	8002e6c <set+0x2e0>
 8002e50:	e010      	b.n	8002e74 <set+0x2e8>
	case 9:
	PMval=1000;
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <set+0x32c>)
 8002e54:	22fa      	movs	r2, #250	; 0xfa
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	601a      	str	r2, [r3, #0]
	break;
 8002e5a:	e00b      	b.n	8002e74 <set+0x2e8>
	case 10:
	PMval=100;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <set+0x32c>)
 8002e5e:	2264      	movs	r2, #100	; 0x64
 8002e60:	601a      	str	r2, [r3, #0]
	break;
 8002e62:	e007      	b.n	8002e74 <set+0x2e8>
	case 11:
	PMval=10;
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <set+0x32c>)
 8002e66:	220a      	movs	r2, #10
 8002e68:	601a      	str	r2, [r3, #0]
	break;
 8002e6a:	e003      	b.n	8002e74 <set+0x2e8>
	case 12:
	PMval=1;
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <set+0x32c>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
	break;
 8002e72:	46c0      	nop			; (mov r8, r8)
}
	set_menu(set,cursor_colmn);
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <set+0x338>)
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	1dfb      	adds	r3, r7, #7
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff fdfe 	bl	8002a80 <set_menu>
}


if(KeyOK==0){		   // Returns From Parameter set to Setting Menu
 8002e84:	2390      	movs	r3, #144	; 0x90
 8002e86:	05db      	lsls	r3, r3, #23
 8002e88:	2108      	movs	r1, #8
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f001 fbea 	bl	8004664 <HAL_GPIO_ReadPin>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d000      	beq.n	8002e96 <set+0x30a>
 8002e94:	e68a      	b.n	8002bac <set+0x20>
HAL_Delay(200);
 8002e96:	20c8      	movs	r0, #200	; 0xc8
 8002e98:	f000 ff80 	bl	8003d9c <HAL_Delay>
	lcd_clrscr();
 8002e9c:	f7ff fb43 	bl	8002526 <lcd_clrscr>
	setting_menu();
 8002ea0:	f7ff fd74 	bl	800298c <setting_menu>
	lcd_BlinkOff();
 8002ea4:	f7ff fbbc 	bl	8002620 <lcd_BlinkOff>
	break;
 8002ea8:	46c0      	nop			; (mov r8, r8)
}
}
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	200000dc 	.word	0x200000dc
 8002eb8:	20000004 	.word	0x20000004
 8002ebc:	200000bc 	.word	0x200000bc
 8002ec0:	0000270f 	.word	0x0000270f
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	200000c0 	.word	0x200000c0
 8002ecc:	200000b4 	.word	0x200000b4
 8002ed0:	200000b8 	.word	0x200000b8

08002ed4 <setting>:
// ---------------------------------- Setting Control -----------------------------------
void setting(void){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
cursor=0;
 8002ed8:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <setting+0x11c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
setting_menu();
 8002ede:	f7ff fd55 	bl	800298c <setting_menu>
while(1){
	HAL_IWDG_Refresh(&hiwdg);			  // Watchdog Reset
 8002ee2:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <setting+0x120>)
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f001 fc79 	bl	80047dc <HAL_IWDG_Refresh>
	if(KeyM==0){
 8002eea:	2390      	movs	r3, #144	; 0x90
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	2104      	movs	r1, #4
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f001 fbb7 	bl	8004664 <HAL_GPIO_ReadPin>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d110      	bne.n	8002f1c <setting+0x48>
	HAL_Delay(200);                	      // Delay Based debouncing
 8002efa:	20c8      	movs	r0, #200	; 0xc8
 8002efc:	f000 ff4e 	bl	8003d9c <HAL_Delay>
	cursor++;                  			  // Changes Cursor Position
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <setting+0x11c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <setting+0x11c>)
 8002f08:	601a      	str	r2, [r3, #0]
	if(cursor>4)cursor=0;				  // Limits Cursor Position
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <setting+0x11c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	dd02      	ble.n	8002f18 <setting+0x44>
 8002f12:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <setting+0x11c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
	setting_menu();                       // Main Menu Load
 8002f18:	f7ff fd38 	bl	800298c <setting_menu>
	}
	if(KeyP==0){
 8002f1c:	2390      	movs	r3, #144	; 0x90
 8002f1e:	05db      	lsls	r3, r3, #23
 8002f20:	2110      	movs	r1, #16
 8002f22:	0018      	movs	r0, r3
 8002f24:	f001 fb9e 	bl	8004664 <HAL_GPIO_ReadPin>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d110      	bne.n	8002f4e <setting+0x7a>
	HAL_Delay(200);                  	  // Delay Based debouncing
 8002f2c:	20c8      	movs	r0, #200	; 0xc8
 8002f2e:	f000 ff35 	bl	8003d9c <HAL_Delay>
	cursor--; 							  // Changes Cursor Position
 8002f32:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <setting+0x11c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1e5a      	subs	r2, r3, #1
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <setting+0x11c>)
 8002f3a:	601a      	str	r2, [r3, #0]
	if(cursor<0)cursor=4;				  // Limits Cursor Position
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <setting+0x11c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da02      	bge.n	8002f4a <setting+0x76>
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <setting+0x11c>)
 8002f46:	2204      	movs	r2, #4
 8002f48:	601a      	str	r2, [r3, #0]
	setting_menu();                       // Main Menu Load
 8002f4a:	f7ff fd1f 	bl	800298c <setting_menu>
	}
if(KeyOK==0&&cursor==4){				  // Backs to Main Menu
 8002f4e:	2390      	movs	r3, #144	; 0x90
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	2108      	movs	r1, #8
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 fb85 	bl	8004664 <HAL_GPIO_ReadPin>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d128      	bne.n	8002fb0 <setting+0xdc>
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <setting+0x11c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d124      	bne.n	8002fb0 <setting+0xdc>
	HAL_Delay(200);
 8002f66:	20c8      	movs	r0, #200	; 0xc8
 8002f68:	f000 ff18 	bl	8003d9c <HAL_Delay>
	cursor=1;
 8002f6c:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <setting+0x11c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
	EE_WriteVariable(0, dia);			  // Writes Diameter Value on Address 0 of EEPROM
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <setting+0x124>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	0019      	movs	r1, r3
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7ff f80d 	bl	8001f98 <EE_WriteVariable>
	EE_WriteVariable(1, height);		  // Writes Height Value on Address 1 of EEPROM
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <setting+0x128>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	0019      	movs	r1, r3
 8002f86:	2001      	movs	r0, #1
 8002f88:	f7ff f806 	bl	8001f98 <EE_WriteVariable>
	EE_WriteVariable(2, hlimit);		  // Writes High Limit Value on Address 2 of EEPROM
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <setting+0x12c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	0019      	movs	r1, r3
 8002f94:	2002      	movs	r0, #2
 8002f96:	f7fe ffff 	bl	8001f98 <EE_WriteVariable>
	EE_WriteVariable(3, llimit);		  // Writes Low Limit Value on Address 3 of EEPROM
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <setting+0x130>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	f7fe fff8 	bl	8001f98 <EE_WriteVariable>
	run_flag=0;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	; (8003008 <setting+0x134>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
	break;
 8002fae:	e01b      	b.n	8002fe8 <setting+0x114>
	        }
if(KeyOK==0&&cursor<4){					 // Goes to Specific Parameter Set
 8002fb0:	2390      	movs	r3, #144	; 0x90
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	2108      	movs	r1, #8
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f001 fb54 	bl	8004664 <HAL_GPIO_ReadPin>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d190      	bne.n	8002ee2 <setting+0xe>
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <setting+0x11c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	dc8c      	bgt.n	8002ee2 <setting+0xe>
	HAL_Delay(200);
 8002fc8:	20c8      	movs	r0, #200	; 0xc8
 8002fca:	f000 fee7 	bl	8003d9c <HAL_Delay>
	cursor_colmn=12;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <setting+0x138>)
 8002fd0:	220c      	movs	r2, #12
 8002fd2:	701a      	strb	r2, [r3, #0]
	PMval=1;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <setting+0x13c>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
	set(cursor);
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <setting+0x11c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff fdd3 	bl	8002b8c <set>
	HAL_IWDG_Refresh(&hiwdg);			  // Watchdog Reset
 8002fe6:	e77c      	b.n	8002ee2 <setting+0xe>
}
}
return;
 8002fe8:	46c0      	nop			; (mov r8, r8)
}
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	200000ac 	.word	0x200000ac
 8002ff4:	200000dc 	.word	0x200000dc
 8002ff8:	200000bc 	.word	0x200000bc
 8002ffc:	200000c0 	.word	0x200000c0
 8003000:	200000b4 	.word	0x200000b4
 8003004:	200000b8 	.word	0x200000b8
 8003008:	20000000 	.word	0x20000000
 800300c:	20000008 	.word	0x20000008
 8003010:	20000004 	.word	0x20000004

08003014 <run>:

// ------------------------------------- RUN Menu ----------------------------------------
void run(void){
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0


	char vl[5];
	lcd_clrscr();
 800301a:	f7ff fa84 	bl	8002526 <lcd_clrscr>
	int radius=(int)(dia/2);
 800301e:	4b49      	ldr	r3, [pc, #292]	; (8003144 <run+0x130>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	613b      	str	r3, [r7, #16]
	int r_dis=0;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
   if(hlimit==0||llimit==0||dia==0||height==0){ // Error if one of parameters=0
 800302c:	4b46      	ldr	r3, [pc, #280]	; (8003148 <run+0x134>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <run+0x38>
 8003034:	4b45      	ldr	r3, [pc, #276]	; (800314c <run+0x138>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <run+0x38>
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <run+0x130>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <run+0x38>
 8003044:	4b42      	ldr	r3, [pc, #264]	; (8003150 <run+0x13c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11a      	bne.n	8003082 <run+0x6e>
	   lcd_pos_puts(7,0,"ERROR!");
 800304c:	4b41      	ldr	r3, [pc, #260]	; (8003154 <run+0x140>)
 800304e:	001a      	movs	r2, r3
 8003050:	2100      	movs	r1, #0
 8003052:	2007      	movs	r0, #7
 8003054:	f7ff fac2 	bl	80025dc <lcd_pos_puts>
	   lcd_pos_puts(5,1,"PLEASE SET");
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <run+0x144>)
 800305a:	001a      	movs	r2, r3
 800305c:	2101      	movs	r1, #1
 800305e:	2005      	movs	r0, #5
 8003060:	f7ff fabc 	bl	80025dc <lcd_pos_puts>
	   lcd_pos_puts(3,2,"ALL PARAMETERS");
 8003064:	4b3d      	ldr	r3, [pc, #244]	; (800315c <run+0x148>)
 8003066:	001a      	movs	r2, r3
 8003068:	2102      	movs	r1, #2
 800306a:	2003      	movs	r0, #3
 800306c:	f7ff fab6 	bl	80025dc <lcd_pos_puts>
	   HAL_Delay(3000);
 8003070:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <run+0x14c>)
 8003072:	0018      	movs	r0, r3
 8003074:	f000 fe92 	bl	8003d9c <HAL_Delay>
	   lcd_clrscr();
 8003078:	f7ff fa55 	bl	8002526 <lcd_clrscr>
	   main_menu();
 800307c:	f7ff fc62 	bl	8002944 <main_menu>
	   return;
 8003080:	e2a5      	b.n	80035ce <run+0x5ba>
}

   if(((Pi*((dia/2)*(dia/2))*height)/1000)>9999){  // Error if Volume of tank (Based on Height & Diameter)>999(out of range)
 8003082:	4b30      	ldr	r3, [pc, #192]	; (8003144 <run+0x130>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	001a      	movs	r2, r3
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <run+0x130>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	4353      	muls	r3, r2
 8003096:	0018      	movs	r0, r3
 8003098:	f7fe fbe4 	bl	8001864 <__aeabi_i2d>
 800309c:	4a31      	ldr	r2, [pc, #196]	; (8003164 <run+0x150>)
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <run+0x154>)
 80030a0:	f7fd fdf0 	bl	8000c84 <__aeabi_dmul>
 80030a4:	0003      	movs	r3, r0
 80030a6:	000c      	movs	r4, r1
 80030a8:	0025      	movs	r5, r4
 80030aa:	001c      	movs	r4, r3
 80030ac:	4b28      	ldr	r3, [pc, #160]	; (8003150 <run+0x13c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fe fbd7 	bl	8001864 <__aeabi_i2d>
 80030b6:	0002      	movs	r2, r0
 80030b8:	000b      	movs	r3, r1
 80030ba:	0020      	movs	r0, r4
 80030bc:	0029      	movs	r1, r5
 80030be:	f7fd fde1 	bl	8000c84 <__aeabi_dmul>
 80030c2:	0003      	movs	r3, r0
 80030c4:	000c      	movs	r4, r1
 80030c6:	0018      	movs	r0, r3
 80030c8:	0021      	movs	r1, r4
 80030ca:	2200      	movs	r2, #0
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <run+0x158>)
 80030ce:	f7fd f9cf 	bl	8000470 <__aeabi_ddiv>
 80030d2:	0003      	movs	r3, r0
 80030d4:	000c      	movs	r4, r1
 80030d6:	0018      	movs	r0, r3
 80030d8:	0021      	movs	r1, r4
 80030da:	2200      	movs	r2, #0
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <run+0x15c>)
 80030de:	f7fd f9b3 	bl	8000448 <__aeabi_dcmpgt>
 80030e2:	1e03      	subs	r3, r0, #0
 80030e4:	d100      	bne.n	80030e8 <run+0xd4>
 80030e6:	e049      	b.n	800317c <run+0x168>
	   lcd_pos_puts(7,0,"ERROR!");
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <run+0x140>)
 80030ea:	001a      	movs	r2, r3
 80030ec:	2100      	movs	r1, #0
 80030ee:	2007      	movs	r0, #7
 80030f0:	f7ff fa74 	bl	80025dc <lcd_pos_puts>
	   lcd_pos_puts(3,1,"TANK VOLUME IS");
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <run+0x160>)
 80030f6:	001a      	movs	r2, r3
 80030f8:	2101      	movs	r1, #1
 80030fa:	2003      	movs	r0, #3
 80030fc:	f7ff fa6e 	bl	80025dc <lcd_pos_puts>
	   lcd_pos_puts(4,2,"OUT OF RANGE");
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <run+0x164>)
 8003102:	001a      	movs	r2, r3
 8003104:	2102      	movs	r1, #2
 8003106:	2004      	movs	r0, #4
 8003108:	f7ff fa68 	bl	80025dc <lcd_pos_puts>
	   HAL_Delay(3000);
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <run+0x14c>)
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fe44 	bl	8003d9c <HAL_Delay>
	   lcd_clrscr();
 8003114:	f7ff fa07 	bl	8002526 <lcd_clrscr>
	   dia=0;
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <run+0x130>)
 800311a:	2200      	movs	r2, #0
 800311c:	801a      	strh	r2, [r3, #0]
	   height=0;
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <run+0x13c>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
	   EE_WriteVariable(0, dia);			  // Writes Diameter Value on Address 0 of EEPROM
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <run+0x130>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	0019      	movs	r1, r3
 800312a:	2000      	movs	r0, #0
 800312c:	f7fe ff34 	bl	8001f98 <EE_WriteVariable>
	   	EE_WriteVariable(1, height);		  // Writes Height Value on Address 1 of EEPROM
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <run+0x13c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	0019      	movs	r1, r3
 8003138:	2001      	movs	r0, #1
 800313a:	f7fe ff2d 	bl	8001f98 <EE_WriteVariable>
	   main_menu();
 800313e:	f7ff fc01 	bl	8002944 <main_menu>
	   return;
 8003142:	e244      	b.n	80035ce <run+0x5ba>
 8003144:	200000bc 	.word	0x200000bc
 8003148:	200000b4 	.word	0x200000b4
 800314c:	200000b8 	.word	0x200000b8
 8003150:	200000c0 	.word	0x200000c0
 8003154:	08005df4 	.word	0x08005df4
 8003158:	08005dfc 	.word	0x08005dfc
 800315c:	08005e08 	.word	0x08005e08
 8003160:	00000bb8 	.word	0x00000bb8
 8003164:	c083126f 	.word	0xc083126f
 8003168:	400921ca 	.word	0x400921ca
 800316c:	408f4000 	.word	0x408f4000
 8003170:	40c38780 	.word	0x40c38780
 8003174:	08005e18 	.word	0x08005e18
 8003178:	08005e28 	.word	0x08005e28
   }

	while(1){
	HAL_IWDG_Refresh(&hiwdg);													      // Watchdog Reset
 800317c:	4be0      	ldr	r3, [pc, #896]	; (8003500 <run+0x4ec>)
 800317e:	0018      	movs	r0, r3
 8003180:	f001 fb2c 	bl	80047dc <HAL_IWDG_Refresh>
	r_dis=Get_Range();                                                                // Gets Range in CM From UltraSonic Sensor
 8003184:	f7ff fba4 	bl	80028d0 <Get_Range>
 8003188:	0003      	movs	r3, r0
 800318a:	617b      	str	r3, [r7, #20]
	if(r_dis>height)r_dis=height;						            		          // if UltraSonic Range> Tanker Height ----> UltraSonic Range=Height
 800318c:	4bdd      	ldr	r3, [pc, #884]	; (8003504 <run+0x4f0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	429a      	cmp	r2, r3
 8003194:	dd02      	ble.n	800319c <run+0x188>
 8003196:	4bdb      	ldr	r3, [pc, #876]	; (8003504 <run+0x4f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	617b      	str	r3, [r7, #20]
	r_vol=abs((int)((Pi*radius*radius*height)-(Pi*radius*radius*r_dis))/1000);  	  // Calculating Volume from UltraSonic RangeFinder = Tanker total Volume - UltraSonic Calculated Volume
 800319c:	6938      	ldr	r0, [r7, #16]
 800319e:	f7fe fb61 	bl	8001864 <__aeabi_i2d>
 80031a2:	4ad9      	ldr	r2, [pc, #868]	; (8003508 <run+0x4f4>)
 80031a4:	4bd9      	ldr	r3, [pc, #868]	; (800350c <run+0x4f8>)
 80031a6:	f7fd fd6d 	bl	8000c84 <__aeabi_dmul>
 80031aa:	0003      	movs	r3, r0
 80031ac:	000c      	movs	r4, r1
 80031ae:	0025      	movs	r5, r4
 80031b0:	001c      	movs	r4, r3
 80031b2:	6938      	ldr	r0, [r7, #16]
 80031b4:	f7fe fb56 	bl	8001864 <__aeabi_i2d>
 80031b8:	0002      	movs	r2, r0
 80031ba:	000b      	movs	r3, r1
 80031bc:	0020      	movs	r0, r4
 80031be:	0029      	movs	r1, r5
 80031c0:	f7fd fd60 	bl	8000c84 <__aeabi_dmul>
 80031c4:	0003      	movs	r3, r0
 80031c6:	000c      	movs	r4, r1
 80031c8:	0025      	movs	r5, r4
 80031ca:	001c      	movs	r4, r3
 80031cc:	4bcd      	ldr	r3, [pc, #820]	; (8003504 <run+0x4f0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fe fb47 	bl	8001864 <__aeabi_i2d>
 80031d6:	0002      	movs	r2, r0
 80031d8:	000b      	movs	r3, r1
 80031da:	0020      	movs	r0, r4
 80031dc:	0029      	movs	r1, r5
 80031de:	f7fd fd51 	bl	8000c84 <__aeabi_dmul>
 80031e2:	0003      	movs	r3, r0
 80031e4:	000c      	movs	r4, r1
 80031e6:	0025      	movs	r5, r4
 80031e8:	001c      	movs	r4, r3
 80031ea:	6938      	ldr	r0, [r7, #16]
 80031ec:	f7fe fb3a 	bl	8001864 <__aeabi_i2d>
 80031f0:	4ac5      	ldr	r2, [pc, #788]	; (8003508 <run+0x4f4>)
 80031f2:	4bc6      	ldr	r3, [pc, #792]	; (800350c <run+0x4f8>)
 80031f4:	f7fd fd46 	bl	8000c84 <__aeabi_dmul>
 80031f8:	0002      	movs	r2, r0
 80031fa:	000b      	movs	r3, r1
 80031fc:	603a      	str	r2, [r7, #0]
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	6938      	ldr	r0, [r7, #16]
 8003202:	f7fe fb2f 	bl	8001864 <__aeabi_i2d>
 8003206:	0002      	movs	r2, r0
 8003208:	000b      	movs	r3, r1
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	f7fd fd39 	bl	8000c84 <__aeabi_dmul>
 8003212:	0002      	movs	r2, r0
 8003214:	000b      	movs	r3, r1
 8003216:	603a      	str	r2, [r7, #0]
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7fe fb22 	bl	8001864 <__aeabi_i2d>
 8003220:	0002      	movs	r2, r0
 8003222:	000b      	movs	r3, r1
 8003224:	6838      	ldr	r0, [r7, #0]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	f7fd fd2c 	bl	8000c84 <__aeabi_dmul>
 800322c:	0002      	movs	r2, r0
 800322e:	000b      	movs	r3, r1
 8003230:	0020      	movs	r0, r4
 8003232:	0029      	movs	r1, r5
 8003234:	f7fd ff98 	bl	8001168 <__aeabi_dsub>
 8003238:	0003      	movs	r3, r0
 800323a:	000c      	movs	r4, r1
 800323c:	0018      	movs	r0, r3
 800323e:	0021      	movs	r1, r4
 8003240:	f7fe fada 	bl	80017f8 <__aeabi_d2iz>
 8003244:	0002      	movs	r2, r0
 8003246:	23fa      	movs	r3, #250	; 0xfa
 8003248:	0099      	lsls	r1, r3, #2
 800324a:	0010      	movs	r0, r2
 800324c:	f7fc ffe6 	bl	800021c <__divsi3>
 8003250:	0003      	movs	r3, r0
 8003252:	17d9      	asrs	r1, r3, #31
 8003254:	185a      	adds	r2, r3, r1
 8003256:	404a      	eors	r2, r1
 8003258:	4bad      	ldr	r3, [pc, #692]	; (8003510 <run+0x4fc>)
 800325a:	601a      	str	r2, [r3, #0]
	if(r_vol>((Pi*radius*radius*height)/1000)){
 800325c:	4bac      	ldr	r3, [pc, #688]	; (8003510 <run+0x4fc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fe faff 	bl	8001864 <__aeabi_i2d>
 8003266:	0004      	movs	r4, r0
 8003268:	000d      	movs	r5, r1
 800326a:	6938      	ldr	r0, [r7, #16]
 800326c:	f7fe fafa 	bl	8001864 <__aeabi_i2d>
 8003270:	4aa5      	ldr	r2, [pc, #660]	; (8003508 <run+0x4f4>)
 8003272:	4ba6      	ldr	r3, [pc, #664]	; (800350c <run+0x4f8>)
 8003274:	f7fd fd06 	bl	8000c84 <__aeabi_dmul>
 8003278:	0002      	movs	r2, r0
 800327a:	000b      	movs	r3, r1
 800327c:	603a      	str	r2, [r7, #0]
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	6938      	ldr	r0, [r7, #16]
 8003282:	f7fe faef 	bl	8001864 <__aeabi_i2d>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	f7fd fcf9 	bl	8000c84 <__aeabi_dmul>
 8003292:	0002      	movs	r2, r0
 8003294:	000b      	movs	r3, r1
 8003296:	603a      	str	r2, [r7, #0]
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	4b9a      	ldr	r3, [pc, #616]	; (8003504 <run+0x4f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fe fae0 	bl	8001864 <__aeabi_i2d>
 80032a4:	0002      	movs	r2, r0
 80032a6:	000b      	movs	r3, r1
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	f7fd fcea 	bl	8000c84 <__aeabi_dmul>
 80032b0:	0002      	movs	r2, r0
 80032b2:	000b      	movs	r3, r1
 80032b4:	0010      	movs	r0, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	4b96      	ldr	r3, [pc, #600]	; (8003514 <run+0x500>)
 80032bc:	f7fd f8d8 	bl	8000470 <__aeabi_ddiv>
 80032c0:	0002      	movs	r2, r0
 80032c2:	000b      	movs	r3, r1
 80032c4:	0020      	movs	r0, r4
 80032c6:	0029      	movs	r1, r5
 80032c8:	f7fd f8be 	bl	8000448 <__aeabi_dcmpgt>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d033      	beq.n	8003338 <run+0x324>
	r_vol=(Pi*radius*radius*height)/1000;
 80032d0:	6938      	ldr	r0, [r7, #16]
 80032d2:	f7fe fac7 	bl	8001864 <__aeabi_i2d>
 80032d6:	4a8c      	ldr	r2, [pc, #560]	; (8003508 <run+0x4f4>)
 80032d8:	4b8c      	ldr	r3, [pc, #560]	; (800350c <run+0x4f8>)
 80032da:	f7fd fcd3 	bl	8000c84 <__aeabi_dmul>
 80032de:	0003      	movs	r3, r0
 80032e0:	000c      	movs	r4, r1
 80032e2:	0025      	movs	r5, r4
 80032e4:	001c      	movs	r4, r3
 80032e6:	6938      	ldr	r0, [r7, #16]
 80032e8:	f7fe fabc 	bl	8001864 <__aeabi_i2d>
 80032ec:	0002      	movs	r2, r0
 80032ee:	000b      	movs	r3, r1
 80032f0:	0020      	movs	r0, r4
 80032f2:	0029      	movs	r1, r5
 80032f4:	f7fd fcc6 	bl	8000c84 <__aeabi_dmul>
 80032f8:	0003      	movs	r3, r0
 80032fa:	000c      	movs	r4, r1
 80032fc:	0025      	movs	r5, r4
 80032fe:	001c      	movs	r4, r3
 8003300:	4b80      	ldr	r3, [pc, #512]	; (8003504 <run+0x4f0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0018      	movs	r0, r3
 8003306:	f7fe faad 	bl	8001864 <__aeabi_i2d>
 800330a:	0002      	movs	r2, r0
 800330c:	000b      	movs	r3, r1
 800330e:	0020      	movs	r0, r4
 8003310:	0029      	movs	r1, r5
 8003312:	f7fd fcb7 	bl	8000c84 <__aeabi_dmul>
 8003316:	0003      	movs	r3, r0
 8003318:	000c      	movs	r4, r1
 800331a:	0018      	movs	r0, r3
 800331c:	0021      	movs	r1, r4
 800331e:	2200      	movs	r2, #0
 8003320:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <run+0x500>)
 8003322:	f7fd f8a5 	bl	8000470 <__aeabi_ddiv>
 8003326:	0003      	movs	r3, r0
 8003328:	000c      	movs	r4, r1
 800332a:	0018      	movs	r0, r3
 800332c:	0021      	movs	r1, r4
 800332e:	f7fe fa63 	bl	80017f8 <__aeabi_d2iz>
 8003332:	0002      	movs	r2, r0
 8003334:	4b76      	ldr	r3, [pc, #472]	; (8003510 <run+0x4fc>)
 8003336:	601a      	str	r2, [r3, #0]
	}
	if(hlimit>((Pi*((dia/2)*(dia/2))*height)/1000)){  							      // If High Limit> Total Tank Volume ---> High Limit = Tank Volume
 8003338:	4b77      	ldr	r3, [pc, #476]	; (8003518 <run+0x504>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0018      	movs	r0, r3
 800333e:	f7fe fa91 	bl	8001864 <__aeabi_i2d>
 8003342:	0004      	movs	r4, r0
 8003344:	000d      	movs	r5, r1
 8003346:	4b75      	ldr	r3, [pc, #468]	; (800351c <run+0x508>)
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	001a      	movs	r2, r3
 8003350:	4b72      	ldr	r3, [pc, #456]	; (800351c <run+0x508>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	4353      	muls	r3, r2
 800335a:	0018      	movs	r0, r3
 800335c:	f7fe fa82 	bl	8001864 <__aeabi_i2d>
 8003360:	4a69      	ldr	r2, [pc, #420]	; (8003508 <run+0x4f4>)
 8003362:	4b6a      	ldr	r3, [pc, #424]	; (800350c <run+0x4f8>)
 8003364:	f7fd fc8e 	bl	8000c84 <__aeabi_dmul>
 8003368:	0002      	movs	r2, r0
 800336a:	000b      	movs	r3, r1
 800336c:	603a      	str	r2, [r7, #0]
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	4b64      	ldr	r3, [pc, #400]	; (8003504 <run+0x4f0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0018      	movs	r0, r3
 8003376:	f7fe fa75 	bl	8001864 <__aeabi_i2d>
 800337a:	0002      	movs	r2, r0
 800337c:	000b      	movs	r3, r1
 800337e:	6838      	ldr	r0, [r7, #0]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	f7fd fc7f 	bl	8000c84 <__aeabi_dmul>
 8003386:	0002      	movs	r2, r0
 8003388:	000b      	movs	r3, r1
 800338a:	0010      	movs	r0, r2
 800338c:	0019      	movs	r1, r3
 800338e:	2200      	movs	r2, #0
 8003390:	4b60      	ldr	r3, [pc, #384]	; (8003514 <run+0x500>)
 8003392:	f7fd f86d 	bl	8000470 <__aeabi_ddiv>
 8003396:	0002      	movs	r2, r0
 8003398:	000b      	movs	r3, r1
 800339a:	0020      	movs	r0, r4
 800339c:	0029      	movs	r1, r5
 800339e:	f7fd f853 	bl	8000448 <__aeabi_dcmpgt>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d030      	beq.n	8003408 <run+0x3f4>
	hlimit=((Pi*((dia/2)*(dia/2))*height)/1000);
 80033a6:	4b5d      	ldr	r3, [pc, #372]	; (800351c <run+0x508>)
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	001a      	movs	r2, r3
 80033b0:	4b5a      	ldr	r3, [pc, #360]	; (800351c <run+0x508>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4353      	muls	r3, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fe fa52 	bl	8001864 <__aeabi_i2d>
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <run+0x4f4>)
 80033c2:	4b52      	ldr	r3, [pc, #328]	; (800350c <run+0x4f8>)
 80033c4:	f7fd fc5e 	bl	8000c84 <__aeabi_dmul>
 80033c8:	0003      	movs	r3, r0
 80033ca:	000c      	movs	r4, r1
 80033cc:	0025      	movs	r5, r4
 80033ce:	001c      	movs	r4, r3
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <run+0x4f0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fe fa45 	bl	8001864 <__aeabi_i2d>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	0020      	movs	r0, r4
 80033e0:	0029      	movs	r1, r5
 80033e2:	f7fd fc4f 	bl	8000c84 <__aeabi_dmul>
 80033e6:	0003      	movs	r3, r0
 80033e8:	000c      	movs	r4, r1
 80033ea:	0018      	movs	r0, r3
 80033ec:	0021      	movs	r1, r4
 80033ee:	2200      	movs	r2, #0
 80033f0:	4b48      	ldr	r3, [pc, #288]	; (8003514 <run+0x500>)
 80033f2:	f7fd f83d 	bl	8000470 <__aeabi_ddiv>
 80033f6:	0003      	movs	r3, r0
 80033f8:	000c      	movs	r4, r1
 80033fa:	0018      	movs	r0, r3
 80033fc:	0021      	movs	r1, r4
 80033fe:	f7fe f9fb 	bl	80017f8 <__aeabi_d2iz>
 8003402:	0002      	movs	r2, r0
 8003404:	4b44      	ldr	r3, [pc, #272]	; (8003518 <run+0x504>)
 8003406:	601a      	str	r2, [r3, #0]
}
	if(llimit>hlimit){																  // Low Limit cannot be Bigger than High Limit. If so --> Low limit = High limit
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <run+0x50c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <run+0x504>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	dd03      	ble.n	800341c <run+0x408>
	llimit=hlimit;
 8003414:	4b40      	ldr	r3, [pc, #256]	; (8003518 <run+0x504>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <run+0x50c>)
 800341a:	601a      	str	r2, [r3, #0]
}
	sprintf(vl,"%4.4d",(int)(Pi*((dia/2)*(dia/2))*height)/1000);                      //Variable to Character Conversion and Printing real time volume
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <run+0x508>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	b29b      	uxth	r3, r3
 8003424:	001a      	movs	r2, r3
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <run+0x508>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	4353      	muls	r3, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f7fe fa17 	bl	8001864 <__aeabi_i2d>
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <run+0x4f4>)
 8003438:	4b34      	ldr	r3, [pc, #208]	; (800350c <run+0x4f8>)
 800343a:	f7fd fc23 	bl	8000c84 <__aeabi_dmul>
 800343e:	0003      	movs	r3, r0
 8003440:	000c      	movs	r4, r1
 8003442:	0025      	movs	r5, r4
 8003444:	001c      	movs	r4, r3
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <run+0x4f0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	f7fe fa0a 	bl	8001864 <__aeabi_i2d>
 8003450:	0002      	movs	r2, r0
 8003452:	000b      	movs	r3, r1
 8003454:	0020      	movs	r0, r4
 8003456:	0029      	movs	r1, r5
 8003458:	f7fd fc14 	bl	8000c84 <__aeabi_dmul>
 800345c:	0003      	movs	r3, r0
 800345e:	000c      	movs	r4, r1
 8003460:	0018      	movs	r0, r3
 8003462:	0021      	movs	r1, r4
 8003464:	f7fe f9c8 	bl	80017f8 <__aeabi_d2iz>
 8003468:	0002      	movs	r2, r0
 800346a:	23fa      	movs	r3, #250	; 0xfa
 800346c:	0099      	lsls	r1, r3, #2
 800346e:	0010      	movs	r0, r2
 8003470:	f7fc fed4 	bl	800021c <__divsi3>
 8003474:	0003      	movs	r3, r0
 8003476:	001a      	movs	r2, r3
 8003478:	492a      	ldr	r1, [pc, #168]	; (8003524 <run+0x510>)
 800347a:	2408      	movs	r4, #8
 800347c:	193b      	adds	r3, r7, r4
 800347e:	0018      	movs	r0, r3
 8003480:	f002 f866 	bl	8005550 <siprintf>
	// Printing Data on LCD
	sprintf(c,"VOLUME=%4.4d/",r_vol);
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <run+0x4fc>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4927      	ldr	r1, [pc, #156]	; (8003528 <run+0x514>)
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <run+0x518>)
 800348c:	0018      	movs	r0, r3
 800348e:	f002 f85f 	bl	8005550 <siprintf>
	lcd_pos_puts(0,0,c);
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <run+0x518>)
 8003494:	001a      	movs	r2, r3
 8003496:	2100      	movs	r1, #0
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff f89f 	bl	80025dc <lcd_pos_puts>
	lcd_puts(vl);																	  // Prints Tank Volume
 800349e:	193b      	adds	r3, r7, r4
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff f84b 	bl	800253c <lcd_puts>
	lcd_puts(" Lit");
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <run+0x51c>)
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff f847 	bl	800253c <lcd_puts>
	sprintf(c,"H-Limit=%4.4d     Lit",hlimit);										  // Prints High Limit
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <run+0x504>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4920      	ldr	r1, [pc, #128]	; (8003534 <run+0x520>)
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <run+0x518>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f002 f84a 	bl	8005550 <siprintf>
	lcd_pos_puts(0,1,c);
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <run+0x518>)
 80034be:	001a      	movs	r2, r3
 80034c0:	2101      	movs	r1, #1
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7ff f88a 	bl	80025dc <lcd_pos_puts>
	sprintf(c,"L-Limit=%4.4d     Lit",llimit);										  // Prints Low Limit
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <run+0x50c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	491a      	ldr	r1, [pc, #104]	; (8003538 <run+0x524>)
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <run+0x518>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f002 f83d 	bl	8005550 <siprintf>
	lcd_pos_puts(0,2,c);
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <run+0x518>)
 80034d8:	001a      	movs	r2, r3
 80034da:	2102      	movs	r1, #2
 80034dc:	2000      	movs	r0, #0
 80034de:	f7ff f87d 	bl	80025dc <lcd_pos_puts>
	RC_Flag==0 ? lcd_pos_puts(0,3,"PUMP:OFF"): lcd_pos_puts(0,3,"PUMP: ON");          // Prints Control & Safety Relay Status
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <run+0x528>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2201      	movs	r2, #1
 80034e8:	4053      	eors	r3, r2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d029      	beq.n	8003544 <run+0x530>
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <run+0x52c>)
 80034f2:	001a      	movs	r2, r3
 80034f4:	2103      	movs	r1, #3
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7ff f870 	bl	80025dc <lcd_pos_puts>
 80034fc:	e028      	b.n	8003550 <run+0x53c>
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	200000dc 	.word	0x200000dc
 8003504:	200000c0 	.word	0x200000c0
 8003508:	c083126f 	.word	0xc083126f
 800350c:	400921ca 	.word	0x400921ca
 8003510:	200000b0 	.word	0x200000b0
 8003514:	408f4000 	.word	0x408f4000
 8003518:	200000b4 	.word	0x200000b4
 800351c:	200000bc 	.word	0x200000bc
 8003520:	200000b8 	.word	0x200000b8
 8003524:	08005e38 	.word	0x08005e38
 8003528:	08005e40 	.word	0x08005e40
 800352c:	200000f4 	.word	0x200000f4
 8003530:	08005e50 	.word	0x08005e50
 8003534:	08005e58 	.word	0x08005e58
 8003538:	08005e70 	.word	0x08005e70
 800353c:	200000c4 	.word	0x200000c4
 8003540:	08005e88 	.word	0x08005e88
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <run+0x5c0>)
 8003546:	001a      	movs	r2, r3
 8003548:	2103      	movs	r1, #3
 800354a:	2000      	movs	r0, #0
 800354c:	f7ff f846 	bl	80025dc <lcd_pos_puts>
	//----------------------
	// Relay Control
	if(r_vol>hlimit){ 																  // Higher than High Limit ----> Control Relay(Pump) Off
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <run+0x5c4>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <run+0x5c8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	dd09      	ble.n	8003570 <run+0x55c>

		RelayCL;
 800355c:	2390      	movs	r3, #144	; 0x90
 800355e:	05db      	lsls	r3, r3, #23
 8003560:	2200      	movs	r2, #0
 8003562:	2120      	movs	r1, #32
 8003564:	0018      	movs	r0, r3
 8003566:	f001 f89a 	bl	800469e <HAL_GPIO_WritePin>
	RC_Flag=0;
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <run+0x5cc>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]

	}
	if(r_vol<llimit){ 															   	  // Lower than Low Limit ----> Control Relay(Pump) ON
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <run+0x5c4>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <run+0x5d0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	da09      	bge.n	8003590 <run+0x57c>

		RelayCH;
 800357c:	2390      	movs	r3, #144	; 0x90
 800357e:	05db      	lsls	r3, r3, #23
 8003580:	2201      	movs	r2, #1
 8003582:	2120      	movs	r1, #32
 8003584:	0018      	movs	r0, r3
 8003586:	f001 f88a 	bl	800469e <HAL_GPIO_WritePin>
	RC_Flag=1;
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <run+0x5cc>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]

	}
	// Returns to Main Menu
    if(KeyOK==0){
 8003590:	2390      	movs	r3, #144	; 0x90
 8003592:	05db      	lsls	r3, r3, #23
 8003594:	2108      	movs	r1, #8
 8003596:	0018      	movs	r0, r3
 8003598:	f001 f864 	bl	8004664 <HAL_GPIO_ReadPin>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d000      	beq.n	80035a2 <run+0x58e>
 80035a0:	e5ec      	b.n	800317c <run+0x168>
    	lcd_clrscr();
 80035a2:	f7fe ffc0 	bl	8002526 <lcd_clrscr>
    	HAL_Delay(200);
 80035a6:	20c8      	movs	r0, #200	; 0xc8
 80035a8:	f000 fbf8 	bl	8003d9c <HAL_Delay>
    RC_Flag=0;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <run+0x5cc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
    RelayCL;
 80035b2:	2390      	movs	r3, #144	; 0x90
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	2200      	movs	r2, #0
 80035b8:	2120      	movs	r1, #32
 80035ba:	0018      	movs	r0, r3
 80035bc:	f001 f86f 	bl	800469e <HAL_GPIO_WritePin>
    run_flag=0;
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <run+0x5d4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]

    main_menu();
 80035c6:	f7ff f9bd 	bl	8002944 <main_menu>

    break;
 80035ca:	46c0      	nop			; (mov r8, r8)
        }
}
return;
 80035cc:	46c0      	nop			; (mov r8, r8)
}
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b006      	add	sp, #24
 80035d2:	bdb0      	pop	{r4, r5, r7, pc}
 80035d4:	08005e94 	.word	0x08005e94
 80035d8:	200000b0 	.word	0x200000b0
 80035dc:	200000b4 	.word	0x200000b4
 80035e0:	200000c4 	.word	0x200000c4
 80035e4:	200000b8 	.word	0x200000b8
 80035e8:	20000000 	.word	0x20000000

080035ec <manual>:

void manual(void){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	lcd_clrscr();
 80035f0:	f7fe ff99 	bl	8002526 <lcd_clrscr>
	lcd_pos_puts(0,0,"MANUAL PUMP CONTROL");
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <manual+0xdc>)
 80035f6:	001a      	movs	r2, r3
 80035f8:	2100      	movs	r1, #0
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fe ffee 	bl	80025dc <lcd_pos_puts>
	RC_Flag=0;
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <manual+0xe0>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
	RelayCL;
 8003606:	2390      	movs	r3, #144	; 0x90
 8003608:	05db      	lsls	r3, r3, #23
 800360a:	2200      	movs	r2, #0
 800360c:	2120      	movs	r1, #32
 800360e:	0018      	movs	r0, r3
 8003610:	f001 f845 	bl	800469e <HAL_GPIO_WritePin>
	while(1){
	HAL_IWDG_Refresh(&hiwdg);													   // Watchdog Reset
 8003614:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <manual+0xe4>)
 8003616:	0018      	movs	r0, r3
 8003618:	f001 f8e0 	bl	80047dc <HAL_IWDG_Refresh>
	RC_Flag==0 ? lcd_pos_puts(0,1,"PUMP:OFF"): lcd_pos_puts(0,1,"PUMP: ON");  	   // Relay situation Print
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <manual+0xe0>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2201      	movs	r2, #1
 8003622:	4053      	eors	r3, r2
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <manual+0x4c>
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <manual+0xe8>)
 800362c:	001a      	movs	r2, r3
 800362e:	2101      	movs	r1, #1
 8003630:	2000      	movs	r0, #0
 8003632:	f7fe ffd3 	bl	80025dc <lcd_pos_puts>
 8003636:	e005      	b.n	8003644 <manual+0x58>
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <manual+0xec>)
 800363a:	001a      	movs	r2, r3
 800363c:	2101      	movs	r1, #1
 800363e:	2000      	movs	r0, #0
 8003640:	f7fe ffcc 	bl	80025dc <lcd_pos_puts>
if(KeyOK==0){																	   // Toggles Relay when OK key Pressed
 8003644:	2390      	movs	r3, #144	; 0x90
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	2108      	movs	r1, #8
 800364a:	0018      	movs	r0, r3
 800364c:	f001 f80a 	bl	8004664 <HAL_GPIO_ReadPin>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d112      	bne.n	800367a <manual+0x8e>
	HAL_Delay(250);
 8003654:	20fa      	movs	r0, #250	; 0xfa
 8003656:	f000 fba1 	bl	8003d9c <HAL_Delay>
	RC_Flag^=1;
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <manual+0xe0>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	4053      	eors	r3, r2
 8003662:	b2db      	uxtb	r3, r3
 8003664:	1e5a      	subs	r2, r3, #1
 8003666:	4193      	sbcs	r3, r2
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <manual+0xe0>)
 800366c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800366e:	2390      	movs	r3, #144	; 0x90
 8003670:	05db      	lsls	r3, r3, #23
 8003672:	2120      	movs	r1, #32
 8003674:	0018      	movs	r0, r3
 8003676:	f001 f82f 	bl	80046d8 <HAL_GPIO_TogglePin>
	}
if(KeyL==0&&KeyR==0){															   // Backs to Normal Mode (Main Menu)
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	005a      	lsls	r2, r3, #1
 800367e:	2390      	movs	r3, #144	; 0x90
 8003680:	05db      	lsls	r3, r3, #23
 8003682:	0011      	movs	r1, r2
 8003684:	0018      	movs	r0, r3
 8003686:	f000 ffed 	bl	8004664 <HAL_GPIO_ReadPin>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d1c2      	bne.n	8003614 <manual+0x28>
 800368e:	2390      	movs	r3, #144	; 0x90
 8003690:	05db      	lsls	r3, r3, #23
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	0018      	movs	r0, r3
 8003696:	f000 ffe5 	bl	8004664 <HAL_GPIO_ReadPin>
 800369a:	1e03      	subs	r3, r0, #0
 800369c:	d1ba      	bne.n	8003614 <manual+0x28>
	HAL_Delay(250);
 800369e:	20fa      	movs	r0, #250	; 0xfa
 80036a0:	f000 fb7c 	bl	8003d9c <HAL_Delay>
	RC_Flag=0;
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <manual+0xe0>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
	RelayCL;
 80036aa:	2390      	movs	r3, #144	; 0x90
 80036ac:	05db      	lsls	r3, r3, #23
 80036ae:	2200      	movs	r2, #0
 80036b0:	2120      	movs	r1, #32
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 fff3 	bl	800469e <HAL_GPIO_WritePin>
	lcd_clrscr();
 80036b8:	f7fe ff35 	bl	8002526 <lcd_clrscr>
	main_menu();
 80036bc:	f7ff f942 	bl	8002944 <main_menu>
	break;
 80036c0:	46c0      	nop			; (mov r8, r8)
}
}
return;
 80036c2:	46c0      	nop			; (mov r8, r8)
}
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08005ea0 	.word	0x08005ea0
 80036cc:	200000c4 	.word	0x200000c4
 80036d0:	200000dc 	.word	0x200000dc
 80036d4:	08005e88 	.word	0x08005e88
 80036d8:	08005e94 	.word	0x08005e94

080036dc <gui>:
// ----------------------------- GUI Main Function ---------------------------------

void gui(void){
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0

gui_config();  							   // Configs LCD
 80036e0:	f7ff f91e 	bl	8002920 <gui_config>
main_menu();							   // Loads Main Menu
 80036e4:	f7ff f92e 	bl	8002944 <main_menu>
EE_ReadVariable(0, &EEPROM_value_r[0]);    // Reads Value from Address 0 of EEPROM
 80036e8:	4b4f      	ldr	r3, [pc, #316]	; (8003828 <gui+0x14c>)
 80036ea:	0019      	movs	r1, r3
 80036ec:	2000      	movs	r0, #0
 80036ee:	f7fe fbef 	bl	8001ed0 <EE_ReadVariable>
EE_ReadVariable(1, &EEPROM_value_r[1]);	   // Reads Value from Address 1 of EEPROM
 80036f2:	4b4e      	ldr	r3, [pc, #312]	; (800382c <gui+0x150>)
 80036f4:	0019      	movs	r1, r3
 80036f6:	2001      	movs	r0, #1
 80036f8:	f7fe fbea 	bl	8001ed0 <EE_ReadVariable>
EE_ReadVariable(2, &EEPROM_value_r[2]);    // Reads Value from Address 2 of EEPROM
 80036fc:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <gui+0x154>)
 80036fe:	0019      	movs	r1, r3
 8003700:	2002      	movs	r0, #2
 8003702:	f7fe fbe5 	bl	8001ed0 <EE_ReadVariable>
EE_ReadVariable(3, &EEPROM_value_r[3]);    // Reads Value from Address 3 of EEPROM
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <gui+0x158>)
 8003708:	0019      	movs	r1, r3
 800370a:	2003      	movs	r0, #3
 800370c:	f7fe fbe0 	bl	8001ed0 <EE_ReadVariable>

dia=EEPROM_value_r[0];					   // Puts Value on Address 0 in to the Diameter Variable
 8003710:	4b45      	ldr	r3, [pc, #276]	; (8003828 <gui+0x14c>)
 8003712:	881a      	ldrh	r2, [r3, #0]
 8003714:	4b48      	ldr	r3, [pc, #288]	; (8003838 <gui+0x15c>)
 8003716:	801a      	strh	r2, [r3, #0]
height=EEPROM_value_r[1];				   // Puts Value on Address 1 in to the Height Variable
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <gui+0x14c>)
 800371a:	885b      	ldrh	r3, [r3, #2]
 800371c:	001a      	movs	r2, r3
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <gui+0x160>)
 8003720:	601a      	str	r2, [r3, #0]
hlimit=EEPROM_value_r[2];				   // Puts Value on Address 2 in to the High Limit Variable
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <gui+0x14c>)
 8003724:	889b      	ldrh	r3, [r3, #4]
 8003726:	001a      	movs	r2, r3
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <gui+0x164>)
 800372a:	601a      	str	r2, [r3, #0]
llimit=EEPROM_value_r[3];				   // Puts Value on Address 3 in to the Low Limit Variable
 800372c:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <gui+0x14c>)
 800372e:	88db      	ldrh	r3, [r3, #6]
 8003730:	001a      	movs	r2, r3
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <gui+0x168>)
 8003734:	601a      	str	r2, [r3, #0]


if(hlimit!=0&&llimit!=0&&dia!=0&&height!=0&&run_flag==1){ // Error if one of parameters=0
 8003736:	4b42      	ldr	r3, [pc, #264]	; (8003840 <gui+0x164>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <gui+0x8c>
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <gui+0x168>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <gui+0x8c>
 8003746:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <gui+0x15c>)
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <gui+0x8c>
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <gui+0x160>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <gui+0x8c>
 8003756:	4b3c      	ldr	r3, [pc, #240]	; (8003848 <gui+0x16c>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <gui+0x8c>
	HAL_Delay(50);
 800375e:	2032      	movs	r0, #50	; 0x32
 8003760:	f000 fb1c 	bl	8003d9c <HAL_Delay>
	run();
 8003764:	f7ff fc56 	bl	8003014 <run>
}



while(1){
	HAL_IWDG_Refresh(&hiwdg);			   // Watchdog Reset
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <gui+0x170>)
 800376a:	0018      	movs	r0, r3
 800376c:	f001 f836 	bl	80047dc <HAL_IWDG_Refresh>
	if(KeyL==0&&KeyR==0){			       // Manual Mode
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	005a      	lsls	r2, r3, #1
 8003774:	2390      	movs	r3, #144	; 0x90
 8003776:	05db      	lsls	r3, r3, #23
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f000 ff72 	bl	8004664 <HAL_GPIO_ReadPin>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d10c      	bne.n	800379e <gui+0xc2>
 8003784:	2390      	movs	r3, #144	; 0x90
 8003786:	05db      	lsls	r3, r3, #23
 8003788:	2180      	movs	r1, #128	; 0x80
 800378a:	0018      	movs	r0, r3
 800378c:	f000 ff6a 	bl	8004664 <HAL_GPIO_ReadPin>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d104      	bne.n	800379e <gui+0xc2>
	HAL_Delay(200);
 8003794:	20c8      	movs	r0, #200	; 0xc8
 8003796:	f000 fb01 	bl	8003d9c <HAL_Delay>
	manual();
 800379a:	f7ff ff27 	bl	80035ec <manual>
	}

	if(KeyM==0){
 800379e:	2390      	movs	r3, #144	; 0x90
 80037a0:	05db      	lsls	r3, r3, #23
 80037a2:	2104      	movs	r1, #4
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 ff5d 	bl	8004664 <HAL_GPIO_ReadPin>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d10e      	bne.n	80037cc <gui+0xf0>
	HAL_Delay(200);                    // Delay Based debouncing
 80037ae:	20c8      	movs	r0, #200	; 0xc8
 80037b0:	f000 faf4 	bl	8003d9c <HAL_Delay>
	cursor=((cursor&1)^1);             // Changes Cursor Position
 80037b4:	4b26      	ldr	r3, [pc, #152]	; (8003850 <gui+0x174>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2201      	movs	r2, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	425a      	negs	r2, r3
 80037be:	4153      	adcs	r3, r2
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	001a      	movs	r2, r3
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <gui+0x174>)
 80037c6:	601a      	str	r2, [r3, #0]
	main_menu();                       // Main Menu Load
 80037c8:	f7ff f8bc 	bl	8002944 <main_menu>
}
	if(KeyP==0){
 80037cc:	2390      	movs	r3, #144	; 0x90
 80037ce:	05db      	lsls	r3, r3, #23
 80037d0:	2110      	movs	r1, #16
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 ff46 	bl	8004664 <HAL_GPIO_ReadPin>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d10e      	bne.n	80037fa <gui+0x11e>
	HAL_Delay(200);                    // Delay Based debouncing
 80037dc:	20c8      	movs	r0, #200	; 0xc8
 80037de:	f000 fadd 	bl	8003d9c <HAL_Delay>
	cursor=((cursor&1)^1);             // Changes Cursor Position
 80037e2:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <gui+0x174>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	425a      	negs	r2, r3
 80037ec:	4153      	adcs	r3, r2
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	001a      	movs	r2, r3
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <gui+0x174>)
 80037f4:	601a      	str	r2, [r3, #0]
	main_menu();                       // Main Menu Load
 80037f6:	f7ff f8a5 	bl	8002944 <main_menu>
}

if(KeyOK==0){
 80037fa:	2390      	movs	r3, #144	; 0x90
 80037fc:	05db      	lsls	r3, r3, #23
 80037fe:	2108      	movs	r1, #8
 8003800:	0018      	movs	r0, r3
 8003802:	f000 ff2f 	bl	8004664 <HAL_GPIO_ReadPin>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d1ae      	bne.n	8003768 <gui+0x8c>
	HAL_Delay(200);                       // Delay Based debouncing
 800380a:	20c8      	movs	r0, #200	; 0xc8
 800380c:	f000 fac6 	bl	8003d9c <HAL_Delay>
	cursor==1 ? setting() : run(); 			  // Choosing Menu Function(Setting or Run)
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <gui+0x174>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <gui+0x142>
 8003818:	f7ff fb5c 	bl	8002ed4 <setting>
 800381c:	e001      	b.n	8003822 <gui+0x146>
 800381e:	f7ff fbf9 	bl	8003014 <run>
	gui();
 8003822:	f7ff ff5b 	bl	80036dc <gui>
	HAL_IWDG_Refresh(&hiwdg);			   // Watchdog Reset
 8003826:	e79f      	b.n	8003768 <gui+0x8c>
 8003828:	200000ec 	.word	0x200000ec
 800382c:	200000ee 	.word	0x200000ee
 8003830:	200000f0 	.word	0x200000f0
 8003834:	200000f2 	.word	0x200000f2
 8003838:	200000bc 	.word	0x200000bc
 800383c:	200000c0 	.word	0x200000c0
 8003840:	200000b4 	.word	0x200000b4
 8003844:	200000b8 	.word	0x200000b8
 8003848:	20000000 	.word	0x20000000
 800384c:	200000dc 	.word	0x200000dc
 8003850:	200000ac 	.word	0x200000ac

08003854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003858:	f000 fa3c 	bl	8003cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800385c:	f000 f814 	bl	8003888 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003860:	f000 f8a4 	bl	80039ac <MX_GPIO_Init>
  MX_TIM14_Init();
 8003864:	f000 f87c 	bl	8003960 <MX_TIM14_Init>
  MX_IWDG_Init();
 8003868:	f000 f85a 	bl	8003920 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <main+0x30>)
 800386e:	0018      	movs	r0, r3
 8003870:	f000 ffb4 	bl	80047dc <HAL_IWDG_Refresh>

  HAL_FLASH_Unlock();
 8003874:	f000 fc28 	bl	80040c8 <HAL_FLASH_Unlock>
  EE_Init();
 8003878:	f7fe f87e 	bl	8001978 <EE_Init>
  gui();
 800387c:	f7ff ff2e 	bl	80036dc <gui>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003880:	e7fe      	b.n	8003880 <main+0x2c>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	200000dc 	.word	0x200000dc

08003888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b091      	sub	sp, #68	; 0x44
 800388c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800388e:	2410      	movs	r4, #16
 8003890:	193b      	adds	r3, r7, r4
 8003892:	0018      	movs	r0, r3
 8003894:	2330      	movs	r3, #48	; 0x30
 8003896:	001a      	movs	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f001 fe51 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800389e:	003b      	movs	r3, r7
 80038a0:	0018      	movs	r0, r3
 80038a2:	2310      	movs	r3, #16
 80038a4:	001a      	movs	r2, r3
 80038a6:	2100      	movs	r1, #0
 80038a8:	f001 fe4a 	bl	8005540 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80038ac:	0021      	movs	r1, r4
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	2209      	movs	r2, #9
 80038b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038b4:	187b      	adds	r3, r7, r1
 80038b6:	2201      	movs	r2, #1
 80038b8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	2201      	movs	r2, #1
 80038be:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	2202      	movs	r2, #2
 80038c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0252      	lsls	r2, r2, #9
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	0352      	lsls	r2, r2, #13
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	2200      	movs	r2, #0
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	0018      	movs	r0, r3
 80038e0:	f000 ff8c 	bl	80047fc <HAL_RCC_OscConfig>
 80038e4:	1e03      	subs	r3, r0, #0
 80038e6:	d001      	beq.n	80038ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80038e8:	f000 f90e 	bl	8003b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ec:	003b      	movs	r3, r7
 80038ee:	2207      	movs	r2, #7
 80038f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f2:	003b      	movs	r3, r7
 80038f4:	2202      	movs	r2, #2
 80038f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f8:	003b      	movs	r3, r7
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038fe:	003b      	movs	r3, r7
 8003900:	2200      	movs	r2, #0
 8003902:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003904:	003b      	movs	r3, r7
 8003906:	2101      	movs	r1, #1
 8003908:	0018      	movs	r0, r3
 800390a:	f001 fa93 	bl	8004e34 <HAL_RCC_ClockConfig>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003912:	f000 f8f9 	bl	8003b08 <Error_Handler>
  }
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b011      	add	sp, #68	; 0x44
 800391c:	bd90      	pop	{r4, r7, pc}
	...

08003920 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <MX_IWDG_Init+0x34>)
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <MX_IWDG_Init+0x38>)
 8003928:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <MX_IWDG_Init+0x34>)
 800392c:	2205      	movs	r2, #5
 800392e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 1000-1;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <MX_IWDG_Init+0x34>)
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <MX_IWDG_Init+0x3c>)
 8003934:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1000-1;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <MX_IWDG_Init+0x34>)
 8003938:	4a08      	ldr	r2, [pc, #32]	; (800395c <MX_IWDG_Init+0x3c>)
 800393a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <MX_IWDG_Init+0x34>)
 800393e:	0018      	movs	r0, r3
 8003940:	f000 ff02 	bl	8004748 <HAL_IWDG_Init>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8003948:	f000 f8de 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	200000dc 	.word	0x200000dc
 8003958:	40003000 	.word	0x40003000
 800395c:	000003e7 	.word	0x000003e7

08003960 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <MX_TIM14_Init+0x40>)
 8003966:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <MX_TIM14_Init+0x44>)
 8003968:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <MX_TIM14_Init+0x40>)
 800396c:	222f      	movs	r2, #47	; 0x2f
 800396e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <MX_TIM14_Init+0x40>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <MX_TIM14_Init+0x40>)
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <MX_TIM14_Init+0x48>)
 800397a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <MX_TIM14_Init+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <MX_TIM14_Init+0x40>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <MX_TIM14_Init+0x40>)
 800398a:	0018      	movs	r0, r3
 800398c:	f001 fb84 	bl	8005098 <HAL_TIM_Base_Init>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003994:	f000 f8b8 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20000110 	.word	0x20000110
 80039a4:	40002000 	.word	0x40002000
 80039a8:	0000ffff 	.word	0x0000ffff

080039ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b089      	sub	sp, #36	; 0x24
 80039b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b2:	240c      	movs	r4, #12
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	0018      	movs	r0, r3
 80039b8:	2314      	movs	r3, #20
 80039ba:	001a      	movs	r2, r3
 80039bc:	2100      	movs	r1, #0
 80039be:	f001 fdbf 	bl	8005540 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039c2:	4b4e      	ldr	r3, [pc, #312]	; (8003afc <MX_GPIO_Init+0x150>)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <MX_GPIO_Init+0x150>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	03c9      	lsls	r1, r1, #15
 80039cc:	430a      	orrs	r2, r1
 80039ce:	615a      	str	r2, [r3, #20]
 80039d0:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <MX_GPIO_Init+0x150>)
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	03db      	lsls	r3, r3, #15
 80039d8:	4013      	ands	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <MX_GPIO_Init+0x150>)
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	4b46      	ldr	r3, [pc, #280]	; (8003afc <MX_GPIO_Init+0x150>)
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0289      	lsls	r1, r1, #10
 80039e8:	430a      	orrs	r2, r1
 80039ea:	615a      	str	r2, [r3, #20]
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <MX_GPIO_Init+0x150>)
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	029b      	lsls	r3, r3, #10
 80039f4:	4013      	ands	r3, r2
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fa:	4b40      	ldr	r3, [pc, #256]	; (8003afc <MX_GPIO_Init+0x150>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <MX_GPIO_Init+0x150>)
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	02c9      	lsls	r1, r1, #11
 8003a04:	430a      	orrs	r2, r1
 8003a06:	615a      	str	r2, [r3, #20]
 8003a08:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <MX_GPIO_Init+0x150>)
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	02db      	lsls	r3, r3, #11
 8003a10:	4013      	ands	r3, r2
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003a16:	2390      	movs	r3, #144	; 0x90
 8003a18:	05db      	lsls	r3, r3, #23
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2162      	movs	r1, #98	; 0x62
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fe3d 	bl	800469e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <MX_GPIO_Init+0x154>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	21fb      	movs	r1, #251	; 0xfb
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fe37 	bl	800469e <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <MX_GPIO_Init+0x158>)
 8003a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a42:	193a      	adds	r2, r7, r4
 8003a44:	2390      	movs	r3, #144	; 0x90
 8003a46:	05db      	lsls	r3, r3, #23
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fc9a 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2202      	movs	r2, #2
 8003a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	2201      	movs	r2, #1
 8003a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	2202      	movs	r2, #2
 8003a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	2203      	movs	r2, #3
 8003a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	193a      	adds	r2, r7, r4
 8003a6a:	2390      	movs	r3, #144	; 0x90
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fc87 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8003a76:	193b      	adds	r3, r7, r4
 8003a78:	22ce      	movs	r2, #206	; 0xce
 8003a7a:	0052      	lsls	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a7e:	193b      	adds	r3, r7, r4
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a84:	193b      	adds	r3, r7, r4
 8003a86:	2201      	movs	r2, #1
 8003a88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	193a      	adds	r2, r7, r4
 8003a8c:	2390      	movs	r3, #144	; 0x90
 8003a8e:	05db      	lsls	r3, r3, #23
 8003a90:	0011      	movs	r1, r2
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fc76 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	2260      	movs	r2, #96	; 0x60
 8003a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	193a      	adds	r2, r7, r4
 8003ab2:	2390      	movs	r3, #144	; 0x90
 8003ab4:	05db      	lsls	r3, r3, #23
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 fc63 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8003abe:	0021      	movs	r1, r4
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	22fb      	movs	r2, #251	; 0xfb
 8003ac4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	2201      	movs	r2, #1
 8003aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <MX_GPIO_Init+0x154>)
 8003adc:	0019      	movs	r1, r3
 8003ade:	0010      	movs	r0, r2
 8003ae0:	f000 fc50 	bl	8004384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2005      	movs	r0, #5
 8003aea:	f000 fa25 	bl	8003f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003aee:	2005      	movs	r0, #5
 8003af0:	f000 fa37 	bl	8003f62 <HAL_NVIC_EnableIRQ>

}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b009      	add	sp, #36	; 0x24
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	48000400 	.word	0x48000400
 8003b04:	10310000 	.word	0x10310000

08003b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_MspInit+0x44>)
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_MspInit+0x44>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	430a      	orrs	r2, r1
 8003b24:	619a      	str	r2, [r3, #24]
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_MspInit+0x44>)
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_MspInit+0x44>)
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_MspInit+0x44>)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0549      	lsls	r1, r1, #21
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	61da      	str	r2, [r3, #28]
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_MspInit+0x44>)
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	055b      	lsls	r3, r3, #21
 8003b48:	4013      	ands	r3, r2
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_TIM_Base_MspInit+0x48>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d115      	bne.n	8003b9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	0049      	lsls	r1, r1, #1
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	61da      	str	r2, [r3, #28]
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	2013      	movs	r0, #19
 8003b90:	f000 f9d2 	bl	8003f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003b94:	2013      	movs	r0, #19
 8003b96:	f000 f9e4 	bl	8003f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	40002000 	.word	0x40002000
 8003ba8:	40021000 	.word	0x40021000

08003bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bba:	e7fe      	b.n	8003bba <HardFault_Handler+0x4>

08003bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bd4:	f000 f8c6 	bl	8003d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f000 fd94 	bl	8004710 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <TIM14_IRQHandler+0x14>)
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f001 fac6 	bl	8005188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	20000110 	.word	0x20000110

08003c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <_sbrk+0x5c>)
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <_sbrk+0x60>)
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <_sbrk+0x64>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <_sbrk+0x64>)
 8003c26:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <_sbrk+0x68>)
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <_sbrk+0x64>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d207      	bcs.n	8003c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c38:	f001 fc58 	bl	80054ec <__errno>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	220c      	movs	r2, #12
 8003c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	425b      	negs	r3, r3
 8003c46:	e009      	b.n	8003c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <_sbrk+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <_sbrk+0x64>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	18d2      	adds	r2, r2, r3
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <_sbrk+0x64>)
 8003c58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b006      	add	sp, #24
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20001000 	.word	0x20001000
 8003c68:	00000400 	.word	0x00000400
 8003c6c:	200000c8 	.word	0x200000c8
 8003c70:	20000180 	.word	0x20000180

08003c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c80:	480d      	ldr	r0, [pc, #52]	; (8003cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8003c86:	490e      	ldr	r1, [pc, #56]	; (8003cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c88:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <LoopForever+0xe>)
  movs r3, #0
 8003c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c8c:	e002      	b.n	8003c94 <LoopCopyDataInit>

08003c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c92:	3304      	adds	r3, #4

08003c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c98:	d3f9      	bcc.n	8003c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c9c:	4c0b      	ldr	r4, [pc, #44]	; (8003ccc <LoopForever+0x16>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca0:	e001      	b.n	8003ca6 <LoopFillZerobss>

08003ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ca4:	3204      	adds	r2, #4

08003ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca8:	d3fb      	bcc.n	8003ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003caa:	f7ff ffe3 	bl	8003c74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003cae:	f001 fc23 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cb2:	f7ff fdcf 	bl	8003854 <main>

08003cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8003cb6:	e7fe      	b.n	8003cb6 <LoopForever>
  ldr   r0, =_estack
 8003cb8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cc0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003cc4:	08005fa0 	.word	0x08005fa0
  ldr r2, =_sbss
 8003cc8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003ccc:	2000017c 	.word	0x2000017c

08003cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003cd0:	e7fe      	b.n	8003cd0 <ADC1_IRQHandler>
	...

08003cd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd8:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <HAL_Init+0x24>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_Init+0x24>)
 8003cde:	2110      	movs	r1, #16
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f000 f809 	bl	8003cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cea:	f7ff ff13 	bl	8003b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	40022000 	.word	0x40022000

08003cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d04:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_InitTick+0x5c>)
 8003d06:	681c      	ldr	r4, [r3, #0]
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_InitTick+0x60>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	23fa      	movs	r3, #250	; 0xfa
 8003d10:	0098      	lsls	r0, r3, #2
 8003d12:	f7fc f9f9 	bl	8000108 <__udivsi3>
 8003d16:	0003      	movs	r3, r0
 8003d18:	0019      	movs	r1, r3
 8003d1a:	0020      	movs	r0, r4
 8003d1c:	f7fc f9f4 	bl	8000108 <__udivsi3>
 8003d20:	0003      	movs	r3, r0
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 f92d 	bl	8003f82 <HAL_SYSTICK_Config>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e00f      	b.n	8003d50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d80b      	bhi.n	8003d4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	2301      	movs	r3, #1
 8003d3a:	425b      	negs	r3, r3
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 f8fa 	bl	8003f38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_InitTick+0x64>)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b003      	add	sp, #12
 8003d56:	bd90      	pop	{r4, r7, pc}
 8003d58:	2000000c 	.word	0x2000000c
 8003d5c:	20000014 	.word	0x20000014
 8003d60:	20000010 	.word	0x20000010

08003d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_IncTick+0x1c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_IncTick+0x20>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	18d2      	adds	r2, r2, r3
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_IncTick+0x20>)
 8003d76:	601a      	str	r2, [r3, #0]
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20000014 	.word	0x20000014
 8003d84:	20000150 	.word	0x20000150

08003d88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d8c:	4b02      	ldr	r3, [pc, #8]	; (8003d98 <HAL_GetTick+0x10>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	20000150 	.word	0x20000150

08003d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_GetTick>
 8003da8:	0003      	movs	r3, r0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	d005      	beq.n	8003dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_Delay+0x40>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	001a      	movs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	f7ff ffe0 	bl	8003d88 <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d8f7      	bhi.n	8003dc4 <HAL_Delay+0x28>
  {
  }
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000014 	.word	0x20000014

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	0002      	movs	r2, r0
 8003de8:	1dfb      	adds	r3, r7, #7
 8003dea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b7f      	cmp	r3, #127	; 0x7f
 8003df2:	d809      	bhi.n	8003e08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	001a      	movs	r2, r3
 8003dfa:	231f      	movs	r3, #31
 8003dfc:	401a      	ands	r2, r3
 8003dfe:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <__NVIC_EnableIRQ+0x30>)
 8003e00:	2101      	movs	r1, #1
 8003e02:	4091      	lsls	r1, r2
 8003e04:	000a      	movs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
  }
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b7f      	cmp	r3, #127	; 0x7f
 8003e28:	d828      	bhi.n	8003e7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <__NVIC_SetPriority+0xd4>)
 8003e2c:	1dfb      	adds	r3, r7, #7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	33c0      	adds	r3, #192	; 0xc0
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	589b      	ldr	r3, [r3, r2]
 8003e3a:	1dfa      	adds	r2, r7, #7
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	2203      	movs	r2, #3
 8003e42:	400a      	ands	r2, r1
 8003e44:	00d2      	lsls	r2, r2, #3
 8003e46:	21ff      	movs	r1, #255	; 0xff
 8003e48:	4091      	lsls	r1, r2
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	43d2      	mvns	r2, r2
 8003e4e:	401a      	ands	r2, r3
 8003e50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	019b      	lsls	r3, r3, #6
 8003e56:	22ff      	movs	r2, #255	; 0xff
 8003e58:	401a      	ands	r2, r3
 8003e5a:	1dfb      	adds	r3, r7, #7
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	2303      	movs	r3, #3
 8003e62:	4003      	ands	r3, r0
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e68:	481f      	ldr	r0, [pc, #124]	; (8003ee8 <__NVIC_SetPriority+0xd4>)
 8003e6a:	1dfb      	adds	r3, r7, #7
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	430a      	orrs	r2, r1
 8003e74:	33c0      	adds	r3, #192	; 0xc0
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e7a:	e031      	b.n	8003ee0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <__NVIC_SetPriority+0xd8>)
 8003e7e:	1dfb      	adds	r3, r7, #7
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	0019      	movs	r1, r3
 8003e84:	230f      	movs	r3, #15
 8003e86:	400b      	ands	r3, r1
 8003e88:	3b08      	subs	r3, #8
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	3306      	adds	r3, #6
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	18d3      	adds	r3, r2, r3
 8003e92:	3304      	adds	r3, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1dfa      	adds	r2, r7, #7
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	00d2      	lsls	r2, r2, #3
 8003ea2:	21ff      	movs	r1, #255	; 0xff
 8003ea4:	4091      	lsls	r1, r2
 8003ea6:	000a      	movs	r2, r1
 8003ea8:	43d2      	mvns	r2, r2
 8003eaa:	401a      	ands	r2, r3
 8003eac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	22ff      	movs	r2, #255	; 0xff
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	1dfb      	adds	r3, r7, #7
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	4003      	ands	r3, r0
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ec4:	4809      	ldr	r0, [pc, #36]	; (8003eec <__NVIC_SetPriority+0xd8>)
 8003ec6:	1dfb      	adds	r3, r7, #7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	001c      	movs	r4, r3
 8003ecc:	230f      	movs	r3, #15
 8003ece:	4023      	ands	r3, r4
 8003ed0:	3b08      	subs	r3, #8
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	3306      	adds	r3, #6
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	18c3      	adds	r3, r0, r3
 8003edc:	3304      	adds	r3, #4
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b003      	add	sp, #12
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	e000e100 	.word	0xe000e100
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <SysTick_Config+0x40>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f02:	2301      	movs	r3, #1
 8003f04:	e010      	b.n	8003f28 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <SysTick_Config+0x44>)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	3a01      	subs	r2, #1
 8003f0c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	425b      	negs	r3, r3
 8003f12:	2103      	movs	r1, #3
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff7d 	bl	8003e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <SysTick_Config+0x44>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <SysTick_Config+0x44>)
 8003f22:	2207      	movs	r2, #7
 8003f24:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	00ffffff 	.word	0x00ffffff
 8003f34:	e000e010 	.word	0xe000e010

08003f38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	210f      	movs	r1, #15
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	1c02      	adds	r2, r0, #0
 8003f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	0011      	movs	r1, r2
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff ff5d 	bl	8003e14 <__NVIC_SetPriority>
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	0002      	movs	r2, r0
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6e:	1dfb      	adds	r3, r7, #7
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff ff33 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7ff ffaf 	bl	8003ef0 <SysTick_Config>
 8003f92:	0003      	movs	r3, r0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603a      	str	r2, [r7, #0]
 8003fa8:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003faa:	2317      	movs	r3, #23
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8003fb2:	2316      	movs	r3, #22
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8003fba:	2315      	movs	r3, #21
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <HAL_FLASH_Program+0x120>)
 8003fc4:	7e1b      	ldrb	r3, [r3, #24]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_FLASH_Program+0x32>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e072      	b.n	80040b4 <HAL_FLASH_Program+0x118>
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_FLASH_Program+0x120>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fd4:	2317      	movs	r3, #23
 8003fd6:	18fe      	adds	r6, r7, r3
 8003fd8:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_FLASH_Program+0x124>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 f8b6 	bl	800414c <FLASH_WaitForLastOperation>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8003fe4:	2317      	movs	r3, #23
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d15c      	bne.n	80040a8 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d104      	bne.n	8003ffe <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003ff4:	2315      	movs	r3, #21
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e00b      	b.n	8004016 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d104      	bne.n	800400e <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004004:	2315      	movs	r3, #21
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2202      	movs	r2, #2
 800400a:	701a      	strb	r2, [r3, #0]
 800400c:	e003      	b.n	8004016 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800400e:	2315      	movs	r3, #21
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2204      	movs	r2, #4
 8004014:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8004016:	2316      	movs	r3, #22
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e039      	b.n	8004094 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004020:	2116      	movs	r1, #22
 8004022:	187b      	adds	r3, r7, r1
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	005a      	lsls	r2, r3, #1
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	18d0      	adds	r0, r2, r3
 800402c:	187b      	adds	r3, r7, r1
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	001a      	movs	r2, r3
 8004034:	3a20      	subs	r2, #32
 8004036:	2a00      	cmp	r2, #0
 8004038:	db03      	blt.n	8004042 <HAL_FLASH_Program+0xa6>
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	40d1      	lsrs	r1, r2
 800403e:	000c      	movs	r4, r1
 8004040:	e008      	b.n	8004054 <HAL_FLASH_Program+0xb8>
 8004042:	2220      	movs	r2, #32
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4091      	lsls	r1, r2
 800404a:	000a      	movs	r2, r1
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	40d9      	lsrs	r1, r3
 8004050:	000c      	movs	r4, r1
 8004052:	4314      	orrs	r4, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	40da      	lsrs	r2, r3
 8004058:	0015      	movs	r5, r2
 800405a:	b2a3      	uxth	r3, r4
 800405c:	0019      	movs	r1, r3
 800405e:	f000 f859 	bl	8004114 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004062:	2317      	movs	r3, #23
 8004064:	18fe      	adds	r6, r7, r3
 8004066:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <HAL_FLASH_Program+0x124>)
 8004068:	0018      	movs	r0, r3
 800406a:	f000 f86f 	bl	800414c <FLASH_WaitForLastOperation>
 800406e:	0003      	movs	r3, r0
 8004070:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004072:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_FLASH_Program+0x128>)
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <HAL_FLASH_Program+0x128>)
 8004078:	2101      	movs	r1, #1
 800407a:	438a      	bics	r2, r1
 800407c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800407e:	2317      	movs	r3, #23
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10e      	bne.n	80040a6 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8004088:	2116      	movs	r1, #22
 800408a:	187b      	adds	r3, r7, r1
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	187b      	adds	r3, r7, r1
 8004090:	3201      	adds	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	2316      	movs	r3, #22
 8004096:	18fa      	adds	r2, r7, r3
 8004098:	2315      	movs	r3, #21
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3bd      	bcc.n	8004020 <HAL_FLASH_Program+0x84>
 80040a4:	e000      	b.n	80040a8 <HAL_FLASH_Program+0x10c>
      {
        break;
 80040a6:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <HAL_FLASH_Program+0x120>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	761a      	strb	r2, [r3, #24]

  return status;
 80040ae:	2317      	movs	r3, #23
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	781b      	ldrb	r3, [r3, #0]
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b007      	add	sp, #28
 80040ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040bc:	20000158 	.word	0x20000158
 80040c0:	0000c350 	.word	0x0000c350
 80040c4:	40022000 	.word	0x40022000

080040c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_FLASH_Unlock+0x40>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	4013      	ands	r3, r2
 80040dc:	d00d      	beq.n	80040fa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_FLASH_Unlock+0x40>)
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <HAL_FLASH_Unlock+0x44>)
 80040e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_FLASH_Unlock+0x40>)
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_FLASH_Unlock+0x48>)
 80040e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_FLASH_Unlock+0x40>)
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	4013      	ands	r3, r2
 80040f2:	d002      	beq.n	80040fa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80040f4:	1dfb      	adds	r3, r7, #7
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80040fa:	1dfb      	adds	r3, r7, #7
 80040fc:	781b      	ldrb	r3, [r3, #0]
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	40022000 	.word	0x40022000
 800410c:	45670123 	.word	0x45670123
 8004110:	cdef89ab 	.word	0xcdef89ab

08004114 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	000a      	movs	r2, r1
 800411e:	1cbb      	adds	r3, r7, #2
 8004120:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <FLASH_Program_HalfWord+0x30>)
 8004124:	2200      	movs	r2, #0
 8004126:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <FLASH_Program_HalfWord+0x34>)
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <FLASH_Program_HalfWord+0x34>)
 800412e:	2101      	movs	r1, #1
 8004130:	430a      	orrs	r2, r1
 8004132:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1cba      	adds	r2, r7, #2
 8004138:	8812      	ldrh	r2, [r2, #0]
 800413a:	801a      	strh	r2, [r3, #0]
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000158 	.word	0x20000158
 8004148:	40022000 	.word	0x40022000

0800414c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff fe18 	bl	8003d88 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800415c:	e00f      	b.n	800417e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3301      	adds	r3, #1
 8004162:	d00c      	beq.n	800417e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <FLASH_WaitForLastOperation+0x2e>
 800416a:	f7ff fe0d 	bl	8003d88 <HAL_GetTick>
 800416e:	0002      	movs	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d201      	bcs.n	800417e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e01f      	b.n	80041be <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <FLASH_WaitForLastOperation+0x7c>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	4013      	ands	r3, r2
 8004186:	2b01      	cmp	r3, #1
 8004188:	d0e9      	beq.n	800415e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <FLASH_WaitForLastOperation+0x7c>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	4013      	ands	r3, r2
 8004192:	2b20      	cmp	r3, #32
 8004194:	d102      	bne.n	800419c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <FLASH_WaitForLastOperation+0x7c>)
 8004198:	2220      	movs	r2, #32
 800419a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <FLASH_WaitForLastOperation+0x7c>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2210      	movs	r2, #16
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d005      	beq.n	80041b4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <FLASH_WaitForLastOperation+0x7c>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2204      	movs	r2, #4
 80041ae:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d103      	bne.n	80041bc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80041b4:	f000 f80a 	bl	80041cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	40022000 	.word	0x40022000

080041cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80041d6:	4b13      	ldr	r3, [pc, #76]	; (8004224 <FLASH_SetErrorCode+0x58>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2210      	movs	r2, #16
 80041dc:	4013      	ands	r3, r2
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d109      	bne.n	80041f6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <FLASH_SetErrorCode+0x5c>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	2202      	movs	r2, #2
 80041e8:	431a      	orrs	r2, r3
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <FLASH_SetErrorCode+0x5c>)
 80041ec:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2210      	movs	r2, #16
 80041f2:	4313      	orrs	r3, r2
 80041f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <FLASH_SetErrorCode+0x58>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2204      	movs	r2, #4
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d109      	bne.n	8004216 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <FLASH_SetErrorCode+0x5c>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	2201      	movs	r2, #1
 8004208:	431a      	orrs	r2, r3
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <FLASH_SetErrorCode+0x5c>)
 800420c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	4313      	orrs	r3, r2
 8004214:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004216:	4b03      	ldr	r3, [pc, #12]	; (8004224 <FLASH_SetErrorCode+0x58>)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]
}  
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46bd      	mov	sp, r7
 8004220:	b002      	add	sp, #8
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40022000 	.word	0x40022000
 8004228:	20000158 	.word	0x20000158

0800422c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004236:	230f      	movs	r3, #15
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004242:	4b32      	ldr	r3, [pc, #200]	; (800430c <HAL_FLASHEx_Erase+0xe0>)
 8004244:	7e1b      	ldrb	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_FLASHEx_Erase+0x22>
 800424a:	2302      	movs	r3, #2
 800424c:	e05a      	b.n	8004304 <HAL_FLASHEx_Erase+0xd8>
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <HAL_FLASHEx_Erase+0xe0>)
 8004250:	2201      	movs	r2, #1
 8004252:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d116      	bne.n	800428a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800425c:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_FLASHEx_Erase+0xe4>)
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff ff74 	bl	800414c <FLASH_WaitForLastOperation>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d147      	bne.n	80042f8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004268:	f000 f856 	bl	8004318 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800426c:	230f      	movs	r3, #15
 800426e:	18fc      	adds	r4, r7, r3
 8004270:	4b27      	ldr	r3, [pc, #156]	; (8004310 <HAL_FLASHEx_Erase+0xe4>)
 8004272:	0018      	movs	r0, r3
 8004274:	f7ff ff6a 	bl	800414c <FLASH_WaitForLastOperation>
 8004278:	0003      	movs	r3, r0
 800427a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800427c:	4b25      	ldr	r3, [pc, #148]	; (8004314 <HAL_FLASHEx_Erase+0xe8>)
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_FLASHEx_Erase+0xe8>)
 8004282:	2104      	movs	r1, #4
 8004284:	438a      	bics	r2, r1
 8004286:	611a      	str	r2, [r3, #16]
 8004288:	e036      	b.n	80042f8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_FLASHEx_Erase+0xe4>)
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff ff5d 	bl	800414c <FLASH_WaitForLastOperation>
 8004292:	1e03      	subs	r3, r0, #0
 8004294:	d130      	bne.n	80042f8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2201      	movs	r2, #1
 800429a:	4252      	negs	r2, r2
 800429c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	e01f      	b.n	80042e6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 f84d 	bl	8004348 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042ae:	250f      	movs	r5, #15
 80042b0:	197c      	adds	r4, r7, r5
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_FLASHEx_Erase+0xe4>)
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff ff49 	bl	800414c <FLASH_WaitForLastOperation>
 80042ba:	0003      	movs	r3, r0
 80042bc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_FLASHEx_Erase+0xe8>)
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_FLASHEx_Erase+0xe8>)
 80042c4:	2102      	movs	r1, #2
 80042c6:	438a      	bics	r2, r1
 80042c8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80042ca:	197b      	adds	r3, r7, r5
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	601a      	str	r2, [r3, #0]
            break;
 80042d8:	e00e      	b.n	80042f8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	00d2      	lsls	r2, r2, #3
 80042e0:	4694      	mov	ip, r2
 80042e2:	4463      	add	r3, ip
 80042e4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	029a      	lsls	r2, r3, #10
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3d6      	bcc.n	80042a6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_FLASHEx_Erase+0xe0>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	761a      	strb	r2, [r3, #24]

  return status;
 80042fe:	230f      	movs	r3, #15
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	781b      	ldrb	r3, [r3, #0]
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b004      	add	sp, #16
 800430a:	bdb0      	pop	{r4, r5, r7, pc}
 800430c:	20000158 	.word	0x20000158
 8004310:	0000c350 	.word	0x0000c350
 8004314:	40022000 	.word	0x40022000

08004318 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <FLASH_MassErase+0x28>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <FLASH_MassErase+0x2c>)
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <FLASH_MassErase+0x2c>)
 8004328:	2104      	movs	r1, #4
 800432a:	430a      	orrs	r2, r1
 800432c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <FLASH_MassErase+0x2c>)
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <FLASH_MassErase+0x2c>)
 8004334:	2140      	movs	r1, #64	; 0x40
 8004336:	430a      	orrs	r2, r1
 8004338:	611a      	str	r2, [r3, #16]
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000158 	.word	0x20000158
 8004344:	40022000 	.word	0x40022000

08004348 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <FLASH_PageErase+0x34>)
 8004352:	2200      	movs	r2, #0
 8004354:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <FLASH_PageErase+0x38>)
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <FLASH_PageErase+0x38>)
 800435c:	2102      	movs	r1, #2
 800435e:	430a      	orrs	r2, r1
 8004360:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <FLASH_PageErase+0x38>)
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <FLASH_PageErase+0x38>)
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <FLASH_PageErase+0x38>)
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	430a      	orrs	r2, r1
 8004372:	611a      	str	r2, [r3, #16]
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b002      	add	sp, #8
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000158 	.word	0x20000158
 8004380:	40022000 	.word	0x40022000

08004384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004392:	e14f      	b.n	8004634 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4091      	lsls	r1, r2
 800439e:	000a      	movs	r2, r1
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d100      	bne.n	80043ac <HAL_GPIO_Init+0x28>
 80043aa:	e140      	b.n	800462e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x38>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b12      	cmp	r3, #18
 80043ba:	d123      	bne.n	8004404 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	08da      	lsrs	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3208      	adds	r2, #8
 80043c4:	0092      	lsls	r2, r2, #2
 80043c6:	58d3      	ldr	r3, [r2, r3]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2207      	movs	r2, #7
 80043ce:	4013      	ands	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	220f      	movs	r2, #15
 80043d4:	409a      	lsls	r2, r3
 80043d6:	0013      	movs	r3, r2
 80043d8:	43da      	mvns	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2107      	movs	r1, #7
 80043e8:	400b      	ands	r3, r1
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	6939      	ldr	r1, [r7, #16]
 8004402:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	2203      	movs	r2, #3
 8004410:	409a      	lsls	r2, r3
 8004412:	0013      	movs	r3, r2
 8004414:	43da      	mvns	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2203      	movs	r2, #3
 8004422:	401a      	ands	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	409a      	lsls	r2, r3
 800442a:	0013      	movs	r3, r2
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d00b      	beq.n	8004458 <HAL_GPIO_Init+0xd4>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d007      	beq.n	8004458 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800444c:	2b11      	cmp	r3, #17
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b12      	cmp	r3, #18
 8004456:	d130      	bne.n	80044ba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2203      	movs	r2, #3
 8004464:	409a      	lsls	r2, r3
 8004466:	0013      	movs	r3, r2
 8004468:	43da      	mvns	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4013      	ands	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	0013      	movs	r3, r2
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800448e:	2201      	movs	r2, #1
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	409a      	lsls	r2, r3
 8004494:	0013      	movs	r3, r2
 8004496:	43da      	mvns	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	2201      	movs	r2, #1
 80044a6:	401a      	ands	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	409a      	lsls	r2, r3
 80044ac:	0013      	movs	r3, r2
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	409a      	lsls	r2, r3
 80044c8:	0013      	movs	r3, r2
 80044ca:	43da      	mvns	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4013      	ands	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	409a      	lsls	r2, r3
 80044dc:	0013      	movs	r3, r2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	055b      	lsls	r3, r3, #21
 80044f2:	4013      	ands	r3, r2
 80044f4:	d100      	bne.n	80044f8 <HAL_GPIO_Init+0x174>
 80044f6:	e09a      	b.n	800462e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f8:	4b54      	ldr	r3, [pc, #336]	; (800464c <HAL_GPIO_Init+0x2c8>)
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_GPIO_Init+0x2c8>)
 80044fe:	2101      	movs	r1, #1
 8004500:	430a      	orrs	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
 8004504:	4b51      	ldr	r3, [pc, #324]	; (800464c <HAL_GPIO_Init+0x2c8>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2201      	movs	r2, #1
 800450a:	4013      	ands	r3, r2
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004510:	4a4f      	ldr	r2, [pc, #316]	; (8004650 <HAL_GPIO_Init+0x2cc>)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	3302      	adds	r3, #2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	589b      	ldr	r3, [r3, r2]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2203      	movs	r2, #3
 8004522:	4013      	ands	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	220f      	movs	r2, #15
 8004528:	409a      	lsls	r2, r3
 800452a:	0013      	movs	r3, r2
 800452c:	43da      	mvns	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	2390      	movs	r3, #144	; 0x90
 8004538:	05db      	lsls	r3, r3, #23
 800453a:	429a      	cmp	r2, r3
 800453c:	d013      	beq.n	8004566 <HAL_GPIO_Init+0x1e2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a44      	ldr	r2, [pc, #272]	; (8004654 <HAL_GPIO_Init+0x2d0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00d      	beq.n	8004562 <HAL_GPIO_Init+0x1de>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a43      	ldr	r2, [pc, #268]	; (8004658 <HAL_GPIO_Init+0x2d4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x1da>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a42      	ldr	r2, [pc, #264]	; (800465c <HAL_GPIO_Init+0x2d8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_GPIO_Init+0x1d6>
 8004556:	2303      	movs	r3, #3
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x1e4>
 800455a:	2305      	movs	r3, #5
 800455c:	e004      	b.n	8004568 <HAL_GPIO_Init+0x1e4>
 800455e:	2302      	movs	r3, #2
 8004560:	e002      	b.n	8004568 <HAL_GPIO_Init+0x1e4>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_GPIO_Init+0x1e4>
 8004566:	2300      	movs	r3, #0
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	2103      	movs	r1, #3
 800456c:	400a      	ands	r2, r1
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	4093      	lsls	r3, r2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004578:	4935      	ldr	r1, [pc, #212]	; (8004650 <HAL_GPIO_Init+0x2cc>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004586:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43da      	mvns	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	025b      	lsls	r3, r3, #9
 800459e:	4013      	ands	r3, r2
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045aa:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	43da      	mvns	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	029b      	lsls	r3, r3, #10
 80045c8:	4013      	ands	r3, r2
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80045d4:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43da      	mvns	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	035b      	lsls	r3, r3, #13
 80045f2:	4013      	ands	r3, r2
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43da      	mvns	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	039b      	lsls	r3, r3, #14
 800461c:	4013      	ands	r3, r2
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_GPIO_Init+0x2dc>)
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	40da      	lsrs	r2, r3
 800463c:	1e13      	subs	r3, r2, #0
 800463e:	d000      	beq.n	8004642 <HAL_GPIO_Init+0x2be>
 8004640:	e6a8      	b.n	8004394 <HAL_GPIO_Init+0x10>
  } 
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b006      	add	sp, #24
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	40021000 	.word	0x40021000
 8004650:	40010000 	.word	0x40010000
 8004654:	48000400 	.word	0x48000400
 8004658:	48000800 	.word	0x48000800
 800465c:	48000c00 	.word	0x48000c00
 8004660:	40010400 	.word	0x40010400

08004664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	000a      	movs	r2, r1
 800466e:	1cbb      	adds	r3, r7, #2
 8004670:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	1cba      	adds	r2, r7, #2
 8004678:	8812      	ldrh	r2, [r2, #0]
 800467a:	4013      	ands	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800467e:	230f      	movs	r3, #15
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e003      	b.n	8004690 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004688:	230f      	movs	r3, #15
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004690:	230f      	movs	r3, #15
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	781b      	ldrb	r3, [r3, #0]
  }
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b004      	add	sp, #16
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	0008      	movs	r0, r1
 80046a8:	0011      	movs	r1, r2
 80046aa:	1cbb      	adds	r3, r7, #2
 80046ac:	1c02      	adds	r2, r0, #0
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	1c7b      	adds	r3, r7, #1
 80046b2:	1c0a      	adds	r2, r1, #0
 80046b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046b6:	1c7b      	adds	r3, r7, #1
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046be:	1cbb      	adds	r3, r7, #2
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046c6:	e003      	b.n	80046d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046c8:	1cbb      	adds	r3, r7, #2
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	000a      	movs	r2, r1
 80046e2:	1cbb      	adds	r3, r7, #2
 80046e4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	1cba      	adds	r2, r7, #2
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	4013      	ands	r3, r2
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046f2:	1cbb      	adds	r3, r7, #2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	041a      	lsls	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80046fc:	e003      	b.n	8004706 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046fe:	1cbb      	adds	r3, r7, #2
 8004700:	881a      	ldrh	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	619a      	str	r2, [r3, #24]
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	0002      	movs	r2, r0
 8004718:	1dbb      	adds	r3, r7, #6
 800471a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	1dba      	adds	r2, r7, #6
 8004722:	8812      	ldrh	r2, [r2, #0]
 8004724:	4013      	ands	r3, r2
 8004726:	d008      	beq.n	800473a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800472a:	1dba      	adds	r2, r7, #6
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004730:	1dbb      	adds	r3, r7, #6
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	0018      	movs	r0, r3
 8004736:	f7fe f859 	bl	80027ec <HAL_GPIO_EXTI_Callback>
  }
}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b002      	add	sp, #8
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	40010400 	.word	0x40010400

08004748 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e036      	b.n	80047c8 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_IWDG_Init+0x88>)
 8004760:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_IWDG_Init+0x8c>)
 8004768:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6892      	ldr	r2, [r2, #8]
 800477c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800477e:	f7ff fb03 	bl	8003d88 <HAL_GetTick>
 8004782:	0003      	movs	r3, r0
 8004784:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004786:	e008      	b.n	800479a <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004788:	f7ff fafe 	bl	8003d88 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d901      	bls.n	800479a <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e016      	b.n	80047c8 <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f1      	bne.n	8004788 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d005      	beq.n	80047be <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	611a      	str	r2, [r3, #16]
 80047bc:	e003      	b.n	80047c6 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a05      	ldr	r2, [pc, #20]	; (80047d8 <HAL_IWDG_Init+0x90>)
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b004      	add	sp, #16
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	0000cccc 	.word	0x0000cccc
 80047d4:	00005555 	.word	0x00005555
 80047d8:	0000aaaa 	.word	0x0000aaaa

080047dc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a03      	ldr	r2, [pc, #12]	; (80047f8 <HAL_IWDG_Refresh+0x1c>)
 80047ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b002      	add	sp, #8
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	0000aaaa 	.word	0x0000aaaa

080047fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e303      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	d100      	bne.n	800481a <HAL_RCC_OscConfig+0x1e>
 8004818:	e08d      	b.n	8004936 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800481a:	4bc4      	ldr	r3, [pc, #784]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	220c      	movs	r2, #12
 8004820:	4013      	ands	r3, r2
 8004822:	2b04      	cmp	r3, #4
 8004824:	d00e      	beq.n	8004844 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004826:	4bc1      	ldr	r3, [pc, #772]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	220c      	movs	r2, #12
 800482c:	4013      	ands	r3, r2
 800482e:	2b08      	cmp	r3, #8
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x64>
 8004832:	4bbe      	ldr	r3, [pc, #760]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	401a      	ands	r2, r3
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	025b      	lsls	r3, r3, #9
 8004840:	429a      	cmp	r2, r3
 8004842:	d10d      	bne.n	8004860 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004844:	4bb9      	ldr	r3, [pc, #740]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	4013      	ands	r3, r2
 800484e:	d100      	bne.n	8004852 <HAL_RCC_OscConfig+0x56>
 8004850:	e070      	b.n	8004934 <HAL_RCC_OscConfig+0x138>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d000      	beq.n	800485c <HAL_RCC_OscConfig+0x60>
 800485a:	e06b      	b.n	8004934 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e2da      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x7c>
 8004868:	4bb0      	ldr	r3, [pc, #704]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4baf      	ldr	r3, [pc, #700]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800486e:	2180      	movs	r1, #128	; 0x80
 8004870:	0249      	lsls	r1, r1, #9
 8004872:	430a      	orrs	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e02f      	b.n	80048d8 <HAL_RCC_OscConfig+0xdc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <HAL_RCC_OscConfig+0x9e>
 8004880:	4baa      	ldr	r3, [pc, #680]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4ba9      	ldr	r3, [pc, #676]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004886:	49aa      	ldr	r1, [pc, #680]	; (8004b30 <HAL_RCC_OscConfig+0x334>)
 8004888:	400a      	ands	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	4ba7      	ldr	r3, [pc, #668]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4ba6      	ldr	r3, [pc, #664]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004892:	49a8      	ldr	r1, [pc, #672]	; (8004b34 <HAL_RCC_OscConfig+0x338>)
 8004894:	400a      	ands	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e01e      	b.n	80048d8 <HAL_RCC_OscConfig+0xdc>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10e      	bne.n	80048c0 <HAL_RCC_OscConfig+0xc4>
 80048a2:	4ba2      	ldr	r3, [pc, #648]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4ba1      	ldr	r3, [pc, #644]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	02c9      	lsls	r1, r1, #11
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	4b9e      	ldr	r3, [pc, #632]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b9d      	ldr	r3, [pc, #628]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	0249      	lsls	r1, r1, #9
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e00b      	b.n	80048d8 <HAL_RCC_OscConfig+0xdc>
 80048c0:	4b9a      	ldr	r3, [pc, #616]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b99      	ldr	r3, [pc, #612]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048c6:	499a      	ldr	r1, [pc, #616]	; (8004b30 <HAL_RCC_OscConfig+0x334>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	4b97      	ldr	r3, [pc, #604]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b96      	ldr	r3, [pc, #600]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048d2:	4998      	ldr	r1, [pc, #608]	; (8004b34 <HAL_RCC_OscConfig+0x338>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d014      	beq.n	800490a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7ff fa52 	bl	8003d88 <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ea:	f7ff fa4d 	bl	8003d88 <HAL_GetTick>
 80048ee:	0002      	movs	r2, r0
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	; 0x64
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e28c      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fc:	4b8b      	ldr	r3, [pc, #556]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	4013      	ands	r3, r2
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0xee>
 8004908:	e015      	b.n	8004936 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490a:	f7ff fa3d 	bl	8003d88 <HAL_GetTick>
 800490e:	0003      	movs	r3, r0
 8004910:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004914:	f7ff fa38 	bl	8003d88 <HAL_GetTick>
 8004918:	0002      	movs	r2, r0
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e277      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	4013      	ands	r3, r2
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x118>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	d100      	bne.n	8004942 <HAL_RCC_OscConfig+0x146>
 8004940:	e069      	b.n	8004a16 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004942:	4b7a      	ldr	r3, [pc, #488]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	220c      	movs	r2, #12
 8004948:	4013      	ands	r3, r2
 800494a:	d00b      	beq.n	8004964 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800494c:	4b77      	ldr	r3, [pc, #476]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	220c      	movs	r2, #12
 8004952:	4013      	ands	r3, r2
 8004954:	2b08      	cmp	r3, #8
 8004956:	d11c      	bne.n	8004992 <HAL_RCC_OscConfig+0x196>
 8004958:	4b74      	ldr	r3, [pc, #464]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	025b      	lsls	r3, r3, #9
 8004960:	4013      	ands	r3, r2
 8004962:	d116      	bne.n	8004992 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004964:	4b71      	ldr	r3, [pc, #452]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2202      	movs	r2, #2
 800496a:	4013      	ands	r3, r2
 800496c:	d005      	beq.n	800497a <HAL_RCC_OscConfig+0x17e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e24d      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497a:	4b6c      	ldr	r3, [pc, #432]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	22f8      	movs	r2, #248	; 0xf8
 8004980:	4393      	bics	r3, r2
 8004982:	0019      	movs	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	00da      	lsls	r2, r3, #3
 800498a:	4b68      	ldr	r3, [pc, #416]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004990:	e041      	b.n	8004a16 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d024      	beq.n	80049e4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800499a:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80049a0:	2101      	movs	r1, #1
 80049a2:	430a      	orrs	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7ff f9ef 	bl	8003d88 <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b0:	f7ff f9ea 	bl	8003d88 <HAL_GetTick>
 80049b4:	0002      	movs	r2, r0
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e229      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2202      	movs	r2, #2
 80049c8:	4013      	ands	r3, r2
 80049ca:	d0f1      	beq.n	80049b0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b57      	ldr	r3, [pc, #348]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	22f8      	movs	r2, #248	; 0xf8
 80049d2:	4393      	bics	r3, r2
 80049d4:	0019      	movs	r1, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00da      	lsls	r2, r3, #3
 80049dc:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e018      	b.n	8004a16 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e4:	4b51      	ldr	r3, [pc, #324]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b50      	ldr	r3, [pc, #320]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 80049ea:	2101      	movs	r1, #1
 80049ec:	438a      	bics	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7ff f9ca 	bl	8003d88 <HAL_GetTick>
 80049f4:	0003      	movs	r3, r0
 80049f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fa:	f7ff f9c5 	bl	8003d88 <HAL_GetTick>
 80049fe:	0002      	movs	r2, r0
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e204      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0c:	4b47      	ldr	r3, [pc, #284]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2202      	movs	r2, #2
 8004a12:	4013      	ands	r3, r2
 8004a14:	d1f1      	bne.n	80049fa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d036      	beq.n	8004a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d019      	beq.n	8004a5c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a28:	4b40      	ldr	r3, [pc, #256]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a2c:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a2e:	2101      	movs	r1, #1
 8004a30:	430a      	orrs	r2, r1
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a34:	f7ff f9a8 	bl	8003d88 <HAL_GetTick>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3e:	f7ff f9a3 	bl	8003d88 <HAL_GetTick>
 8004a42:	0002      	movs	r2, r0
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e1e2      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a50:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2202      	movs	r2, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	d0f1      	beq.n	8004a3e <HAL_RCC_OscConfig+0x242>
 8004a5a:	e018      	b.n	8004a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	438a      	bics	r2, r1
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a68:	f7ff f98e 	bl	8003d88 <HAL_GetTick>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a72:	f7ff f989 	bl	8003d88 <HAL_GetTick>
 8004a76:	0002      	movs	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1c8      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2202      	movs	r2, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d1f1      	bne.n	8004a72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4013      	ands	r3, r2
 8004a96:	d100      	bne.n	8004a9a <HAL_RCC_OscConfig+0x29e>
 8004a98:	e0b6      	b.n	8004c08 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9a:	231f      	movs	r3, #31
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa2:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	055b      	lsls	r3, r3, #21
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d111      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aae:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	0549      	lsls	r1, r1, #21
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	61da      	str	r2, [r3, #28]
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	055b      	lsls	r3, r3, #21
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aca:	231f      	movs	r3, #31
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_OscConfig+0x33c>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d11a      	bne.n	8004b14 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <HAL_RCC_OscConfig+0x33c>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_RCC_OscConfig+0x33c>)
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	0049      	lsls	r1, r1, #1
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aec:	f7ff f94c 	bl	8003d88 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af6:	f7ff f947 	bl	8003d88 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b64      	cmp	r3, #100	; 0x64
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e186      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_OscConfig+0x33c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10f      	bne.n	8004b3c <HAL_RCC_OscConfig+0x340>
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004b1e:	6a1a      	ldr	r2, [r3, #32]
 8004b20:	4b02      	ldr	r3, [pc, #8]	; (8004b2c <HAL_RCC_OscConfig+0x330>)
 8004b22:	2101      	movs	r1, #1
 8004b24:	430a      	orrs	r2, r1
 8004b26:	621a      	str	r2, [r3, #32]
 8004b28:	e036      	b.n	8004b98 <HAL_RCC_OscConfig+0x39c>
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	fffeffff 	.word	0xfffeffff
 8004b34:	fffbffff 	.word	0xfffbffff
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10c      	bne.n	8004b5e <HAL_RCC_OscConfig+0x362>
 8004b44:	4bb6      	ldr	r3, [pc, #728]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	4bb5      	ldr	r3, [pc, #724]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	621a      	str	r2, [r3, #32]
 8004b50:	4bb3      	ldr	r3, [pc, #716]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	4bb2      	ldr	r3, [pc, #712]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b56:	2104      	movs	r1, #4
 8004b58:	438a      	bics	r2, r1
 8004b5a:	621a      	str	r2, [r3, #32]
 8004b5c:	e01c      	b.n	8004b98 <HAL_RCC_OscConfig+0x39c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x384>
 8004b66:	4bae      	ldr	r3, [pc, #696]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	4bad      	ldr	r3, [pc, #692]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	621a      	str	r2, [r3, #32]
 8004b72:	4bab      	ldr	r3, [pc, #684]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b74:	6a1a      	ldr	r2, [r3, #32]
 8004b76:	4baa      	ldr	r3, [pc, #680]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b78:	2101      	movs	r1, #1
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	621a      	str	r2, [r3, #32]
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0x39c>
 8004b80:	4ba7      	ldr	r3, [pc, #668]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b82:	6a1a      	ldr	r2, [r3, #32]
 8004b84:	4ba6      	ldr	r3, [pc, #664]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	621a      	str	r2, [r3, #32]
 8004b8c:	4ba4      	ldr	r3, [pc, #656]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	4ba3      	ldr	r3, [pc, #652]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004b92:	2104      	movs	r1, #4
 8004b94:	438a      	bics	r2, r1
 8004b96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d014      	beq.n	8004bca <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba0:	f7ff f8f2 	bl	8003d88 <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	e009      	b.n	8004bbe <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7ff f8ed 	bl	8003d88 <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	4a9b      	ldr	r2, [pc, #620]	; (8004e24 <HAL_RCC_OscConfig+0x628>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e12b      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	4b98      	ldr	r3, [pc, #608]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x3ae>
 8004bc8:	e013      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bca:	f7ff f8dd 	bl	8003d88 <HAL_GetTick>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd2:	e009      	b.n	8004be8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7ff f8d8 	bl	8003d88 <HAL_GetTick>
 8004bd8:	0002      	movs	r2, r0
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	4a91      	ldr	r2, [pc, #580]	; (8004e24 <HAL_RCC_OscConfig+0x628>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e116      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be8:	4b8d      	ldr	r3, [pc, #564]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	2202      	movs	r2, #2
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bf2:	231f      	movs	r3, #31
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	4b87      	ldr	r3, [pc, #540]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c02:	4989      	ldr	r1, [pc, #548]	; (8004e28 <HAL_RCC_OscConfig+0x62c>)
 8004c04:	400a      	ands	r2, r1
 8004c06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d063      	beq.n	8004cda <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d12a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c1a:	4b81      	ldr	r3, [pc, #516]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c1e:	4b80      	ldr	r3, [pc, #512]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c20:	2104      	movs	r1, #4
 8004c22:	430a      	orrs	r2, r1
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c26:	4b7e      	ldr	r3, [pc, #504]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2a:	4b7d      	ldr	r3, [pc, #500]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c32:	f7ff f8a9 	bl	8003d88 <HAL_GetTick>
 8004c36:	0003      	movs	r3, r0
 8004c38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c3c:	f7ff f8a4 	bl	8003d88 <HAL_GetTick>
 8004c40:	0002      	movs	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e0e3      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c4e:	4b74      	ldr	r3, [pc, #464]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	2202      	movs	r2, #2
 8004c54:	4013      	ands	r3, r2
 8004c56:	d0f1      	beq.n	8004c3c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c58:	4b71      	ldr	r3, [pc, #452]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5c:	22f8      	movs	r2, #248	; 0xf8
 8004c5e:	4393      	bics	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	00da      	lsls	r2, r3, #3
 8004c68:	4b6d      	ldr	r3, [pc, #436]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c6e:	e034      	b.n	8004cda <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	3305      	adds	r3, #5
 8004c76:	d111      	bne.n	8004c9c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004c78:	4b69      	ldr	r3, [pc, #420]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7c:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c7e:	2104      	movs	r1, #4
 8004c80:	438a      	bics	r2, r1
 8004c82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c84:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	22f8      	movs	r2, #248	; 0xf8
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	00da      	lsls	r2, r3, #3
 8004c94:	4b62      	ldr	r3, [pc, #392]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c96:	430a      	orrs	r2, r1
 8004c98:	635a      	str	r2, [r3, #52]	; 0x34
 8004c9a:	e01e      	b.n	8004cda <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c9c:	4b60      	ldr	r3, [pc, #384]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca0:	4b5f      	ldr	r3, [pc, #380]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ca8:	4b5d      	ldr	r3, [pc, #372]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cac:	4b5c      	ldr	r3, [pc, #368]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004cae:	2101      	movs	r1, #1
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb4:	f7ff f868 	bl	8003d88 <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004cbe:	f7ff f863 	bl	8003d88 <HAL_GetTick>
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e0a2      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004cd0:	4b53      	ldr	r3, [pc, #332]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d1f1      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d100      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4e8>
 8004ce2:	e097      	b.n	8004e14 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ce4:	4b4e      	ldr	r3, [pc, #312]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	220c      	movs	r2, #12
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d100      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x4f6>
 8004cf0:	e06b      	b.n	8004dca <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d14c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b49      	ldr	r3, [pc, #292]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b48      	ldr	r3, [pc, #288]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d00:	494a      	ldr	r1, [pc, #296]	; (8004e2c <HAL_RCC_OscConfig+0x630>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7ff f83f 	bl	8003d88 <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d10:	f7ff f83a 	bl	8003d88 <HAL_GetTick>
 8004d14:	0002      	movs	r2, r0
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e079      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d22:	4b3f      	ldr	r3, [pc, #252]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	049b      	lsls	r3, r3, #18
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d2e:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	220f      	movs	r2, #15
 8004d34:	4393      	bics	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	4b38      	ldr	r3, [pc, #224]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d42:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <HAL_RCC_OscConfig+0x634>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	431a      	orrs	r2, r3
 8004d56:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d5c:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b2f      	ldr	r3, [pc, #188]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	0449      	lsls	r1, r1, #17
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6a:	f7ff f80d 	bl	8003d88 <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d74:	f7ff f808 	bl	8003d88 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e047      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d86:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	049b      	lsls	r3, r3, #18
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x578>
 8004d92:	e03f      	b.n	8004e14 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004d9a:	4924      	ldr	r1, [pc, #144]	; (8004e2c <HAL_RCC_OscConfig+0x630>)
 8004d9c:	400a      	ands	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fe fff2 	bl	8003d88 <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004daa:	f7fe ffed 	bl	8003d88 <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e02c      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dbc:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	049b      	lsls	r3, r3, #18
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d1f0      	bne.n	8004daa <HAL_RCC_OscConfig+0x5ae>
 8004dc8:	e024      	b.n	8004e14 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e01f      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004dd6:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ddc:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_RCC_OscConfig+0x624>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	025b      	lsls	r3, r3, #9
 8004de8:	401a      	ands	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10e      	bne.n	8004e10 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	220f      	movs	r2, #15
 8004df6:	401a      	ands	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	23f0      	movs	r3, #240	; 0xf0
 8004e04:	039b      	lsls	r3, r3, #14
 8004e06:	401a      	ands	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b008      	add	sp, #32
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	40021000 	.word	0x40021000
 8004e24:	00001388 	.word	0x00001388
 8004e28:	efffffff 	.word	0xefffffff
 8004e2c:	feffffff 	.word	0xfeffffff
 8004e30:	ffc2ffff 	.word	0xffc2ffff

08004e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0b3      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b5b      	ldr	r3, [pc, #364]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d911      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b58      	ldr	r3, [pc, #352]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4393      	bics	r3, r2
 8004e5e:	0019      	movs	r1, r3
 8004e60:	4b55      	ldr	r3, [pc, #340]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e68:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e09a      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	4013      	ands	r3, r2
 8004e82:	d015      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d006      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e8e:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004e94:	21e0      	movs	r1, #224	; 0xe0
 8004e96:	00c9      	lsls	r1, r1, #3
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	22f0      	movs	r2, #240	; 0xf0
 8004ea2:	4393      	bics	r3, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	4b44      	ldr	r3, [pc, #272]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004eac:	430a      	orrs	r2, r1
 8004eae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d040      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b3e      	ldr	r3, [pc, #248]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d114      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e06e      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	049b      	lsls	r3, r3, #18
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e062      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b34      	ldr	r3, [pc, #208]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e05b      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2203      	movs	r2, #3
 8004efe:	4393      	bics	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fe ff3c 	bl	8003d88 <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f14:	e009      	b.n	8004f2a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f16:	f7fe ff37 	bl	8003d88 <HAL_GetTick>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <HAL_RCC_ClockConfig+0x18c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e042      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	220c      	movs	r2, #12
 8004f30:	401a      	ands	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1ec      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2201      	movs	r2, #1
 8004f42:	4013      	ands	r3, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d211      	bcs.n	8004f6e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4393      	bics	r3, r2
 8004f52:	0019      	movs	r1, r3
 8004f54:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5c:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <HAL_RCC_ClockConfig+0x184>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2201      	movs	r2, #1
 8004f62:	4013      	ands	r3, r2
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d001      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e020      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2204      	movs	r2, #4
 8004f74:	4013      	ands	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a11      	ldr	r2, [pc, #68]	; (8004fc4 <HAL_RCC_ClockConfig+0x190>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f8c:	f000 f820 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004f90:	0001      	movs	r1, r0
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <HAL_RCC_ClockConfig+0x188>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	220f      	movs	r2, #15
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <HAL_RCC_ClockConfig+0x194>)
 8004f9e:	5cd3      	ldrb	r3, [r2, r3]
 8004fa0:	000a      	movs	r2, r1
 8004fa2:	40da      	lsrs	r2, r3
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCC_ClockConfig+0x198>)
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f7fe fea7 	bl	8003cfc <HAL_InitTick>
  
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b004      	add	sp, #16
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40022000 	.word	0x40022000
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	00001388 	.word	0x00001388
 8004fc4:	fffff8ff 	.word	0xfffff8ff
 8004fc8:	08005f54 	.word	0x08005f54
 8004fcc:	2000000c 	.word	0x2000000c

08004fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b08f      	sub	sp, #60	; 0x3c
 8004fd4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004fd6:	2314      	movs	r3, #20
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004fde:	c313      	stmia	r3!, {r0, r1, r4}
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fe8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004fea:	c313      	stmia	r3!, {r0, r1, r4}
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	220c      	movs	r2, #12
 800500e:	4013      	ands	r3, r2
 8005010:	2b04      	cmp	r3, #4
 8005012:	d002      	beq.n	800501a <HAL_RCC_GetSysClockFreq+0x4a>
 8005014:	2b08      	cmp	r3, #8
 8005016:	d003      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x50>
 8005018:	e02d      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_GetSysClockFreq+0xc4>)
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800501e:	e02d      	b.n	800507c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	0c9b      	lsrs	r3, r3, #18
 8005024:	220f      	movs	r2, #15
 8005026:	4013      	ands	r3, r2
 8005028:	2214      	movs	r2, #20
 800502a:	18ba      	adds	r2, r7, r2
 800502c:	5cd3      	ldrb	r3, [r2, r3]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	220f      	movs	r2, #15
 8005036:	4013      	ands	r3, r2
 8005038:	1d3a      	adds	r2, r7, #4
 800503a:	5cd3      	ldrb	r3, [r2, r3]
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800503e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	025b      	lsls	r3, r3, #9
 8005044:	4013      	ands	r3, r2
 8005046:	d009      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800504a:	4812      	ldr	r0, [pc, #72]	; (8005094 <HAL_RCC_GetSysClockFreq+0xc4>)
 800504c:	f7fb f85c 	bl	8000108 <__udivsi3>
 8005050:	0003      	movs	r3, r0
 8005052:	001a      	movs	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	4353      	muls	r3, r2
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
 800505a:	e009      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800505c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800505e:	000a      	movs	r2, r1
 8005060:	0152      	lsls	r2, r2, #5
 8005062:	1a52      	subs	r2, r2, r1
 8005064:	0193      	lsls	r3, r2, #6
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	185b      	adds	r3, r3, r1
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005074:	e002      	b.n	800507c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800507a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b00f      	add	sp, #60	; 0x3c
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	08005eb4 	.word	0x08005eb4
 800508c:	08005ec4 	.word	0x08005ec4
 8005090:	40021000 	.word	0x40021000
 8005094:	007a1200 	.word	0x007a1200

08005098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01e      	b.n	80050e8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	223d      	movs	r2, #61	; 0x3d
 80050ae:	5c9b      	ldrb	r3, [r3, r2]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	223c      	movs	r2, #60	; 0x3c
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fe fd4b 	bl	8003b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	223d      	movs	r2, #61	; 0x3d
 80050ca:	2102      	movs	r1, #2
 80050cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	0019      	movs	r1, r3
 80050d8:	0010      	movs	r0, r2
 80050da:	f000 f98b 	bl	80053f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	223d      	movs	r2, #61	; 0x3d
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b002      	add	sp, #8
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	223d      	movs	r2, #61	; 0x3d
 80050fc:	2102      	movs	r1, #2
 80050fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2207      	movs	r2, #7
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b06      	cmp	r3, #6
 8005110:	d007      	beq.n	8005122 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2101      	movs	r1, #1
 800511e:	430a      	orrs	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	223d      	movs	r2, #61	; 0x3d
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b004      	add	sp, #16
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	223d      	movs	r2, #61	; 0x3d
 8005140:	2102      	movs	r1, #2
 8005142:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	4a0d      	ldr	r2, [pc, #52]	; (8005180 <HAL_TIM_Base_Stop+0x4c>)
 800514c:	4013      	ands	r3, r2
 800514e:	d10d      	bne.n	800516c <HAL_TIM_Base_Stop+0x38>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <HAL_TIM_Base_Stop+0x50>)
 8005158:	4013      	ands	r3, r2
 800515a:	d107      	bne.n	800516c <HAL_TIM_Base_Stop+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2101      	movs	r1, #1
 8005168:	438a      	bics	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223d      	movs	r2, #61	; 0x3d
 8005170:	2101      	movs	r1, #1
 8005172:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	00001111 	.word	0x00001111
 8005184:	00000444 	.word	0x00000444

08005188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2202      	movs	r2, #2
 8005198:	4013      	ands	r3, r2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d124      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2202      	movs	r2, #2
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d11d      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2203      	movs	r2, #3
 80051b2:	4252      	negs	r2, r2
 80051b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2203      	movs	r2, #3
 80051c4:	4013      	ands	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	0018      	movs	r0, r3
 80051cc:	f000 f8fa 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e007      	b.n	80051e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 f8ed 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 f8f9 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2204      	movs	r2, #4
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d125      	bne.n	8005242 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2204      	movs	r2, #4
 80051fe:	4013      	ands	r3, r2
 8005200:	2b04      	cmp	r3, #4
 8005202:	d11e      	bne.n	8005242 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2205      	movs	r2, #5
 800520a:	4252      	negs	r2, r2
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	23c0      	movs	r3, #192	; 0xc0
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4013      	ands	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f000 f8cd 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 800522a:	e007      	b.n	800523c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	0018      	movs	r0, r3
 8005230:	f000 f8c0 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 f8cc 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2208      	movs	r2, #8
 800524a:	4013      	ands	r3, r2
 800524c:	2b08      	cmp	r3, #8
 800524e:	d124      	bne.n	800529a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2208      	movs	r2, #8
 8005258:	4013      	ands	r3, r2
 800525a:	2b08      	cmp	r3, #8
 800525c:	d11d      	bne.n	800529a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2209      	movs	r2, #9
 8005264:	4252      	negs	r2, r2
 8005266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2204      	movs	r2, #4
 800526c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2203      	movs	r2, #3
 8005276:	4013      	ands	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 f8a1 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8005282:	e007      	b.n	8005294 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0018      	movs	r0, r3
 8005288:	f000 f894 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	0018      	movs	r0, r3
 8005290:	f000 f8a0 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2210      	movs	r2, #16
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d125      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2210      	movs	r2, #16
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b10      	cmp	r3, #16
 80052b4:	d11e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2211      	movs	r2, #17
 80052bc:	4252      	negs	r2, r2
 80052be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2208      	movs	r2, #8
 80052c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	23c0      	movs	r3, #192	; 0xc0
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4013      	ands	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	0018      	movs	r0, r3
 80052d8:	f000 f874 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e007      	b.n	80052ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 f867 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f873 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2201      	movs	r2, #1
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d10f      	bne.n	8005322 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	4013      	ands	r3, r2
 800530c:	2b01      	cmp	r3, #1
 800530e:	d108      	bne.n	8005322 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2202      	movs	r2, #2
 8005316:	4252      	negs	r2, r2
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0018      	movs	r0, r3
 800531e:	f7fd fa4b 	bl	80027b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2280      	movs	r2, #128	; 0x80
 800532a:	4013      	ands	r3, r2
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	d10f      	bne.n	8005350 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2280      	movs	r2, #128	; 0x80
 8005338:	4013      	ands	r3, r2
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d108      	bne.n	8005350 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2281      	movs	r2, #129	; 0x81
 8005344:	4252      	negs	r2, r2
 8005346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f8c6 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	4013      	ands	r3, r2
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d10f      	bne.n	800537e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2240      	movs	r2, #64	; 0x40
 8005366:	4013      	ands	r3, r2
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d108      	bne.n	800537e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2241      	movs	r2, #65	; 0x41
 8005372:	4252      	negs	r2, r2
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0018      	movs	r0, r3
 800537a:	f000 f833 	bl	80053e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2220      	movs	r2, #32
 8005386:	4013      	ands	r3, r2
 8005388:	2b20      	cmp	r3, #32
 800538a:	d10f      	bne.n	80053ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	4013      	ands	r3, r2
 8005396:	2b20      	cmp	r3, #32
 8005398:	d108      	bne.n	80053ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2221      	movs	r2, #33	; 0x21
 80053a0:	4252      	negs	r2, r2
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 f890 	bl	80054cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b002      	add	sp, #8
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <TIM_Base_SetConfig+0xc0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0x20>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a2a      	ldr	r2, [pc, #168]	; (80054b8 <TIM_Base_SetConfig+0xc4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d108      	bne.n	8005426 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2270      	movs	r2, #112	; 0x70
 8005418:	4393      	bics	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <TIM_Base_SetConfig+0xc0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_Base_SetConfig+0x5a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <TIM_Base_SetConfig+0xc4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_Base_SetConfig+0x5a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a20      	ldr	r2, [pc, #128]	; (80054bc <TIM_Base_SetConfig+0xc8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_Base_SetConfig+0x5a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <TIM_Base_SetConfig+0xcc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_Base_SetConfig+0x5a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <TIM_Base_SetConfig+0xd0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <TIM_Base_SetConfig+0xd4>)
 8005452:	4013      	ands	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	4393      	bics	r3, r2
 8005466:	001a      	movs	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <TIM_Base_SetConfig+0xc0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_Base_SetConfig+0xaa>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a0b      	ldr	r2, [pc, #44]	; (80054c0 <TIM_Base_SetConfig+0xcc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_Base_SetConfig+0xaa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <TIM_Base_SetConfig+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d103      	bne.n	80054a6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	615a      	str	r2, [r3, #20]
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b004      	add	sp, #16
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40002000 	.word	0x40002000
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800
 80054c8:	fffffcff 	.word	0xfffffcff

080054cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b002      	add	sp, #8
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	20000018 	.word	0x20000018

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2600      	movs	r6, #0
 80054fc:	4d0c      	ldr	r5, [pc, #48]	; (8005530 <__libc_init_array+0x38>)
 80054fe:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	2600      	movs	r6, #0
 800550a:	f000 fc29 	bl	8005d60 <_init>
 800550e:	4d0a      	ldr	r5, [pc, #40]	; (8005538 <__libc_init_array+0x40>)
 8005510:	4c0a      	ldr	r4, [pc, #40]	; (800553c <__libc_init_array+0x44>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	00b3      	lsls	r3, r6, #2
 800551e:	58eb      	ldr	r3, [r5, r3]
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	00b3      	lsls	r3, r6, #2
 8005528:	58eb      	ldr	r3, [r5, r3]
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08005f98 	.word	0x08005f98
 8005534:	08005f98 	.word	0x08005f98
 8005538:	08005f98 	.word	0x08005f98
 800553c:	08005f9c 	.word	0x08005f9c

08005540 <memset>:
 8005540:	0003      	movs	r3, r0
 8005542:	1812      	adds	r2, r2, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	7019      	strb	r1, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <siprintf>:
 8005550:	b40e      	push	{r1, r2, r3}
 8005552:	b500      	push	{lr}
 8005554:	490b      	ldr	r1, [pc, #44]	; (8005584 <siprintf+0x34>)
 8005556:	b09c      	sub	sp, #112	; 0x70
 8005558:	ab1d      	add	r3, sp, #116	; 0x74
 800555a:	9002      	str	r0, [sp, #8]
 800555c:	9006      	str	r0, [sp, #24]
 800555e:	9107      	str	r1, [sp, #28]
 8005560:	9104      	str	r1, [sp, #16]
 8005562:	4809      	ldr	r0, [pc, #36]	; (8005588 <siprintf+0x38>)
 8005564:	4909      	ldr	r1, [pc, #36]	; (800558c <siprintf+0x3c>)
 8005566:	cb04      	ldmia	r3!, {r2}
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	a902      	add	r1, sp, #8
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	f000 f870 	bl	8005654 <_svfiprintf_r>
 8005574:	2300      	movs	r3, #0
 8005576:	9a02      	ldr	r2, [sp, #8]
 8005578:	7013      	strb	r3, [r2, #0]
 800557a:	b01c      	add	sp, #112	; 0x70
 800557c:	bc08      	pop	{r3}
 800557e:	b003      	add	sp, #12
 8005580:	4718      	bx	r3
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	7fffffff 	.word	0x7fffffff
 8005588:	20000018 	.word	0x20000018
 800558c:	ffff0208 	.word	0xffff0208

08005590 <__ssputs_r>:
 8005590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005592:	688e      	ldr	r6, [r1, #8]
 8005594:	b085      	sub	sp, #20
 8005596:	0007      	movs	r7, r0
 8005598:	000c      	movs	r4, r1
 800559a:	9203      	str	r2, [sp, #12]
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	429e      	cmp	r6, r3
 80055a0:	d83c      	bhi.n	800561c <__ssputs_r+0x8c>
 80055a2:	2390      	movs	r3, #144	; 0x90
 80055a4:	898a      	ldrh	r2, [r1, #12]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	421a      	tst	r2, r3
 80055aa:	d034      	beq.n	8005616 <__ssputs_r+0x86>
 80055ac:	2503      	movs	r5, #3
 80055ae:	6909      	ldr	r1, [r1, #16]
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	1a5b      	subs	r3, r3, r1
 80055b4:	9302      	str	r3, [sp, #8]
 80055b6:	6963      	ldr	r3, [r4, #20]
 80055b8:	9802      	ldr	r0, [sp, #8]
 80055ba:	435d      	muls	r5, r3
 80055bc:	0feb      	lsrs	r3, r5, #31
 80055be:	195d      	adds	r5, r3, r5
 80055c0:	9b01      	ldr	r3, [sp, #4]
 80055c2:	106d      	asrs	r5, r5, #1
 80055c4:	3301      	adds	r3, #1
 80055c6:	181b      	adds	r3, r3, r0
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	d900      	bls.n	80055ce <__ssputs_r+0x3e>
 80055cc:	001d      	movs	r5, r3
 80055ce:	0553      	lsls	r3, r2, #21
 80055d0:	d532      	bpl.n	8005638 <__ssputs_r+0xa8>
 80055d2:	0029      	movs	r1, r5
 80055d4:	0038      	movs	r0, r7
 80055d6:	f000 fb23 	bl	8005c20 <_malloc_r>
 80055da:	1e06      	subs	r6, r0, #0
 80055dc:	d109      	bne.n	80055f2 <__ssputs_r+0x62>
 80055de:	230c      	movs	r3, #12
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	2001      	movs	r0, #1
 80055e6:	89a2      	ldrh	r2, [r4, #12]
 80055e8:	4240      	negs	r0, r0
 80055ea:	4313      	orrs	r3, r2
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	b005      	add	sp, #20
 80055f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f2:	9a02      	ldr	r2, [sp, #8]
 80055f4:	6921      	ldr	r1, [r4, #16]
 80055f6:	f000 faac 	bl	8005b52 <memcpy>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	4a14      	ldr	r2, [pc, #80]	; (8005650 <__ssputs_r+0xc0>)
 80055fe:	401a      	ands	r2, r3
 8005600:	2380      	movs	r3, #128	; 0x80
 8005602:	4313      	orrs	r3, r2
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	9b02      	ldr	r3, [sp, #8]
 8005608:	6126      	str	r6, [r4, #16]
 800560a:	18f6      	adds	r6, r6, r3
 800560c:	6026      	str	r6, [r4, #0]
 800560e:	6165      	str	r5, [r4, #20]
 8005610:	9e01      	ldr	r6, [sp, #4]
 8005612:	1aed      	subs	r5, r5, r3
 8005614:	60a5      	str	r5, [r4, #8]
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	429e      	cmp	r6, r3
 800561a:	d900      	bls.n	800561e <__ssputs_r+0x8e>
 800561c:	9e01      	ldr	r6, [sp, #4]
 800561e:	0032      	movs	r2, r6
 8005620:	9903      	ldr	r1, [sp, #12]
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	f000 fa9e 	bl	8005b64 <memmove>
 8005628:	68a3      	ldr	r3, [r4, #8]
 800562a:	2000      	movs	r0, #0
 800562c:	1b9b      	subs	r3, r3, r6
 800562e:	60a3      	str	r3, [r4, #8]
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	199e      	adds	r6, r3, r6
 8005634:	6026      	str	r6, [r4, #0]
 8005636:	e7da      	b.n	80055ee <__ssputs_r+0x5e>
 8005638:	002a      	movs	r2, r5
 800563a:	0038      	movs	r0, r7
 800563c:	f000 fb4e 	bl	8005cdc <_realloc_r>
 8005640:	1e06      	subs	r6, r0, #0
 8005642:	d1e0      	bne.n	8005606 <__ssputs_r+0x76>
 8005644:	6921      	ldr	r1, [r4, #16]
 8005646:	0038      	movs	r0, r7
 8005648:	f000 faa0 	bl	8005b8c <_free_r>
 800564c:	e7c7      	b.n	80055de <__ssputs_r+0x4e>
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	fffffb7f 	.word	0xfffffb7f

08005654 <_svfiprintf_r>:
 8005654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005656:	b0a1      	sub	sp, #132	; 0x84
 8005658:	9003      	str	r0, [sp, #12]
 800565a:	001d      	movs	r5, r3
 800565c:	898b      	ldrh	r3, [r1, #12]
 800565e:	000f      	movs	r7, r1
 8005660:	0016      	movs	r6, r2
 8005662:	061b      	lsls	r3, r3, #24
 8005664:	d511      	bpl.n	800568a <_svfiprintf_r+0x36>
 8005666:	690b      	ldr	r3, [r1, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10e      	bne.n	800568a <_svfiprintf_r+0x36>
 800566c:	2140      	movs	r1, #64	; 0x40
 800566e:	f000 fad7 	bl	8005c20 <_malloc_r>
 8005672:	6038      	str	r0, [r7, #0]
 8005674:	6138      	str	r0, [r7, #16]
 8005676:	2800      	cmp	r0, #0
 8005678:	d105      	bne.n	8005686 <_svfiprintf_r+0x32>
 800567a:	230c      	movs	r3, #12
 800567c:	9a03      	ldr	r2, [sp, #12]
 800567e:	3801      	subs	r0, #1
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	b021      	add	sp, #132	; 0x84
 8005684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	2300      	movs	r3, #0
 800568c:	ac08      	add	r4, sp, #32
 800568e:	6163      	str	r3, [r4, #20]
 8005690:	3320      	adds	r3, #32
 8005692:	7663      	strb	r3, [r4, #25]
 8005694:	3310      	adds	r3, #16
 8005696:	76a3      	strb	r3, [r4, #26]
 8005698:	9507      	str	r5, [sp, #28]
 800569a:	0035      	movs	r5, r6
 800569c:	782b      	ldrb	r3, [r5, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <_svfiprintf_r+0x52>
 80056a2:	2b25      	cmp	r3, #37	; 0x25
 80056a4:	d146      	bne.n	8005734 <_svfiprintf_r+0xe0>
 80056a6:	1bab      	subs	r3, r5, r6
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	d00c      	beq.n	80056c6 <_svfiprintf_r+0x72>
 80056ac:	0032      	movs	r2, r6
 80056ae:	0039      	movs	r1, r7
 80056b0:	9803      	ldr	r0, [sp, #12]
 80056b2:	f7ff ff6d 	bl	8005590 <__ssputs_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d100      	bne.n	80056bc <_svfiprintf_r+0x68>
 80056ba:	e0ae      	b.n	800581a <_svfiprintf_r+0x1c6>
 80056bc:	6962      	ldr	r2, [r4, #20]
 80056be:	9b05      	ldr	r3, [sp, #20]
 80056c0:	4694      	mov	ip, r2
 80056c2:	4463      	add	r3, ip
 80056c4:	6163      	str	r3, [r4, #20]
 80056c6:	782b      	ldrb	r3, [r5, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d100      	bne.n	80056ce <_svfiprintf_r+0x7a>
 80056cc:	e0a5      	b.n	800581a <_svfiprintf_r+0x1c6>
 80056ce:	2201      	movs	r2, #1
 80056d0:	2300      	movs	r3, #0
 80056d2:	4252      	negs	r2, r2
 80056d4:	6062      	str	r2, [r4, #4]
 80056d6:	a904      	add	r1, sp, #16
 80056d8:	3254      	adds	r2, #84	; 0x54
 80056da:	1852      	adds	r2, r2, r1
 80056dc:	1c6e      	adds	r6, r5, #1
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	60e3      	str	r3, [r4, #12]
 80056e2:	60a3      	str	r3, [r4, #8]
 80056e4:	7013      	strb	r3, [r2, #0]
 80056e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80056e8:	7831      	ldrb	r1, [r6, #0]
 80056ea:	2205      	movs	r2, #5
 80056ec:	4853      	ldr	r0, [pc, #332]	; (800583c <_svfiprintf_r+0x1e8>)
 80056ee:	f000 fa25 	bl	8005b3c <memchr>
 80056f2:	1c75      	adds	r5, r6, #1
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d11f      	bne.n	8005738 <_svfiprintf_r+0xe4>
 80056f8:	6822      	ldr	r2, [r4, #0]
 80056fa:	06d3      	lsls	r3, r2, #27
 80056fc:	d504      	bpl.n	8005708 <_svfiprintf_r+0xb4>
 80056fe:	2353      	movs	r3, #83	; 0x53
 8005700:	a904      	add	r1, sp, #16
 8005702:	185b      	adds	r3, r3, r1
 8005704:	2120      	movs	r1, #32
 8005706:	7019      	strb	r1, [r3, #0]
 8005708:	0713      	lsls	r3, r2, #28
 800570a:	d504      	bpl.n	8005716 <_svfiprintf_r+0xc2>
 800570c:	2353      	movs	r3, #83	; 0x53
 800570e:	a904      	add	r1, sp, #16
 8005710:	185b      	adds	r3, r3, r1
 8005712:	212b      	movs	r1, #43	; 0x2b
 8005714:	7019      	strb	r1, [r3, #0]
 8005716:	7833      	ldrb	r3, [r6, #0]
 8005718:	2b2a      	cmp	r3, #42	; 0x2a
 800571a:	d016      	beq.n	800574a <_svfiprintf_r+0xf6>
 800571c:	0035      	movs	r5, r6
 800571e:	2100      	movs	r1, #0
 8005720:	200a      	movs	r0, #10
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	782a      	ldrb	r2, [r5, #0]
 8005726:	1c6e      	adds	r6, r5, #1
 8005728:	3a30      	subs	r2, #48	; 0x30
 800572a:	2a09      	cmp	r2, #9
 800572c:	d94e      	bls.n	80057cc <_svfiprintf_r+0x178>
 800572e:	2900      	cmp	r1, #0
 8005730:	d018      	beq.n	8005764 <_svfiprintf_r+0x110>
 8005732:	e010      	b.n	8005756 <_svfiprintf_r+0x102>
 8005734:	3501      	adds	r5, #1
 8005736:	e7b1      	b.n	800569c <_svfiprintf_r+0x48>
 8005738:	4b40      	ldr	r3, [pc, #256]	; (800583c <_svfiprintf_r+0x1e8>)
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	1ac0      	subs	r0, r0, r3
 800573e:	2301      	movs	r3, #1
 8005740:	4083      	lsls	r3, r0
 8005742:	4313      	orrs	r3, r2
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	002e      	movs	r6, r5
 8005748:	e7ce      	b.n	80056e8 <_svfiprintf_r+0x94>
 800574a:	9b07      	ldr	r3, [sp, #28]
 800574c:	1d19      	adds	r1, r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	9107      	str	r1, [sp, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	db01      	blt.n	800575a <_svfiprintf_r+0x106>
 8005756:	930b      	str	r3, [sp, #44]	; 0x2c
 8005758:	e004      	b.n	8005764 <_svfiprintf_r+0x110>
 800575a:	425b      	negs	r3, r3
 800575c:	60e3      	str	r3, [r4, #12]
 800575e:	2302      	movs	r3, #2
 8005760:	4313      	orrs	r3, r2
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	782b      	ldrb	r3, [r5, #0]
 8005766:	2b2e      	cmp	r3, #46	; 0x2e
 8005768:	d10a      	bne.n	8005780 <_svfiprintf_r+0x12c>
 800576a:	786b      	ldrb	r3, [r5, #1]
 800576c:	2b2a      	cmp	r3, #42	; 0x2a
 800576e:	d135      	bne.n	80057dc <_svfiprintf_r+0x188>
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	3502      	adds	r5, #2
 8005774:	1d1a      	adds	r2, r3, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	9207      	str	r2, [sp, #28]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db2b      	blt.n	80057d6 <_svfiprintf_r+0x182>
 800577e:	9309      	str	r3, [sp, #36]	; 0x24
 8005780:	4e2f      	ldr	r6, [pc, #188]	; (8005840 <_svfiprintf_r+0x1ec>)
 8005782:	7829      	ldrb	r1, [r5, #0]
 8005784:	2203      	movs	r2, #3
 8005786:	0030      	movs	r0, r6
 8005788:	f000 f9d8 	bl	8005b3c <memchr>
 800578c:	2800      	cmp	r0, #0
 800578e:	d006      	beq.n	800579e <_svfiprintf_r+0x14a>
 8005790:	2340      	movs	r3, #64	; 0x40
 8005792:	1b80      	subs	r0, r0, r6
 8005794:	4083      	lsls	r3, r0
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	3501      	adds	r5, #1
 800579a:	4313      	orrs	r3, r2
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	7829      	ldrb	r1, [r5, #0]
 80057a0:	2206      	movs	r2, #6
 80057a2:	4828      	ldr	r0, [pc, #160]	; (8005844 <_svfiprintf_r+0x1f0>)
 80057a4:	1c6e      	adds	r6, r5, #1
 80057a6:	7621      	strb	r1, [r4, #24]
 80057a8:	f000 f9c8 	bl	8005b3c <memchr>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d03c      	beq.n	800582a <_svfiprintf_r+0x1d6>
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <_svfiprintf_r+0x1f4>)
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d125      	bne.n	8005802 <_svfiprintf_r+0x1ae>
 80057b6:	2207      	movs	r2, #7
 80057b8:	9b07      	ldr	r3, [sp, #28]
 80057ba:	3307      	adds	r3, #7
 80057bc:	4393      	bics	r3, r2
 80057be:	3308      	adds	r3, #8
 80057c0:	9307      	str	r3, [sp, #28]
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	9a04      	ldr	r2, [sp, #16]
 80057c6:	189b      	adds	r3, r3, r2
 80057c8:	6163      	str	r3, [r4, #20]
 80057ca:	e766      	b.n	800569a <_svfiprintf_r+0x46>
 80057cc:	4343      	muls	r3, r0
 80057ce:	2101      	movs	r1, #1
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	0035      	movs	r5, r6
 80057d4:	e7a6      	b.n	8005724 <_svfiprintf_r+0xd0>
 80057d6:	2301      	movs	r3, #1
 80057d8:	425b      	negs	r3, r3
 80057da:	e7d0      	b.n	800577e <_svfiprintf_r+0x12a>
 80057dc:	2300      	movs	r3, #0
 80057de:	200a      	movs	r0, #10
 80057e0:	001a      	movs	r2, r3
 80057e2:	3501      	adds	r5, #1
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	7829      	ldrb	r1, [r5, #0]
 80057e8:	1c6e      	adds	r6, r5, #1
 80057ea:	3930      	subs	r1, #48	; 0x30
 80057ec:	2909      	cmp	r1, #9
 80057ee:	d903      	bls.n	80057f8 <_svfiprintf_r+0x1a4>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0c5      	beq.n	8005780 <_svfiprintf_r+0x12c>
 80057f4:	9209      	str	r2, [sp, #36]	; 0x24
 80057f6:	e7c3      	b.n	8005780 <_svfiprintf_r+0x12c>
 80057f8:	4342      	muls	r2, r0
 80057fa:	2301      	movs	r3, #1
 80057fc:	1852      	adds	r2, r2, r1
 80057fe:	0035      	movs	r5, r6
 8005800:	e7f1      	b.n	80057e6 <_svfiprintf_r+0x192>
 8005802:	ab07      	add	r3, sp, #28
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	003a      	movs	r2, r7
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <_svfiprintf_r+0x1f8>)
 800580a:	0021      	movs	r1, r4
 800580c:	9803      	ldr	r0, [sp, #12]
 800580e:	e000      	b.n	8005812 <_svfiprintf_r+0x1be>
 8005810:	bf00      	nop
 8005812:	9004      	str	r0, [sp, #16]
 8005814:	9b04      	ldr	r3, [sp, #16]
 8005816:	3301      	adds	r3, #1
 8005818:	d1d3      	bne.n	80057c2 <_svfiprintf_r+0x16e>
 800581a:	89bb      	ldrh	r3, [r7, #12]
 800581c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800581e:	065b      	lsls	r3, r3, #25
 8005820:	d400      	bmi.n	8005824 <_svfiprintf_r+0x1d0>
 8005822:	e72e      	b.n	8005682 <_svfiprintf_r+0x2e>
 8005824:	2001      	movs	r0, #1
 8005826:	4240      	negs	r0, r0
 8005828:	e72b      	b.n	8005682 <_svfiprintf_r+0x2e>
 800582a:	ab07      	add	r3, sp, #28
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	003a      	movs	r2, r7
 8005830:	4b06      	ldr	r3, [pc, #24]	; (800584c <_svfiprintf_r+0x1f8>)
 8005832:	0021      	movs	r1, r4
 8005834:	9803      	ldr	r0, [sp, #12]
 8005836:	f000 f879 	bl	800592c <_printf_i>
 800583a:	e7ea      	b.n	8005812 <_svfiprintf_r+0x1be>
 800583c:	08005f64 	.word	0x08005f64
 8005840:	08005f6a 	.word	0x08005f6a
 8005844:	08005f6e 	.word	0x08005f6e
 8005848:	00000000 	.word	0x00000000
 800584c:	08005591 	.word	0x08005591

08005850 <_printf_common>:
 8005850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005852:	0015      	movs	r5, r2
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	688a      	ldr	r2, [r1, #8]
 8005858:	690b      	ldr	r3, [r1, #16]
 800585a:	9000      	str	r0, [sp, #0]
 800585c:	000c      	movs	r4, r1
 800585e:	4293      	cmp	r3, r2
 8005860:	da00      	bge.n	8005864 <_printf_common+0x14>
 8005862:	0013      	movs	r3, r2
 8005864:	0022      	movs	r2, r4
 8005866:	602b      	str	r3, [r5, #0]
 8005868:	3243      	adds	r2, #67	; 0x43
 800586a:	7812      	ldrb	r2, [r2, #0]
 800586c:	2a00      	cmp	r2, #0
 800586e:	d001      	beq.n	8005874 <_printf_common+0x24>
 8005870:	3301      	adds	r3, #1
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	069b      	lsls	r3, r3, #26
 8005878:	d502      	bpl.n	8005880 <_printf_common+0x30>
 800587a:	682b      	ldr	r3, [r5, #0]
 800587c:	3302      	adds	r3, #2
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	2706      	movs	r7, #6
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	401f      	ands	r7, r3
 8005886:	d027      	beq.n	80058d8 <_printf_common+0x88>
 8005888:	0023      	movs	r3, r4
 800588a:	3343      	adds	r3, #67	; 0x43
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	4193      	sbcs	r3, r2
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	0692      	lsls	r2, r2, #26
 8005896:	d430      	bmi.n	80058fa <_printf_common+0xaa>
 8005898:	0022      	movs	r2, r4
 800589a:	9901      	ldr	r1, [sp, #4]
 800589c:	3243      	adds	r2, #67	; 0x43
 800589e:	9800      	ldr	r0, [sp, #0]
 80058a0:	9e08      	ldr	r6, [sp, #32]
 80058a2:	47b0      	blx	r6
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d025      	beq.n	80058f4 <_printf_common+0xa4>
 80058a8:	2306      	movs	r3, #6
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	682a      	ldr	r2, [r5, #0]
 80058ae:	68e1      	ldr	r1, [r4, #12]
 80058b0:	4003      	ands	r3, r0
 80058b2:	2500      	movs	r5, #0
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d103      	bne.n	80058c0 <_printf_common+0x70>
 80058b8:	1a8d      	subs	r5, r1, r2
 80058ba:	43eb      	mvns	r3, r5
 80058bc:	17db      	asrs	r3, r3, #31
 80058be:	401d      	ands	r5, r3
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	6922      	ldr	r2, [r4, #16]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	dd01      	ble.n	80058cc <_printf_common+0x7c>
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	18ed      	adds	r5, r5, r3
 80058cc:	2700      	movs	r7, #0
 80058ce:	42bd      	cmp	r5, r7
 80058d0:	d120      	bne.n	8005914 <_printf_common+0xc4>
 80058d2:	2000      	movs	r0, #0
 80058d4:	e010      	b.n	80058f8 <_printf_common+0xa8>
 80058d6:	3701      	adds	r7, #1
 80058d8:	68e3      	ldr	r3, [r4, #12]
 80058da:	682a      	ldr	r2, [r5, #0]
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	42bb      	cmp	r3, r7
 80058e0:	ddd2      	ble.n	8005888 <_printf_common+0x38>
 80058e2:	0022      	movs	r2, r4
 80058e4:	2301      	movs	r3, #1
 80058e6:	3219      	adds	r2, #25
 80058e8:	9901      	ldr	r1, [sp, #4]
 80058ea:	9800      	ldr	r0, [sp, #0]
 80058ec:	9e08      	ldr	r6, [sp, #32]
 80058ee:	47b0      	blx	r6
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d1f0      	bne.n	80058d6 <_printf_common+0x86>
 80058f4:	2001      	movs	r0, #1
 80058f6:	4240      	negs	r0, r0
 80058f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058fa:	2030      	movs	r0, #48	; 0x30
 80058fc:	18e1      	adds	r1, r4, r3
 80058fe:	3143      	adds	r1, #67	; 0x43
 8005900:	7008      	strb	r0, [r1, #0]
 8005902:	0021      	movs	r1, r4
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	3145      	adds	r1, #69	; 0x45
 8005908:	7809      	ldrb	r1, [r1, #0]
 800590a:	18a2      	adds	r2, r4, r2
 800590c:	3243      	adds	r2, #67	; 0x43
 800590e:	3302      	adds	r3, #2
 8005910:	7011      	strb	r1, [r2, #0]
 8005912:	e7c1      	b.n	8005898 <_printf_common+0x48>
 8005914:	0022      	movs	r2, r4
 8005916:	2301      	movs	r3, #1
 8005918:	321a      	adds	r2, #26
 800591a:	9901      	ldr	r1, [sp, #4]
 800591c:	9800      	ldr	r0, [sp, #0]
 800591e:	9e08      	ldr	r6, [sp, #32]
 8005920:	47b0      	blx	r6
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d0e6      	beq.n	80058f4 <_printf_common+0xa4>
 8005926:	3701      	adds	r7, #1
 8005928:	e7d1      	b.n	80058ce <_printf_common+0x7e>
	...

0800592c <_printf_i>:
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	9204      	str	r2, [sp, #16]
 8005932:	000a      	movs	r2, r1
 8005934:	3243      	adds	r2, #67	; 0x43
 8005936:	9305      	str	r3, [sp, #20]
 8005938:	9003      	str	r0, [sp, #12]
 800593a:	9202      	str	r2, [sp, #8]
 800593c:	7e0a      	ldrb	r2, [r1, #24]
 800593e:	000c      	movs	r4, r1
 8005940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005942:	2a6e      	cmp	r2, #110	; 0x6e
 8005944:	d100      	bne.n	8005948 <_printf_i+0x1c>
 8005946:	e086      	b.n	8005a56 <_printf_i+0x12a>
 8005948:	d81f      	bhi.n	800598a <_printf_i+0x5e>
 800594a:	2a63      	cmp	r2, #99	; 0x63
 800594c:	d033      	beq.n	80059b6 <_printf_i+0x8a>
 800594e:	d808      	bhi.n	8005962 <_printf_i+0x36>
 8005950:	2a00      	cmp	r2, #0
 8005952:	d100      	bne.n	8005956 <_printf_i+0x2a>
 8005954:	e08c      	b.n	8005a70 <_printf_i+0x144>
 8005956:	2a58      	cmp	r2, #88	; 0x58
 8005958:	d04d      	beq.n	80059f6 <_printf_i+0xca>
 800595a:	0025      	movs	r5, r4
 800595c:	3542      	adds	r5, #66	; 0x42
 800595e:	702a      	strb	r2, [r5, #0]
 8005960:	e030      	b.n	80059c4 <_printf_i+0x98>
 8005962:	2a64      	cmp	r2, #100	; 0x64
 8005964:	d001      	beq.n	800596a <_printf_i+0x3e>
 8005966:	2a69      	cmp	r2, #105	; 0x69
 8005968:	d1f7      	bne.n	800595a <_printf_i+0x2e>
 800596a:	6819      	ldr	r1, [r3, #0]
 800596c:	6825      	ldr	r5, [r4, #0]
 800596e:	1d0a      	adds	r2, r1, #4
 8005970:	0628      	lsls	r0, r5, #24
 8005972:	d529      	bpl.n	80059c8 <_printf_i+0x9c>
 8005974:	6808      	ldr	r0, [r1, #0]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	2800      	cmp	r0, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0x58>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	9a02      	ldr	r2, [sp, #8]
 8005980:	4240      	negs	r0, r0
 8005982:	7013      	strb	r3, [r2, #0]
 8005984:	4e6b      	ldr	r6, [pc, #428]	; (8005b34 <_printf_i+0x208>)
 8005986:	270a      	movs	r7, #10
 8005988:	e04f      	b.n	8005a2a <_printf_i+0xfe>
 800598a:	2a73      	cmp	r2, #115	; 0x73
 800598c:	d074      	beq.n	8005a78 <_printf_i+0x14c>
 800598e:	d808      	bhi.n	80059a2 <_printf_i+0x76>
 8005990:	2a6f      	cmp	r2, #111	; 0x6f
 8005992:	d01f      	beq.n	80059d4 <_printf_i+0xa8>
 8005994:	2a70      	cmp	r2, #112	; 0x70
 8005996:	d1e0      	bne.n	800595a <_printf_i+0x2e>
 8005998:	2220      	movs	r2, #32
 800599a:	6809      	ldr	r1, [r1, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	e003      	b.n	80059aa <_printf_i+0x7e>
 80059a2:	2a75      	cmp	r2, #117	; 0x75
 80059a4:	d016      	beq.n	80059d4 <_printf_i+0xa8>
 80059a6:	2a78      	cmp	r2, #120	; 0x78
 80059a8:	d1d7      	bne.n	800595a <_printf_i+0x2e>
 80059aa:	0022      	movs	r2, r4
 80059ac:	2178      	movs	r1, #120	; 0x78
 80059ae:	3245      	adds	r2, #69	; 0x45
 80059b0:	7011      	strb	r1, [r2, #0]
 80059b2:	4e61      	ldr	r6, [pc, #388]	; (8005b38 <_printf_i+0x20c>)
 80059b4:	e022      	b.n	80059fc <_printf_i+0xd0>
 80059b6:	0025      	movs	r5, r4
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	3542      	adds	r5, #66	; 0x42
 80059bc:	1d11      	adds	r1, r2, #4
 80059be:	6019      	str	r1, [r3, #0]
 80059c0:	6813      	ldr	r3, [r2, #0]
 80059c2:	702b      	strb	r3, [r5, #0]
 80059c4:	2301      	movs	r3, #1
 80059c6:	e065      	b.n	8005a94 <_printf_i+0x168>
 80059c8:	6808      	ldr	r0, [r1, #0]
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	0669      	lsls	r1, r5, #25
 80059ce:	d5d3      	bpl.n	8005978 <_printf_i+0x4c>
 80059d0:	b200      	sxth	r0, r0
 80059d2:	e7d1      	b.n	8005978 <_printf_i+0x4c>
 80059d4:	6819      	ldr	r1, [r3, #0]
 80059d6:	6825      	ldr	r5, [r4, #0]
 80059d8:	1d08      	adds	r0, r1, #4
 80059da:	6018      	str	r0, [r3, #0]
 80059dc:	6808      	ldr	r0, [r1, #0]
 80059de:	062e      	lsls	r6, r5, #24
 80059e0:	d505      	bpl.n	80059ee <_printf_i+0xc2>
 80059e2:	4e54      	ldr	r6, [pc, #336]	; (8005b34 <_printf_i+0x208>)
 80059e4:	2708      	movs	r7, #8
 80059e6:	2a6f      	cmp	r2, #111	; 0x6f
 80059e8:	d01b      	beq.n	8005a22 <_printf_i+0xf6>
 80059ea:	270a      	movs	r7, #10
 80059ec:	e019      	b.n	8005a22 <_printf_i+0xf6>
 80059ee:	066d      	lsls	r5, r5, #25
 80059f0:	d5f7      	bpl.n	80059e2 <_printf_i+0xb6>
 80059f2:	b280      	uxth	r0, r0
 80059f4:	e7f5      	b.n	80059e2 <_printf_i+0xb6>
 80059f6:	3145      	adds	r1, #69	; 0x45
 80059f8:	4e4e      	ldr	r6, [pc, #312]	; (8005b34 <_printf_i+0x208>)
 80059fa:	700a      	strb	r2, [r1, #0]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	1d01      	adds	r1, r0, #4
 8005a02:	6800      	ldr	r0, [r0, #0]
 8005a04:	6019      	str	r1, [r3, #0]
 8005a06:	0615      	lsls	r5, r2, #24
 8005a08:	d521      	bpl.n	8005a4e <_printf_i+0x122>
 8005a0a:	07d3      	lsls	r3, r2, #31
 8005a0c:	d502      	bpl.n	8005a14 <_printf_i+0xe8>
 8005a0e:	2320      	movs	r3, #32
 8005a10:	431a      	orrs	r2, r3
 8005a12:	6022      	str	r2, [r4, #0]
 8005a14:	2710      	movs	r7, #16
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d103      	bne.n	8005a22 <_printf_i+0xf6>
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	439a      	bics	r2, r3
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	0023      	movs	r3, r4
 8005a24:	2200      	movs	r2, #0
 8005a26:	3343      	adds	r3, #67	; 0x43
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	db58      	blt.n	8005ae4 <_printf_i+0x1b8>
 8005a32:	2204      	movs	r2, #4
 8005a34:	6821      	ldr	r1, [r4, #0]
 8005a36:	4391      	bics	r1, r2
 8005a38:	6021      	str	r1, [r4, #0]
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d154      	bne.n	8005ae8 <_printf_i+0x1bc>
 8005a3e:	9d02      	ldr	r5, [sp, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d05a      	beq.n	8005afa <_printf_i+0x1ce>
 8005a44:	0025      	movs	r5, r4
 8005a46:	7833      	ldrb	r3, [r6, #0]
 8005a48:	3542      	adds	r5, #66	; 0x42
 8005a4a:	702b      	strb	r3, [r5, #0]
 8005a4c:	e055      	b.n	8005afa <_printf_i+0x1ce>
 8005a4e:	0655      	lsls	r5, r2, #25
 8005a50:	d5db      	bpl.n	8005a0a <_printf_i+0xde>
 8005a52:	b280      	uxth	r0, r0
 8005a54:	e7d9      	b.n	8005a0a <_printf_i+0xde>
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	680d      	ldr	r5, [r1, #0]
 8005a5a:	1d10      	adds	r0, r2, #4
 8005a5c:	6949      	ldr	r1, [r1, #20]
 8005a5e:	6018      	str	r0, [r3, #0]
 8005a60:	6813      	ldr	r3, [r2, #0]
 8005a62:	062e      	lsls	r6, r5, #24
 8005a64:	d501      	bpl.n	8005a6a <_printf_i+0x13e>
 8005a66:	6019      	str	r1, [r3, #0]
 8005a68:	e002      	b.n	8005a70 <_printf_i+0x144>
 8005a6a:	066d      	lsls	r5, r5, #25
 8005a6c:	d5fb      	bpl.n	8005a66 <_printf_i+0x13a>
 8005a6e:	8019      	strh	r1, [r3, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	9d02      	ldr	r5, [sp, #8]
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	e04f      	b.n	8005b18 <_printf_i+0x1ec>
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	1d11      	adds	r1, r2, #4
 8005a7c:	6019      	str	r1, [r3, #0]
 8005a7e:	6815      	ldr	r5, [r2, #0]
 8005a80:	2100      	movs	r1, #0
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	0028      	movs	r0, r5
 8005a86:	f000 f859 	bl	8005b3c <memchr>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d001      	beq.n	8005a92 <_printf_i+0x166>
 8005a8e:	1b40      	subs	r0, r0, r5
 8005a90:	6060      	str	r0, [r4, #4]
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	2300      	movs	r3, #0
 8005a98:	9a02      	ldr	r2, [sp, #8]
 8005a9a:	7013      	strb	r3, [r2, #0]
 8005a9c:	e03c      	b.n	8005b18 <_printf_i+0x1ec>
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	002a      	movs	r2, r5
 8005aa2:	9904      	ldr	r1, [sp, #16]
 8005aa4:	9803      	ldr	r0, [sp, #12]
 8005aa6:	9d05      	ldr	r5, [sp, #20]
 8005aa8:	47a8      	blx	r5
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	d03e      	beq.n	8005b2c <_printf_i+0x200>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	079b      	lsls	r3, r3, #30
 8005ab2:	d415      	bmi.n	8005ae0 <_printf_i+0x1b4>
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	4298      	cmp	r0, r3
 8005aba:	da39      	bge.n	8005b30 <_printf_i+0x204>
 8005abc:	0018      	movs	r0, r3
 8005abe:	e037      	b.n	8005b30 <_printf_i+0x204>
 8005ac0:	0022      	movs	r2, r4
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	3219      	adds	r2, #25
 8005ac6:	9904      	ldr	r1, [sp, #16]
 8005ac8:	9803      	ldr	r0, [sp, #12]
 8005aca:	9e05      	ldr	r6, [sp, #20]
 8005acc:	47b0      	blx	r6
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	d02c      	beq.n	8005b2c <_printf_i+0x200>
 8005ad2:	3501      	adds	r5, #1
 8005ad4:	68e3      	ldr	r3, [r4, #12]
 8005ad6:	9a07      	ldr	r2, [sp, #28]
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	42ab      	cmp	r3, r5
 8005adc:	dcf0      	bgt.n	8005ac0 <_printf_i+0x194>
 8005ade:	e7e9      	b.n	8005ab4 <_printf_i+0x188>
 8005ae0:	2500      	movs	r5, #0
 8005ae2:	e7f7      	b.n	8005ad4 <_printf_i+0x1a8>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d0ad      	beq.n	8005a44 <_printf_i+0x118>
 8005ae8:	9d02      	ldr	r5, [sp, #8]
 8005aea:	0039      	movs	r1, r7
 8005aec:	f7fa fb92 	bl	8000214 <__aeabi_uidivmod>
 8005af0:	5c73      	ldrb	r3, [r6, r1]
 8005af2:	3d01      	subs	r5, #1
 8005af4:	702b      	strb	r3, [r5, #0]
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1f7      	bne.n	8005aea <_printf_i+0x1be>
 8005afa:	2f08      	cmp	r7, #8
 8005afc:	d109      	bne.n	8005b12 <_printf_i+0x1e6>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	07db      	lsls	r3, r3, #31
 8005b02:	d506      	bpl.n	8005b12 <_printf_i+0x1e6>
 8005b04:	6863      	ldr	r3, [r4, #4]
 8005b06:	6922      	ldr	r2, [r4, #16]
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	dc02      	bgt.n	8005b12 <_printf_i+0x1e6>
 8005b0c:	2330      	movs	r3, #48	; 0x30
 8005b0e:	3d01      	subs	r5, #1
 8005b10:	702b      	strb	r3, [r5, #0]
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	1b5b      	subs	r3, r3, r5
 8005b16:	6123      	str	r3, [r4, #16]
 8005b18:	9b05      	ldr	r3, [sp, #20]
 8005b1a:	aa07      	add	r2, sp, #28
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	0021      	movs	r1, r4
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	9803      	ldr	r0, [sp, #12]
 8005b24:	f7ff fe94 	bl	8005850 <_printf_common>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d1b8      	bne.n	8005a9e <_printf_i+0x172>
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	4240      	negs	r0, r0
 8005b30:	b009      	add	sp, #36	; 0x24
 8005b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b34:	08005f75 	.word	0x08005f75
 8005b38:	08005f86 	.word	0x08005f86

08005b3c <memchr>:
 8005b3c:	b2c9      	uxtb	r1, r1
 8005b3e:	1882      	adds	r2, r0, r2
 8005b40:	4290      	cmp	r0, r2
 8005b42:	d101      	bne.n	8005b48 <memchr+0xc>
 8005b44:	2000      	movs	r0, #0
 8005b46:	4770      	bx	lr
 8005b48:	7803      	ldrb	r3, [r0, #0]
 8005b4a:	428b      	cmp	r3, r1
 8005b4c:	d0fb      	beq.n	8005b46 <memchr+0xa>
 8005b4e:	3001      	adds	r0, #1
 8005b50:	e7f6      	b.n	8005b40 <memchr+0x4>

08005b52 <memcpy>:
 8005b52:	2300      	movs	r3, #0
 8005b54:	b510      	push	{r4, lr}
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d100      	bne.n	8005b5c <memcpy+0xa>
 8005b5a:	bd10      	pop	{r4, pc}
 8005b5c:	5ccc      	ldrb	r4, [r1, r3]
 8005b5e:	54c4      	strb	r4, [r0, r3]
 8005b60:	3301      	adds	r3, #1
 8005b62:	e7f8      	b.n	8005b56 <memcpy+0x4>

08005b64 <memmove>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4288      	cmp	r0, r1
 8005b68:	d902      	bls.n	8005b70 <memmove+0xc>
 8005b6a:	188b      	adds	r3, r1, r2
 8005b6c:	4298      	cmp	r0, r3
 8005b6e:	d303      	bcc.n	8005b78 <memmove+0x14>
 8005b70:	2300      	movs	r3, #0
 8005b72:	e007      	b.n	8005b84 <memmove+0x20>
 8005b74:	5c8b      	ldrb	r3, [r1, r2]
 8005b76:	5483      	strb	r3, [r0, r2]
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	d2fb      	bcs.n	8005b74 <memmove+0x10>
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	5ccc      	ldrb	r4, [r1, r3]
 8005b80:	54c4      	strb	r4, [r0, r3]
 8005b82:	3301      	adds	r3, #1
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1fa      	bne.n	8005b7e <memmove+0x1a>
 8005b88:	e7f8      	b.n	8005b7c <memmove+0x18>
	...

08005b8c <_free_r>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	0005      	movs	r5, r0
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d010      	beq.n	8005bb6 <_free_r+0x2a>
 8005b94:	1f0c      	subs	r4, r1, #4
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da00      	bge.n	8005b9e <_free_r+0x12>
 8005b9c:	18e4      	adds	r4, r4, r3
 8005b9e:	0028      	movs	r0, r5
 8005ba0:	f000 f8d4 	bl	8005d4c <__malloc_lock>
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <_free_r+0x90>)
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <_free_r+0x2c>
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	6014      	str	r4, [r2, #0]
 8005bb0:	0028      	movs	r0, r5
 8005bb2:	f000 f8cc 	bl	8005d4e <__malloc_unlock>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d909      	bls.n	8005bd0 <_free_r+0x44>
 8005bbc:	6821      	ldr	r1, [r4, #0]
 8005bbe:	1860      	adds	r0, r4, r1
 8005bc0:	4283      	cmp	r3, r0
 8005bc2:	d1f3      	bne.n	8005bac <_free_r+0x20>
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	1841      	adds	r1, r0, r1
 8005bca:	6021      	str	r1, [r4, #0]
 8005bcc:	e7ee      	b.n	8005bac <_free_r+0x20>
 8005bce:	0013      	movs	r3, r2
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	d001      	beq.n	8005bda <_free_r+0x4e>
 8005bd6:	42a2      	cmp	r2, r4
 8005bd8:	d9f9      	bls.n	8005bce <_free_r+0x42>
 8005bda:	6819      	ldr	r1, [r3, #0]
 8005bdc:	1858      	adds	r0, r3, r1
 8005bde:	42a0      	cmp	r0, r4
 8005be0:	d10b      	bne.n	8005bfa <_free_r+0x6e>
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	1809      	adds	r1, r1, r0
 8005be6:	1858      	adds	r0, r3, r1
 8005be8:	6019      	str	r1, [r3, #0]
 8005bea:	4282      	cmp	r2, r0
 8005bec:	d1e0      	bne.n	8005bb0 <_free_r+0x24>
 8005bee:	6810      	ldr	r0, [r2, #0]
 8005bf0:	6852      	ldr	r2, [r2, #4]
 8005bf2:	1841      	adds	r1, r0, r1
 8005bf4:	6019      	str	r1, [r3, #0]
 8005bf6:	605a      	str	r2, [r3, #4]
 8005bf8:	e7da      	b.n	8005bb0 <_free_r+0x24>
 8005bfa:	42a0      	cmp	r0, r4
 8005bfc:	d902      	bls.n	8005c04 <_free_r+0x78>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	e7d5      	b.n	8005bb0 <_free_r+0x24>
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	1860      	adds	r0, r4, r1
 8005c08:	4282      	cmp	r2, r0
 8005c0a:	d103      	bne.n	8005c14 <_free_r+0x88>
 8005c0c:	6810      	ldr	r0, [r2, #0]
 8005c0e:	6852      	ldr	r2, [r2, #4]
 8005c10:	1841      	adds	r1, r0, r1
 8005c12:	6021      	str	r1, [r4, #0]
 8005c14:	6062      	str	r2, [r4, #4]
 8005c16:	605c      	str	r4, [r3, #4]
 8005c18:	e7ca      	b.n	8005bb0 <_free_r+0x24>
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	200000cc 	.word	0x200000cc

08005c20 <_malloc_r>:
 8005c20:	2303      	movs	r3, #3
 8005c22:	b570      	push	{r4, r5, r6, lr}
 8005c24:	1ccd      	adds	r5, r1, #3
 8005c26:	439d      	bics	r5, r3
 8005c28:	3508      	adds	r5, #8
 8005c2a:	0006      	movs	r6, r0
 8005c2c:	2d0c      	cmp	r5, #12
 8005c2e:	d21e      	bcs.n	8005c6e <_malloc_r+0x4e>
 8005c30:	250c      	movs	r5, #12
 8005c32:	42a9      	cmp	r1, r5
 8005c34:	d81d      	bhi.n	8005c72 <_malloc_r+0x52>
 8005c36:	0030      	movs	r0, r6
 8005c38:	f000 f888 	bl	8005d4c <__malloc_lock>
 8005c3c:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <_malloc_r+0xb4>)
 8005c3e:	6814      	ldr	r4, [r2, #0]
 8005c40:	0021      	movs	r1, r4
 8005c42:	2900      	cmp	r1, #0
 8005c44:	d119      	bne.n	8005c7a <_malloc_r+0x5a>
 8005c46:	4c24      	ldr	r4, [pc, #144]	; (8005cd8 <_malloc_r+0xb8>)
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <_malloc_r+0x36>
 8005c4e:	0030      	movs	r0, r6
 8005c50:	f000 f86a 	bl	8005d28 <_sbrk_r>
 8005c54:	6020      	str	r0, [r4, #0]
 8005c56:	0029      	movs	r1, r5
 8005c58:	0030      	movs	r0, r6
 8005c5a:	f000 f865 	bl	8005d28 <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d12b      	bne.n	8005cba <_malloc_r+0x9a>
 8005c62:	230c      	movs	r3, #12
 8005c64:	0030      	movs	r0, r6
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	f000 f871 	bl	8005d4e <__malloc_unlock>
 8005c6c:	e003      	b.n	8005c76 <_malloc_r+0x56>
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	dadf      	bge.n	8005c32 <_malloc_r+0x12>
 8005c72:	230c      	movs	r3, #12
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	2000      	movs	r0, #0
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
 8005c7a:	680b      	ldr	r3, [r1, #0]
 8005c7c:	1b5b      	subs	r3, r3, r5
 8005c7e:	d419      	bmi.n	8005cb4 <_malloc_r+0x94>
 8005c80:	2b0b      	cmp	r3, #11
 8005c82:	d903      	bls.n	8005c8c <_malloc_r+0x6c>
 8005c84:	600b      	str	r3, [r1, #0]
 8005c86:	18cc      	adds	r4, r1, r3
 8005c88:	6025      	str	r5, [r4, #0]
 8005c8a:	e003      	b.n	8005c94 <_malloc_r+0x74>
 8005c8c:	684b      	ldr	r3, [r1, #4]
 8005c8e:	428c      	cmp	r4, r1
 8005c90:	d10d      	bne.n	8005cae <_malloc_r+0x8e>
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	0030      	movs	r0, r6
 8005c96:	f000 f85a 	bl	8005d4e <__malloc_unlock>
 8005c9a:	0020      	movs	r0, r4
 8005c9c:	2207      	movs	r2, #7
 8005c9e:	300b      	adds	r0, #11
 8005ca0:	1d23      	adds	r3, r4, #4
 8005ca2:	4390      	bics	r0, r2
 8005ca4:	1ac3      	subs	r3, r0, r3
 8005ca6:	d0e7      	beq.n	8005c78 <_malloc_r+0x58>
 8005ca8:	425a      	negs	r2, r3
 8005caa:	50e2      	str	r2, [r4, r3]
 8005cac:	e7e4      	b.n	8005c78 <_malloc_r+0x58>
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	000c      	movs	r4, r1
 8005cb2:	e7ef      	b.n	8005c94 <_malloc_r+0x74>
 8005cb4:	000c      	movs	r4, r1
 8005cb6:	6849      	ldr	r1, [r1, #4]
 8005cb8:	e7c3      	b.n	8005c42 <_malloc_r+0x22>
 8005cba:	2303      	movs	r3, #3
 8005cbc:	1cc4      	adds	r4, r0, #3
 8005cbe:	439c      	bics	r4, r3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d0e1      	beq.n	8005c88 <_malloc_r+0x68>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	0030      	movs	r0, r6
 8005cc8:	f000 f82e 	bl	8005d28 <_sbrk_r>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d1db      	bne.n	8005c88 <_malloc_r+0x68>
 8005cd0:	e7c7      	b.n	8005c62 <_malloc_r+0x42>
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	200000cc 	.word	0x200000cc
 8005cd8:	200000d0 	.word	0x200000d0

08005cdc <_realloc_r>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	0007      	movs	r7, r0
 8005ce0:	000d      	movs	r5, r1
 8005ce2:	0016      	movs	r6, r2
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	d105      	bne.n	8005cf4 <_realloc_r+0x18>
 8005ce8:	0011      	movs	r1, r2
 8005cea:	f7ff ff99 	bl	8005c20 <_malloc_r>
 8005cee:	0004      	movs	r4, r0
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	d103      	bne.n	8005d00 <_realloc_r+0x24>
 8005cf8:	f7ff ff48 	bl	8005b8c <_free_r>
 8005cfc:	0034      	movs	r4, r6
 8005cfe:	e7f7      	b.n	8005cf0 <_realloc_r+0x14>
 8005d00:	f000 f826 	bl	8005d50 <_malloc_usable_size_r>
 8005d04:	002c      	movs	r4, r5
 8005d06:	42b0      	cmp	r0, r6
 8005d08:	d2f2      	bcs.n	8005cf0 <_realloc_r+0x14>
 8005d0a:	0031      	movs	r1, r6
 8005d0c:	0038      	movs	r0, r7
 8005d0e:	f7ff ff87 	bl	8005c20 <_malloc_r>
 8005d12:	1e04      	subs	r4, r0, #0
 8005d14:	d0ec      	beq.n	8005cf0 <_realloc_r+0x14>
 8005d16:	0029      	movs	r1, r5
 8005d18:	0032      	movs	r2, r6
 8005d1a:	f7ff ff1a 	bl	8005b52 <memcpy>
 8005d1e:	0029      	movs	r1, r5
 8005d20:	0038      	movs	r0, r7
 8005d22:	f7ff ff33 	bl	8005b8c <_free_r>
 8005d26:	e7e3      	b.n	8005cf0 <_realloc_r+0x14>

08005d28 <_sbrk_r>:
 8005d28:	2300      	movs	r3, #0
 8005d2a:	b570      	push	{r4, r5, r6, lr}
 8005d2c:	4c06      	ldr	r4, [pc, #24]	; (8005d48 <_sbrk_r+0x20>)
 8005d2e:	0005      	movs	r5, r0
 8005d30:	0008      	movs	r0, r1
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	f7fd ff68 	bl	8003c08 <_sbrk>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d103      	bne.n	8005d44 <_sbrk_r+0x1c>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d000      	beq.n	8005d44 <_sbrk_r+0x1c>
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	20000178 	.word	0x20000178

08005d4c <__malloc_lock>:
 8005d4c:	4770      	bx	lr

08005d4e <__malloc_unlock>:
 8005d4e:	4770      	bx	lr

08005d50 <_malloc_usable_size_r>:
 8005d50:	1f0b      	subs	r3, r1, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	1f18      	subs	r0, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da01      	bge.n	8005d5e <_malloc_usable_size_r+0xe>
 8005d5a:	580b      	ldr	r3, [r1, r0]
 8005d5c:	18c0      	adds	r0, r0, r3
 8005d5e:	4770      	bx	lr

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
